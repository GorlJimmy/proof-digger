Question:1990年中国共产党的总书记是谁
ExpectAnswer:江泽民
Question:1990年中国共产党的总书记是谁
ExpectAnswer:江泽民
没有从数据库中查询到问题：APDPlat的发起人是谁？
Question:1990年中国共产党的总书记是谁
ExpectAnswer:江泽民
Question:被火烧死的革命战士是谁
ExpectAnswer:邱少云
Question:请问初唐四杰是哪四位
ExpectAnswer:王勃
Question:中国第一枚奥运会游泳金牌获得者是谁?
ExpectAnswer:庄泳
Question:谁领导中国人民创立了新中国
ExpectAnswer:毛泽东
Question:我国古代历法"十二气历"是谁提出的 
ExpectAnswer:沈括
Question:中国共产党的创始人李大钊是被什么人杀害的
ExpectAnswer:张作霖
Question:谁发现的万有引力定理
ExpectAnswer:牛顿
Question:《白雪公主》的作者是谁
ExpectAnswer:格林兄弟
Question:《黄河大合唱》的作曲者是谁
ExpectAnswer:冼星海
Question:《儒林外史》的作者是谁 
ExpectAnswer:吴敬梓
Question:《宿命》是谁的作品
ExpectAnswer:东野
Question:三国演义中蜀国的五虎大将里被称为常胜将军的是谁
ExpectAnswer:赵子龙
Question:抗美援朝中国人民志愿军司令员是谁
ExpectAnswer:彭德怀
Question:羽毛球界被称为超级丹的运动员是谁
ExpectAnswer:林丹
Question:世界名画《和平鸽》的创作者是谁
ExpectAnswer:毕加索
Question:被称为书圣的古代书法家是哪个
ExpectAnswer:王羲之
Question:清朝太后身边最著名的贴身太监叫什么
ExpectAnswer:李莲英
Question:是谁发明的地震仪
ExpectAnswer:张衡
Question:是谁发明的印刷术
ExpectAnswer:毕升
Question:谁写了著名的诗篇《将进酒》
ExpectAnswer:李白
Question:谁是中国第一任的外交部长
ExpectAnswer:周恩来
Question:谁在香港电影《花样年华》中饰演男主角
ExpectAnswer:梁朝伟
Question:宋朝的开国皇帝是谁
ExpectAnswer:赵匡胤
Question:唐朝的第一个皇帝是谁
ExpectAnswer:李渊
Question:卧龙先生是谁
ExpectAnswer:诸葛亮
Question:射雕英雄传的作者是谁
ExpectAnswer:金庸
Question:已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
ExpectAnswer:费玉清
Question:纸是谁发明的
ExpectAnswer:蔡伦
Question:中国参加奥运会次数最多的运动员是谁
ExpectAnswer:王义夫
Question:作家老舍的原名叫什么
ExpectAnswer:舒庆春
Question:谁粉碎了四人帮
ExpectAnswer:华国锋
Question:徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
ExpectAnswer:林青霞
Question:中国空军第一任总司令是谁
ExpectAnswer:叶挺
Question:中华人民共和国是哪位民主人士提出的
ExpectAnswer:张奚若
Question:《二泉映月》的作者原名是什么 
ExpectAnswer:华彦均
Question:自由落体定律由谁发现
ExpectAnswer:伽利略
Question:最早发现x射线的科学家是谁
ExpectAnswer:伦琴
Question:微软亚洲研究院的院长是谁
ExpectAnswer:洪小文
Question:中国共产党这个名称是谁最早提出的
ExpectAnswer:蔡和森
Question:我国军史上第一位女将军是谁
ExpectAnswer:李贞
Question:现代奥林匹克运动创始人是谁
ExpectAnswer:顾拜旦
Question:文学名著《西游记》是谁的作品
ExpectAnswer:吴承恩
Question:星际航行理论的开创者是哪位科学家
ExpectAnswer:钱学森
Question:中国古代哪一位曾被称为“药王”
ExpectAnswer:孙思邈
Question:谁是微软的首席执行官
ExpectAnswer:鲍尔默
Question:谁死后布了七十二疑冢
ExpectAnswer:曹操
Question:曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
ExpectAnswer:周润发
Question:谁发明了蒸汽机
ExpectAnswer:瓦特
Question:中国古代名医华佗为谁所杀
ExpectAnswer:曹操
Question:谁提出了改革开放
ExpectAnswer:邓小平
Question:APDPlat的发起人是谁？
ExpectAnswer:杨尚川
Question:被称为画圣的古代画家是哪一位
ExpectAnswer:吴道子
Question:被称为酿酒行业的祖师是谁
ExpectAnswer:孔子
Question:被今人誉为"开眼看世界第一人"是谁
ExpectAnswer:林则徐
Question:被列为世界十大文豪之一的中国文学家是哪位
ExpectAnswer:鲁迅
Question:被誉为“钢琴之王”的作曲家是谁
ExpectAnswer:李斯特
Question:被誉为乐圣音乐家的是谁
ExpectAnswer:贝多芬
Question:被誉为中国摇滚的第一人是谁
ExpectAnswer:崔健
Question:跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
ExpectAnswer:蔡依林
Question:“冲冠一怒为红颜“中的红颜是指谁
ExpectAnswer:陈圆圆
Question:草圣指哪位书法家
ExpectAnswer:张旭
Question:查尔斯的第二任妻子是谁
ExpectAnswer:卡米拉
Question:英国王储查尔斯的妻子是谁
ExpectAnswer:卡米拉
Question:查尔斯的妻子是谁
ExpectAnswer:卡米拉
Question:长篇小说《林海雪原》的作者是谁
ExpectAnswer:曲波
Question:1994年谁是土库曼斯坦的总统
ExpectAnswer:尼亚佐夫
Question:《星尘》这首歌是谁写的
ExpectAnswer:马修
Question:《孙子》的作者别名是什么
ExpectAnswer:孙武
Question:“宝带桥”是谁建造的
ExpectAnswer:王仲舒
Question:2008年北京奥运会开幕式和闭幕式的总导演是谁
ExpectAnswer:张艺谋
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
Question:《西厢记》的作者是谁
ExpectAnswer:王实甫
Question:《西厢记》是谁的作品
ExpectAnswer:王实甫
Question:《幸运52》的主持人是谁
ExpectAnswer:李咏
Question:称为“数学之神”的科学家是谁
ExpectAnswer:阿基米德
Question:“初出茅庐”中茅庐的本意指谁的住处
ExpectAnswer:诸葛亮
Question:金庸原名是什么
ExpectAnswer:查良镛
Question:第一个获得国际权威的杰西·欧文斯奖的中国人是谁
ExpectAnswer:王军霞
Question:电视剧《新白娘子传奇》的主演叶童原名是什么
ExpectAnswer:李思思
Question:电影《英雄》的编剧是谁
ExpectAnswer:王斌
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
Question:《洛神赋图》是谁的作品
ExpectAnswer:曹植
Question:诗仙是谁
ExpectAnswer:李白
Question:岳不群的女儿叫什么名字
ExpectAnswer:岳灵珊
Question:我国明代“七下西洋”的航海家是谁
ExpectAnswer:郑和
Question:曹雪芹的《红楼梦》中，葬花的人是谁
ExpectAnswer:林黛玉
Question:金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
ExpectAnswer:谢逊
Question:第一位扮演邦女郎的亚洲女星是谁
ExpectAnswer:杨紫琼
Question:创办“精武门”的中国清末爱国武术家是谁
ExpectAnswer:霍元甲
Question:由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
ExpectAnswer:小柯
Question:以“莫须有”罪名毒害了名将岳飞的奸臣是谁
ExpectAnswer:秦桧
Question:被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
ExpectAnswer:周慧敏
Question:97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
ExpectAnswer:赵薇
Question:《西雅图不眠夜》的女主角是谁
ExpectAnswer:安妮
Question:清朝道光年间，在虎门销禁鸦片的民族英雄是谁
ExpectAnswer:林则徐
Question:一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
ExpectAnswer:李小龙
Question:电影《白毛女》中，抢走喜儿的地主叫什么名字
ExpectAnswer:黄世仁
Question:《封神演义》中，哪吒的父亲托塔李天王名叫什么
ExpectAnswer:李靖
Question:中央电视台著名节目《实话实说》的第一任主持人是谁
ExpectAnswer:崔永元
?. 1990年中国共产党的总书记是谁

Title: 江泽民- 维基百科，自由的百科全书
Snippet: 1990年6月11日，时任中共中央总书记的江泽民在全国统战工作会议开幕式上就  中華民國總統李登辉的演说发表了看法，他重申：只要双方坐下来，真正本着“一个  中国”?...

Title: 新中国成立后历届国家主席、军委主席、国家总理、总书记、人大委员长
Snippet: http://hi.baidu.com/simudi ... 中华人民共和国中央军事委员会主席邓小平（1983年—  1990年） ... 中共中央总书记：向忠发（1928年6月至7月中共六大选举产生）

Title: 习近平_百度百科
Snippet: 现任中国共产党中央委员会总书记、中共中央军事委员会主席，中华人民共和国主席  ，中华人民 ... 1988－1990年福建省宁德地委书记，宁德军分区党委第一书记.

Title: 1990年江泽民首访朝金日成迎接用中文致敬_雅虎文化
Snippet: 2013年3月31日 ... 金日成主动迎上来，两位总书记在舷梯旁紧紧握手，热烈拥抱。金日 ... 1990年3月14  日至16日，江泽民同志访问朝鲜，这是他担任中共中央总书记之后的首次出访。 ...   1979年西方人眼中中国唯一能最后拍板的人是谁2013年03月27日?...

Title: 中国共产党中央书记处_百度百科
Snippet: 中国共产党中央书记处是中共中央政治局及常务委员会的办事机构；成员由中共中央   ... 在1956年至1966年中央书记处曾设立总书记一职，其权力和职能与今天的中央   ..... 中央政治局候补委员，国台办主任（1988年－1990年）、中央统战部部长（1990?...

Title: 党和国家领导人- 维基百科，自由的百科全书
Snippet: 在中华人民共和国政治中，党和国家领导人一词用于国内领导人时，是一个指称中央   ... 中国共产党中央委员会：总书记、中央政治局常务委员会委员、中央政治局委员、   ...... 1990年颁布施行的《中华人民共和国国旗法》第十四条规定为国家主席、全国?...

Title: 领导人_百度百科
Snippet: 不过随着中国政治的发展，中共中央领导层加强集体领导，特别是中共中央政治局 ...   中国共产党中央委员会：总书记、中央政治局常委、中央政治局委员、中央书记处书记   ..... 年5月25日至1990年3月15日为最高苏维埃主席，1990年3月15日至1991年12月  25日为苏联总统） .... 2013 Baidu 使用百度前必读 | 百科协议 | 百度百科合作平台?...

Title: 赵紫阳- 维基百科，自由的百科全书
Snippet: 5.1 被邓小平提拔为总理和总书记; 5.2 致力于推进经济和政治改革 ... 1945年8月後，  中共中央任命他為地委副書記兼軍分區副政治委員、地委書記兼軍分區政治委員。   ..... 在擔任中國國務院總理期間，趙紫陽是中國經濟體制改革的實際組織者和領導者  。 ... 作家胡平称这是包括李鹏在内的“倒赵派”对赵的诬陷。1990年6月，王任重将  调查?...

Title: 中国共产党_百度百科
Snippet: 中国共产党是中国工人阶级的先锋队，同时是中国人民和中华民族的先锋队，是中国  特色社会主义事业的领导核心，代表中国先进生产力的 .... 中国共产党中央委员会总  书记（简称“中共中央总书记”，中共中央主要负责人） ..... 1990年12月25日至30日.

Title: 改革开放- 维基百科，自由的百科全书
Snippet: 關於戈巴契夫擔任蘇共中央總書記期間推動的經濟改革，詳見「经济改革」。 .... 改革  开放是中国共产党於1978年召開的中国共产党十一届三中全会上提出的一條「對內  改革、對外開放」的戰略決策， ..... 1990年12月25日至30日中共十三届七中全会举行  。


?. 被火烧死的革命战士是谁

Title: 邱少云_百度百科
Snippet: 其二是他的身边有无水沟，谁看见邱少云烧死的经过？ .... 突然，有两名战士被敌人  发现了，敌人吓得倒退了两步，慌张地乱扫了一通子弹，扭头就朝山顶上逃跑。

Title: 纪实回忆：泸州武斗亲历记
Snippet: 文革时期属泸州市“贫下中农革命造反联合会沙湾造反总部”（红旗派）。 一 从人到猿 “  从人到 .... 见有生力军来顿时声威大振，不知是谁大叫一声“冲啊！”，战士们就像 ...

Title: 伽利略·伽利雷_百度百科
Snippet: 伽利略没有轻率地下结论，他决定用自己的望远镜来证实谁是谁非。 ... 不会忘记，16  年前布鲁诺就是被这些披着黑色道袍、道貌岸然的上帝的卫道士活活烧死的。

Title: 是谁,人造出英雄“王杰”_墨娃mowa_新浪博客
Snippet: 2012年10月19日 ... 相反，很多特级英雄死得窝窝囊囊，军中的头号模范战士雷锋是被木头杆子撞死的，  欧阳海是被火车压死的，邱少云是被火烧死的。王杰违规致死，更 ...

Title: 有的人_百度百科
Snippet: 《有的人》是当代诗人臧克家为纪念鲁迅逝世十三周年而写的一首抒情诗。诗歌通过两  种人的对照，对“俯首甘为孺子牛”的人倾注了无限深情，表达了崇高的敬意；而对高 ...

Title: 道县事件- 维基百科，自由的百科全书
Snippet: 一派称毛泽东思想红战士联合司令部，简称“红联”；另一派称无产阶级革命派斗 ..... 的  孩子也被周队长抓来扔进该地窖，这8岁大的女儿和2岁的小儿子也被活活烧死。

Title: 烈火金刚_百度百科
Snippet: 《烈火金刚》（本名应为《烈火金钢》）是1958年作家刘流所著的一部看抗战题材小说。  故事讲述了 ... 丁尚武也是一个勇敢顽强、机智多谋的革命战士的形象。田耕、齐英、 ...

Title: 林彪- 维基百科，自由的百科全书
Snippet: 林彪自称至死是民族主义者，即不是共产主义者。 .... 林育蓉经常接触陈潭秋、董必武  、恽代英、林育南、林育英等从事革命活动的共产党人，听他们谈论国家大事。

Title: 康生- 维基百科，自由的百科全书
Snippet: 中国共产党的优秀党员，是中国人民的伟大的革命战士和马克思主义理论家，是党和  国家卓越的领导人之一、中国人民的伟大的无产阶级革命家，光荣的反修战士。

Title: [原创]姥爷是抗美援朝的战士，这是他写的革命回忆录，喜欢的看看 ...
Snippet: 4 days ago ... 在革命大熔炉中锻炼成了革命战士。 .... 年解放战争，本应休养生息，恢复元气，美  帝国主义便把战火烧到我们眼皮子底下，气势汹汹，咄咄逼人，我们 ...


?. 请问初唐四杰是哪四位

Title: “初唐四杰”指哪几位诗人
Snippet: 初唐四杰”指哪几位诗人. 初唐四杰，是初唐文学家王勃、杨炯、卢照邻、骆宾王的合称  。《旧唐书?¤杨炯传》说：“炯与王勃、卢照邻、骆宾王以文诗齐名，海内称为王杨卢骆，?...

Title: 初唐四杰指的是哪四位诗人- 已回答- 搜搜问问
Snippet: 初唐四杰指的是王勃、骆宾王、杨炯、卢照邻这四个人， 他们都是初唐中后期很有  才华的诗文作家，四人才名早享，在青少年时代就获得“四杰”的美誉。 在唐诗史上，?...

Title: 初唐四杰_百度百科
Snippet: 初唐四杰”是指中国唐代初期四位文学家王勃、杨炯、卢照邻、骆宾王的合称，简称“王  杨卢骆” ... 王勃是初唐诗坛上一位非常有才华的诗人，只活了27岁，确实令人痛惜。

Title: [转]大学生人文社会科学知识竞赛（文学常识部分，好长……慢慢看不 ...
Snippet: 6、“卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭”，该诗句的作者是： 【A】 A北岛B   ... 9、初唐四杰是指哪四位？ ... 上联是：“千教万教教人求真”，请问下联是什么？

Title: 中国文学常识问答100题_语文教参
Snippet: 2013年5月16日 ... 初唐四杰”是指哪四位？ ... 诗仙” 和“诗圣” 各是哪位诗人，他们的诗歌各具什么特色  ？ 李白是“ ... 元曲四大家”是指哪四位，他们各自的代表作是什么？

Title: 第51章搞怪考试-新笑死你不偿命2
Snippet: 答曰：中国的煤都是（黑的），中国的铁都是（硬的）…… 搞定以后，还抱怨 ... 答曰：  华山派……那请问鲁迅是少林的还是武当的？ ... 初唐四杰是哪四位？答曰：东邪西  毒，?...

Title: 文学知识竞赛风险题知识竞赛题库
Snippet: 6、“卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭”，该诗句的作者是： 【A】 A北岛 B   ... 9、初唐四杰是指哪四位？ ... 上联是：“千教万教教人求真”，请问下联是什么？

Title: 初唐四杰- 维基百科，自由的百科全书
Snippet: 初唐四傑，中國唐代初年，文学家王勃、杨炯、卢照邻、骆宾王的合称。 ... 此外，《旧唐  书?¤裴行俭》也有“杨王卢骆”的排序，吏部侍郎李敬玄盛讚四人，但裴行儉見面後，便?...

Title: 九龙朝答题器_九龙朝科举考试答题器_太平洋游戏网
Snippet: 2013年5月14日 ... 九龙朝“碧玉妆成一树高,万条垂下绿丝绦”是哪位诗人的诗句? 贺知章. “初唐四杰”指  的是? 王勃、杨炯、卢照邻、骆宾王. “初唐四杰”中以边塞诗闻名于?...

Title: 初唐四杰诗唐诗中的地位是什么_古典文学_文艺作品_天涯问答
Snippet: 对打破宫体诗的束缚、铺平新诗发展之路，初唐四杰是有贡献的，杜甫评四杰诗说“王  杨卢骆当时体，轻薄为 ..... 王勃；骆宾王；杨炯；庐照陵四人被后人称为“初唐四杰”。


?. 中国第一枚奥运会游泳金牌获得者是谁?

Title: 洛克王国中国第一枚奥运会游泳金牌获得者是谁_洛克王国洛克问答_ ...
Snippet: 2013年6月21日 ... 关键字：洛克王国第一枚游泳金牌中国第一枚奥运会游泳金牌获得者是谁问：洛克  王国中国第一枚奥运会游泳金牌获得者是谁？ 答：中国第一枚 ...

Title: 中国奥运史上各大项目第一枚金牌
Snippet: 2008年7月25日 ... 2、中国第二枚奥运会金牌获得者——曾国强 1984年第23届洛杉矶奥运会上获举重  52公斤级金牌。 是我国第一位摘得奥运会金牌的举重运动员。

Title: 奥运会历史上最多金牌获得者是谁？_爱问知识人
Snippet: 金牌获得者奥运会夏季奥运会上获金牌最多的运动员有3名， 各自获得9枚金牌，   他们分另是： 1、美国男子游泳运动员马克．施皮茨。 他在第十九届 ...

Title: 奥运知识题库——学习一下- 有意思吧
Snippet: 2008年8月19日 ... 8、国际奥委会的第一位中国委员是谁——王正廷 9、旧中国第一次正式 ... 22、中国  第一枚奥运会游泳金牌获得者是——庄泳 23、首次夺得奥运会 ...

Title: 1984年洛杉矶奥运会_百度百科
Snippet: 比赛项目; 田径; 游泳; 中国第一次奥运会金牌; 跳水; 举重; 体操; 击剑 .... 第一枚金牌  获得者，也是中国第一位奥运会金牌获得者，由此开始了中国奥运史上的新篇章。

Title: 金牌时刻_2012伦敦奥运会_中国网
Snippet: 2012年8月12日 ... 这是中国代表团在此次伦敦奥运会上获得的第37枚金牌。 ... 他是冯喆，他在自己的  第一届奥运会上表现出了难得的大将风度和稳定的心态，以15.966 ...

Title: 孙杨_百度百科
Snippet: 中国男子游泳奥运会第一枚金牌 ... 男子4×200米自由泳接力决赛中，中国队依靠孙  杨最后一棒发力提升了两个名次而夺得铜牌，这是中国男子游泳奥运会接力第一枚 ...

Title: 中国历届奥运会首枚金牌得主都是谁？ - 纪实- 华声博览- 华声在线
Snippet: 2012年7月25日 ... 这是中国代表团在本届奥运会上获得的第一枚金牌，也是中国游泳运动员第一次登上  奥运会冠军领奖台。然而，庄泳的成功仅仅是一个开始，沉寂 ...

Title: 中国历届奥运会首枚金牌得主都是谁？-体育星闻-杭州19楼
Snippet: 2012年7月27日 ... 这是中国代表团在本届奥运会上获得的第一枚金牌，也是中国游泳运动员第一次登上  奥运会冠军领奖台。然而，庄泳的成功仅仅是一个开始，沉寂 ...

Title: 奥运时事政治自我检测100题
Snippet: 2013年6月26日 ... 在2000年第27届奥运会上中国获得了哪一个项目历史上的第一块金牌？（A） A 男子  团体体操B ... 现代奥运会第一枚金牌获得者是？（B） A 夏洛特·库 ...


?. 谁领导中国人民创立了新中国

Title: 中国共产党_百度百科
Snippet: 中国工人阶级的先锋队，中国社会主义事业的领导核心，中国各族人民利益的代表者   .... 介绍到上海会见陈独秀，共同商谈讨论了建党问题，促进了中国共产党的创立。

Title: 中国人民解放军- 维基百科，自由的百科全书
Snippet: 由于中国人民解放军是由中国共产党一手创立的，故只有中国共产党才能指挥调动  解放军，党中央军事委员会为实际的最高军事领导机构，中共中央军委主席一般由 ...

Title: 邓小平_百度百科
Snippet: 邓小平是中国共产党第二代领导核心，马克思主义者，无产阶级革命家、政治家、军事  家、外交家，同时也是中国人民解放军、中华人民共和国的主要领导人之一。

Title: 中国共产党- 维基百科，自由的百科全书
Snippet: 中国共产党领导的多党合作和政治协商制度 · 中国人民政治协商会议 · 全国委员会／   .... 1.1.1 創立背景與過程; 1.1.2 中共一大; 1.1.3 第一次国共合作. 1.2 土地革命

Title: 领导人_百度百科
Snippet: 党和国家领导人出席新中国成立六十周年大会 ... 党和国家领导人是指称中国共产党  和中华人民共和国中央层面具有特定职务及级别的高级领导人的正式性的特定人群   ...

Title: 三十六个军事家
Snippet: 1989年11月， 经中央军委确定， 33人被冠以“中国人民解放军军事家”的称号，1994  年8月又确定增补3人， ... 其中有五位国家主要领导人，10位元帅，10位大将。

Title: 中国人民政治协商会议_百度百科
Snippet: 中国人民政治协商会议，是中国各族人民经过长期的革命斗争，在新中国成立前夕，  由中国共产党和各民主党派、无党派民主人士、各人民团体、各界爱国人士共同创立   ...

Title: 组织开展新中国人民防空创立60周年庆祝活动实施方案
Snippet: 一、 指导思想 组织开展新中国人民防空创立60周年庆祝活动，要紧紧围绕宣传“国家  方针、领导关怀、辉煌成就、人防法规、典型风采、展望未来”等主题内容，结合人防 ...

Title: 沙健孙：毛泽东与新中国的创立和发展--中国共产党新闻--人民网
Snippet: 2009年8月16日 ... 认真总结毛泽东对新中国的创立和发展在理论与实践上所作出的历史性贡献， ...   中国共产党领导中国人民进行反帝反封建的民主革命的根本目的, ...

Title: 热烈庆祝新中国人民防空创立62周年_房山区防空防灾信息网
Snippet: 2012年10月22日 ... 房山区民防局关于纪念新中国人民防空创立62周年宣传活动的通知各乡镇、街道  办事 ... 活动领导小组办公室设在法宣科，具体安排、协调有关事宜。


?. 我国古代历法"十二气历"是谁提出的 

Title: 历法_百度百科
Snippet: 中国古代天文学史，在一定意义上来说，就是一部历法改革史。 时间长河是无限的，   ..... 宋代最富有革新的历法，莫过于北宋时期沈括提出的十二气历。我国历代颁发的 ...

Title: 沈括创制的十二气历 比现行公历还科学_张凤林_新浪博客
Snippet: 2013年3月29日 ... 十二气历是北宋科学家沈括创制的一种与现今阳历相似的历法。我国传统 ... 二十四  节气的设置，是中国古代在历法制度中的一项独特创造。它正确地 ...

Title: 十二气历_百度百科
Snippet: 基本概念十二气历是北宋科学家沈括创制的一种与现今阳历相似的历法。我国传统的   ... 二十四节气的设置，是中国古代在历法制度中的一项独特创造。它正确地反映了 ...

Title: 97）中国古历的历算过程是什么？
Snippet: 按一年中太阳所走的路程等分的叫定气.从冬至开始,每隔一个气,如:大寒,雨水,春分…  …等都叫中气;其余十二个,如:小寒,立春,惊蛰……等都叫节气.朔是中国古代历法的 ...

Title: 太初历_百度百科
Snippet: 定义历法是长时间的纪时系统。具体地说，就是对年、月、日、时的安排。因为农事  活动和四季变化密切相关，所以历法最初是由农业生产的需要而创制的。我国的农业   ...

Title: 观测实践与我国古代历法的演进
Snippet: 来自全国各地的天文历法家提出. 了十八种供选用的历法 .... 历法不. 符实际天象或不  甚堆确,. 是我国古代历法改革的最主要原因,. 其中又以气朔、. 交食、. 五星之验最为 ...

Title: 古历_百度百科
Snippet: 从冬至开始，每隔一个气，如:大寒、雨水、春分……等都叫中气；其余十二个，如:小寒,  立春,惊蛰……等都叫节气。朔是中国古代历法的阴历成分。日月的黄道经度相同的 ...

Title: 農曆- 维基百科，自由的百科全书
Snippet: 请协助添加多方面可靠来源以改善这篇条目，无法查证的内容可能會被提出异议而移  除。 农历又称夏曆，是现今依旧广泛使用的中国传统历法，在古代一般称“黄历”或“ ...

Title: 生肖- 维基百科，自由的百科全书
Snippet: 生肖，或属相，是中國及东亚地区的一些民族用来代表年份的十二种动物，統稱為十   ... 儘管中國古代曆法有建子（冬至所在月份）、建丑（冬至次月）、建寅（冬至後兩月） ...

Title: 中国古代历法常识
Snippet: 这是因为秦的历法，以十月为一年的首月，九月为末月，秦二世二年十二月就是  夏正元 .... 中国古代历法是一门很专门的学问，是古天文学的一个分支，内容十分  丰富， ...


?. 中国共产党的创始人李大钊是被什么人杀害的

Title: 张作霖杀害李大钊内幕：认为他是俄国人的奸细-搜狐文化频道
Snippet: 2013年4月28日 ... 李大钊被绞杀内幕：张作霖称他是俄国人的奸细. ... 李大钊是中国共产党的创始人之  一，但是李的一个特殊身份长期并没有受到应有的认定，正是他 ...

Title: 张作霖杀害共产党创始人李大钊的复杂内幕_读者文摘_历史论坛_新浪网
Snippet: 6 days ago ... 核心提示：李大钊是中国共产党的创始人之一，但是李的一个特殊身份 .... 李大钊被杀  后，张作霖曾将部分在苏联使馆搜查到的文件公开展览，并请 ...

Title: 李大钊同志被捕和就义纪实--中国共产党新闻--中国共产党新闻-人民网
Snippet: 今年四月二十八日，是李大钊同志英勇就义五十三周年。大钊同志是我国共产主义  运动的先驱，中国共产党的创始人之一。他的道德、学问和文章为举世景仰，影响和 ...

Title: 李大钊- 维基百科，自由的百科全书
Snippet: 李大钊（1889年10月29日－1927年4月28日），字守常，河北乐亭人，中国共产党  主要创立人之一，中国最早的马克思主义者和共产主义者之一，是中国国民党第一届   ...

Title: 张作霖杀害共产党创始人李大钊的复杂内幕- 中国历史- 铁血社区
Snippet: 2010年11月2日 ... 李大钊是中国共产党的创始人之一，但是李的一个特殊身份长期并没有 .... 李大钊被  杀后，张作霖曾将部分在苏联使馆搜查到的文件公开展览，并请 ...

Title: 中国共产党的创始人是谁？_百度知道
Snippet: 中国共产党的创始人是谁？中国共产党的两位最主要创始人——陈独秀、李大钊！“  中国共产党的成立”。马克思主义与中国工人运动相结合，导致 ...

Title: [转贴]张作霖杀害共产党创始人李大钊的复杂内幕 - 中国历史 - 铁血社区
Snippet: 张作霖在杀害李大钊时面临极大压力，而最后下决心判李的死刑，也是认为 ... 李大钊  是中国共产党的创始人之一，但是李的一个特殊身份长期并没有 ...

Title: 中共创始人因叛国罪被判死刑后绞死- 阿波罗新闻网
Snippet: 2011年6月30日 ... 李大钊是以和苏俄里通外国罪被判死刑的 ... 李大钊，中共早期创始人和领导者之一，  中国最早的马克思主义者之一。1889年10月29日出生于河北省 ...

Title: 李大钊被绞杀内幕：张作霖称李大钊是俄国人的奸细-读书频道-金融界
Snippet: 2013年5月17日 ... 李大钊被绞杀内幕：张作霖称李大钊是俄国人的奸细, 李大钊怎么死的？ 李大钊是  中国共产党的创始人之一，但是李的一个特殊身份长期并没有受到 ...

Title: 李大钊被杀内幕：张作霖称他是奸细_飞九军事
Snippet: 2013年6月1日 ... 李大钊是中国共产党的创始人之一，但是李的一个特殊身份长期并没有受到应有的  认定 ... 飞九军事 > 历史秘闻 > 李大钊被杀内幕：张作霖称他是奸细 ...


?. 谁发现的万有引力定理

Title: 万有引力定律_百度百科
Snippet: 万有引力定律的发现，是17世纪自然科学最伟大的成果之一。 ... 万有引力与相作用  的物体的质量乘积成正比，是发现引力平方反比定律过渡到发现万有引力定律的?...

Title: 万有引力定律_互动百科
Snippet: 万有引力定律的发现，是17世纪自然科学最伟大的成果之一。它把地面上物体运动的  规律和天体运动的规律统一了起来，对以后物理学和天文学的发展具有深远的影响?...

Title: 艾萨克?¤牛顿- 维基百科，自由的百科全书
Snippet: 他也证明了广义二项式定理，提出了“牛顿法”以趋近函数的零点，并为幂级数的 .....   虽然运动定律与万有引力是牛顿最著名的发现，他却反对用它们来将宇宙解释为一部   .... 此外不含有——谦逊的意味：当时两人正处在一场关于谁发现了光学的争论中。

Title: 牛顿「发现」还是「发明」了万有引力定律？ - 知乎
Snippet: 再回头来看牛顿定律（无论是三大运动定律还是万有引力定律）。当我们说牛顿发现了  这些定律的时候意味着什么？意味着这些定律原本就存在着。我想很多学生都有?...

Title: 牛顿万有引力定律- 维基百科，自由的百科全书
Snippet: 万有引力定律是艾萨克?¤牛顿在1687年于《自然哲学的数学原理》上发表的。 .... 牛顿  对重力的发现埋葬了“哲学家至今仍在愚蠢地试图探索自然”(philosophers have?...

Title: 开普勒定律- 维基百科，自由的百科全书
Snippet: 大约于1605 年，根据布拉赫的行星位置資料，开普勒发现行星的移动遵守著三条 ....   猜想这大概是牛顿发现万有引力定律的思路，但這猜想無法被證實，因为在他的?...

Title: 牛顿发现万有引力、三大运动定律
Snippet: 万有引力的发现说明，天上星体运动和地面上物体运动都受到同样的规律——力学 ...   在牛顿发现万有引力定律以前，已经有许多科学家严肃认真的考虑过这个问题。

Title: 万有引力乌有是万有引力公式的自白吕柏林东洋镜
Snippet: 2013年1月10日 ... 引力＝Ｍ２对Ｍ１的引力，谁也拉不动谁”的结论，从而发现万有引力乌有。 二，凡是  证明万有引力定理成立的人和出版、宣传、教授、应用万有引力定理

Title: 三大运动定律——人类最伟大的十个科学发现之三
Snippet: 本站将陆续推出这十大科学发现的故事，它们分别是勾股定理、微生物的存在、三大   ... 在牛顿发现万有引力定律以前，已经有许多科学家严肃认真的考虑过这个问题。

Title: 前人的足跡：庫倫
Snippet: 2013年2月22日 ... 在電學方面，他發現琥珀經過摩擦後能吸引小物體，而且像金鋼石、水晶、 ... 球殼殼  層定理』(註1) ， 他就大膽推測，電荷之間的作用力和萬有引力一樣?...


?. 《白雪公主》的作者是谁

Title: 《剧本《白雪公主》》水晶沙_【原创小说|言情小说】_晋江文学城
Snippet: 作者有话要说： 其中，有一些的经典句子都是摘抄来的，望作者原谅！ .... 落雁（脸上  泛起以着红晕，手中提着一面雨伞）：花的女儿是谁？。fccb60fb512d13 猎人：咦…

Title: 白雪公主_百度百科
Snippet: 经过一年已经过去了,国王需要一个新妻子,谁是美丽的但也坏透地目空一切的和 .....   黑发与红唇，被某些人认为和吸血鬼相似，因此一些作者在他们的再创作中将公主 ...

Title: 白雪公主- 维基百科，自由的百科全书
Snippet: 新皇后有一面魔鏡，她常常問魔鏡：「魔鏡呀魔鏡，誰是世界上最美的女人？ ... 1986  年洛尔的历史学家巴特尔思（Dr. Karlheinz Bartels）将《白雪公主》童话的许多现实 ...

Title: 《白雪公主》的作者是谁？ 【小山屋】- Powered by xiaoshanwu.com
Snippet: 2008年2月20日 ... 格林兄弟所写的“格林童话”，包括200多篇童话和600多篇故事。其中代表作如《青蛙  王子》、《灰姑娘》、《白雪公主》、《小红帽》等.

Title: 《白雪公主与七个小矮人》_搜索_互动百科
Snippet: 共被7位作者编辑7次，最新版本由cuping 于2013年03月05日编辑 ... 游戏大小：9.8  M...小矮人》七个小矮人为了得到公主进行史无前例的互相攻击，谁是最后的胜利者.

Title: 世界金奖童话系列：《白雪公主》
Snippet: 世界金奖童话系列：《白雪公主》 ... 谁是全国最美丽的女人？ 镜子回答说： 王后，你是  全国最美丽的女人。 她听了很满意，因为她知道，镜子是说实话的。 但是白雪公主 ...

Title: 关于白雪公主的作者_白雪公主吧_百度贴吧
Snippet: 关于白雪公主的作者. 若此丶最好时光. 《白雪公主》的作者，大家都认为是格林兄弟吧  。其实不是，虽然我不知道实情，到底是格林兄弟改写的呢，还是抄袭的。昨天，我 ...

Title: 格林童话精选：白雪公主（经典插图本）
Snippet: 那么，这些故事的作者是谁呢？是德国的格林兄弟。 ... 现在，我们从中选出60篇最最  好看的故事编成这本《白雪公主》，还挑了德国美术大师路德维希?里希特的30多幅 ...

Title: 关于新白雪公主的那部漫画，谁知道具体叫什么名字，是谁画的吗，我 ...
Snippet: 关于新白雪公主的那部漫画，谁知道具体叫什么名字，是谁画的吗，我小学的时候看  过现在再也找不到了作者是：高濑绫，书里女主人公叫胡桃，误入 ...

Title: 《白雪公主之魔镜魔镜》，水晶球里的乱伦惨案- 人民聊吧
Snippet: 《白雪公主之魔镜魔镜》是塔西姆·辛继《惊天战神》后的又一作品，如果说《惊天战神》  是制片人授意的抄袭产物，那么《白雪公主》便更不值得原谅。


?. 《黄河大合唱》的作曲者是谁

Title: 《黄河大合唱》的作曲者是谁？_爱问知识人
Snippet: 《黄河大合唱》已经诞生60周年了。这首唱遍了全国和世界许多地方的歌，当年是怎样  诞生的呢？歌词作者、诗人光未然和曲作者、 音乐家冼星海是怎样 ...

Title: 《黄河大合唱》的作曲者是谁？ 【小山屋】- Powered by xiaoshanwu.com
Snippet: 2008年2月20日 ... 由光未然作词、冼星海作曲的《黄河大合唱》表现了在抗日战争时期，中国人民的苦难  与顽强斗争，表现了我们民族的伟大精神和不可战胜的力量.

Title: 【纪念】今天是《黄河大合唱》作曲者冼星海诞辰102周年_音乐家吧_百度 ...
Snippet: 【纪念】今天是《黄河大合唱》作曲者冼星海诞辰102周年. 只看楼主. 收藏. 回复. 超  时空对话. 向《黄河大合唱》的作曲者致敬！请到冼星海纪念馆：

Title: 黄河大合唱_百度百科
Snippet: 还在延安的时候，人们就告诉我，重庆和国内各报都有说及《黄河大合唱》是抗战期中  新音乐的创举。 ... 一九三七年冼星海为《日出》《大雷雨》等剧作曲配音。“八·一三” ...

Title: 百科知识总汇
Snippet: 回答:校园歌曲《童年》的词曲作者是罗大佑，这首歌曲至今仍为很多学子所喜爱。 6、  百科知识:《黄河大合唱》的作曲者是谁？ 回答:由光未然作词、冼星海作曲的《黄河 ...

Title: 《黄河大合唱》_互动百科
Snippet: 《黄河大合唱》-《黄河大合唱》由光未然作词，冼海星作曲。是一部 ... 还在延安的时候，  人们就告诉我，重庆和国内各报都有说及《黄河大合唱》是抗战期中新音乐的创举。

Title: 修真世界智力竞赛题目参考_969G修真世界
Snippet: 2012年11月23日 ... 《繁星》、《春水》是谁的作品?(冰心). 《格萨尔王》史诗是我国哪个民族的 ... 植树3—5  棵?11岁. 《黄河大合唱》的作曲者是?冼星海. 《卡萨布兰卡》由谁 ...

Title: 《黄河大合唱》诞生70周年_专题_新浪城市
Snippet: 2009年，在《黄河大合唱》诞生70周年之际，为庆祝新中国成立60周年，由上海市委  宣传部、市文明办为指导单位，上海文广新闻传媒集团 ... 《黄河大合唱》的作曲是谁？

Title: 黄河大合唱- 维基百科，自由的百科全书
Snippet: 由于意识形态方面的原因，《黄河大合唱》在台湾“戒严时期”曾经被禁止演奏。 ... 1939  年4月13日，《黄河大合唱》在延安陕北公学礼堂首次公演，由抗敌演剧第三队演唱， ...

Title: 《黄河大合唱》在中国近代音乐史上具有怎样的影响与地位_百度知道
Snippet: 烘托出万马奔腾之势。 《黄河大合唱》是一部史诗性大型声乐套曲，共分八个乐章。由  光未然作词，冼海星作曲。作品表现了在抗日战争年代里，中国 ...


?. 《儒林外史》的作者是谁 

Title: 儒林外史- 维基百科，自由的百科全书
Snippet: 根据程晋芳《怀人诗》，可以证明在吴敬梓49岁（1750年）的时候已经脱稿，但是直到  作者死后十多年，金兆燕官揚州府學教授時，將《儒林外史》刊刻印行，“人争传写之”。

Title: 儒林外史_百度百科
Snippet: 编辑本段创作历程. 《儒林外史》是我国清代一部伟大的现实主义的长篇讽刺小说，  大约在1750年前后，作者50岁时成书，先后用尽了吴敬梓的20年。主要描写封建社会   ...

Title: 《儒林外史》讽刺艺术之探窥——中国文学网
Snippet: 吴敬梓的著作，除《儒林外史》外，还有《文木山房集》及《金陵景物图诗》。 ... 王冕、  虞育德、杜少卿、庄绍光等是作者理想中“振兴世教”的人物，其中王冕在第一回出现，   ...

Title: 《儒林外史》茶饮多_佛教频道_凤凰网
Snippet: 2012年9月5日 ... 来源：《饮食科学·茶文化》 作者：林长华. 字号:T|T. 0人参与0条评论打印转发. 《儒林  外史》是一部写茶最多的古典名著（图片来源：资料图）. 茶与文人有 ...

Title: 《儒林外史》何以在英语世界姗姗迟来-中国社会科学在线
Snippet: 2013年7月19日 ... 有趣的是，就其在英语世界的传播而言，《儒林外史》与另两部作品相比， ... Liáu Chái  ），概述了《祝翁》、《张诚》等9则《聊斋》故事，作者是德国传教士 ...

Title: 儒林外史(豆瓣)
Snippet: 对我来说，《儒林外史》是一部典型让人慢热的书。读开头时未觉其良，到三成时方品  出个中滋味，却在过半之后，深觉其不可多得。 开头写王冕，代表作者所崇敬的 ...

Title: 《金瓶梅》的讽刺艺术开《儒林外史》的先河_读书频道_凤凰网
Snippet: 2013年2月1日 ... 首先，作者怎样把《水浒传》里西门庆和潘金莲通奸的故事修改，已经决定这 ... 近代的  批评家轻易便说《儒林外史》是中国讽刺小说的鼻祖，实在很不 ...

Title: 《儒林外史》人物论(豆瓣)
Snippet: 书名、作者、ISBN. 分类浏览 · 作者 · 阅读 .... 陈美林果然是浸淫《儒林外史》数十年的  行家，将一部小书写得非常厚实，我断断续续一个月才得看完。吴敬梓百年后遇一解   ...

Title: 国学资讯- 商伟：换个角度激活《儒林外史》 -
Snippet: 2012年11月22日 ... 安徽人吴敬梓在18世纪中叶所写的《儒林外史》直到1803年正式刊行才逐渐从作者所  处的文人小圈子进入到更为广大的读者视野。随之而来这本书的 ...

Title: 儒林外史_百度应用
Snippet: 简介： 《儒林外史》是由清代吴敬梓创作的长篇小说（也称章回小说），是我国古代讽刺  文学的典范。全书共五十六回（按：也有人认为最后一回非吴敬梓所作），约四十万 ...


?. 《宿命》是谁的作品

Title: 《宿命》——（绮迷参赛独白作品） - 路绮欧- 原创歌曲,歌词- 5SING中国 ...
Snippet: 2013年6月24日 ... 《宿命》——（绮迷参赛独白作品）路绮欧最新力作，现在正式上线，完全正版。5SING  将提供免费试听MP3下载，《 ... 是谁寂寞了我的夜/楚洪利老师深.

Title: 湖南高考满分作文是“化身为猪”的《宿命》
Snippet: 2013年6月25日 ... 为了确保高考公平，考生信息都是严格保密的，所以就算是阅卷老师也无法得知这些  优秀作文的作者是谁。胡岭老师为晨报读者一一点评了这8篇 ...

Title: 意外和小小失望的同行——评东野圭吾《宿命》 (评论: 宿命)
Snippet: 2009年5月17日 ... 《宿命》被东野圭吾自称为是创作生涯中最重要的作品，我想这“重要”并非是指《宿命》  是东野圭吾最满意的作品，而应是指东野圭吾的写作转型就是始 ...

Title: 《宿命》作者：兰思思（完结） - 读书时间- 91baby - 妈妈网
Snippet: 1、夜幕降临，华灯齐放。孟行舟迈入酒店豪华的包厢，他喝酒、聊天，开一些合时宜的  玩笑，和所有人一样纵情欢乐。等时间差不多了，他为每个客人的 ...

Title: 《宿命》- 原创首发- 《小说阅读网》
Snippet: 2007年9月6日 ... 少妇怀孕了，但孩子的父亲是谁却引起了巨大的争议。 ... 作者QQ群：48144579，  48144423 《宿命》已由河南出版集团中原农民出版社出版，于2008 ...

Title: 宿命_百度百科
Snippet: 宿”是旧有、过去的意思，“命”是指动植物的生活能力。宿命，指 ... 少司命创作歌曲《  宿命》少司命创作歌曲《宿命》; 14．shelly佳演唱歌曲shelly佳演唱歌曲; 15．钟汶演唱   ...

Title: 笔书墨画诛仙图配文活动作品《宿命》 _ 诛仙-诛仙2 _多玩游戏网
Snippet: 2012年11月14日 ... 笔书墨画诛仙图配文活动作品《宿命》, 宿命不生不灭不死不休。 我在这世上活了几千  年，看尽这世上恩怨情仇，却依旧逃不了走不出这局。 他们只是 ...

Title: 日剧《分身》：生物科学的《宿命》-我爱看电视-杭州19楼
Snippet: 2012年2月28日 ... 在记忆深处，搜索到他的一部《宿命》的小说，在2004年被拍成SP，由柏原崇 ... 父母  的过去中，了解了自己的身世，同时也在深深思考，自己到底是谁， ...

Title: 前光晕制作商FPS网游新作《宿命》原画曝光- 178最新网游
Snippet: 2012年11月29日 ... 根据IGN的报道这款名为《宿命》(暂译，英文名：Destiny)的作品讲述了这样一个故事，  在700年后的地球上，一艘巨大且神秘的外星飞船“旅行者”来 ...

Title: 《宿命》_《宿命》[韩国电影]_互动百科
Snippet: 宋承宪联手权相宇演绎宿命. 《宿命》. 宋承宪、权相宇任何一个名字出现在一部电影   .... 叙述简练凶狠，情节跌宕诡异，故事架构几至匪夷所思的地步：尤其是作品核心 ...


?. 三国演义中蜀国的五虎大将里被称为常胜将军的是谁

Title: 五虎将_百度百科
Snippet: 五虎将一说最早出自《三国志平话》，指刘备麾下的五员猛将关羽、张飞、马超、黄忠、  赵云，原文 ... 历史记载(历史上华雄死于孙坚手上,温酒斩华雄是三国演义的故事...).

Title: 三国演义的题目
Snippet: 2,曹操曾把他手下一大将比作“吾之樊哙”,这位大将军是谁？(许禇) 3,曾经镇守在长沙  ,日后成为西蜀五虎上将中的一员,他是谁?(黄忠) 4,许诺刘备,虽身在曹营,但“终身不?...

Title: 五虎上将_百度百科
Snippet: 五虎将一说最早出自《三国志平话》，指刘备麾下的五员猛将关羽、张飞、马超、黄忠、   ... 的老将形象出现于各类文学艺术作品中，在小说《三国演义》中是蜀汉五虎大将之?...

Title: 【一站到底】题库及答案（20120330期）
Snippet: 12.羽毛球界被称为超级丹的运动员是谁林丹 13.明月几时有，把酒问青天出自宋朝  哪位词人之手苏轼 14.三国演义中蜀国的五虎大将里被称为常胜将军的是谁赵子龙

Title: 三国演义_百度百科
Snippet: 《三国演义》中主要人物被称为“三绝” 的分别是：“奸绝”——曹操，“智绝”—— ..... 刘备  称汉中王后，拜为右将军，封五虎大将，称帝后，拜为车骑将军，领司隶校尉，封西乡  ?...

Title: 五虎上将_互动百科
Snippet: 五虎上将，是指罗贯中的长篇小说《三国演义》中，蜀汉昭烈帝刘备麾下的五员猛将，  分别是：关羽、张飞、赵云、马超、黄忠。原文描写为“五虎大将”，后人惯称“五虎上将”?...

Title: 五虎将- 搜搜百科
Snippet: 五虎将又称五虎上将、五虎大将，最初是《三国演义》蜀汉将领关羽、张飞、马超、 ... 五  虎上将在搜搜百科中为本词条的同义词，已为您做自动跳转。 这是一个. 多义词.

Title: 《将神》每日相关问题及答案(更新到511题) - 将神- 乐都论坛- 乐都网
Snippet: 2013年3月29日 ... 演义所谓的“五虎上将”，正史中只有其中4个人被封为4大将军，那么谁不在其中之 ....   《三国演义》书中，因生平无败绩而被称为“常胜将军”的是哪一位？

Title: QQ三国资料站_网络游戏_腾讯游戏频道
Snippet: 腾讯游戏频道QQ三国资料站拥有最全的资料介绍，最实用的经验心得，最绚丽的  技能展示，最感人的玩家心情，在这里你可以获得更快更多的游戏资讯，结识更多的  ?...

Title: 常胜大将赵子龙吧_百度贴吧
Snippet: 以下是蜀国中统率高一些的将军数值（其中有些不是蜀国的名将也拿来对比一下）：   姓名统率武力智力政治 ... 赵云，字子龙，是我在< 三国演义> 中最喜欢的角色之一。


?. 抗美援朝中国人民志愿军司令员是谁

Title: 志愿军前后四任司令员都是谁?--中国共产党新闻--中国共产党新闻 ...
Snippet: 志愿军的首任司令员是功勋卓著的彭德怀。1950年10月初，中共中央作出“抗美援朝  、保家卫国”的决策。10月18日，中国人民革命军事委员会主席毛泽东发布命令， ...

Title: 中国人民志愿军_百度百科
Snippet: 中国人民志愿军是中华人民共和国在1950年10月25日，参加抗美援朝的中国方面 ...   中国人民志愿军的第一任司令员兼政委是彭德怀，邓华、洪学智、韩先楚、宋时轮为 ...

Title: 中国人民志愿军- 维基百科，自由的百科全书
Snippet: 中国人民志愿军是中华人民共和国在抗美援朝战争中的参战部队，1950年10月19 ...   中国人民志愿军的第一任司令员兼政委是彭德怀，邓华、洪学智、韩先楚、宋时轮为 ...

Title: 中国人民志愿军历任司令员、政治委员
Snippet: 中国人民志愿军历任司令员 彭德怀 1950年 10月 8日——1954年9月 4日 .... 邓华是  抗美援朝战争中志愿军首长中参加抗美援朝战争全过程的惟一的一名首长。1951 ...

Title: 抗美援朝_互动百科
Snippet: 抗美援朝-抗美援朝，是抗美援朝战争和抗美援朝运动的统称（多指抗美援朝战争），是  20世纪50年代初，中国人民支援朝鲜人民抗击美国侵略的群众性运动。1950年10 ...

Title: 志愿军前后四任司令员都是谁?-搜狐军事频道
Snippet: 2013年7月25日 ... 志愿军的首任司令员是功勋卓著的彭德怀。1950年10月初，中共中央作出“抗美援朝  、保家卫国”的决策。10月18日，中国人民革命军事委员会主席 ...

Title: 中国人民志愿军八年来抗美援朝工作报告杨勇
Snippet: 中国人民志愿军全部撤出朝鲜，标志着祖国人民给予志愿军抗美援朝这一伟大的 .....   朝鲜停战，正如金日成元帅和彭德怀司令员发布的停战命令中所说：“停战协定的签 ...

Title: 朝鲜战争- 维基百科，自由的百科全书
Snippet: 中国师可以志愿者身份出现，当然，由中国指挥员统率。 ... 中国人民解放军空军前  司令员王海在其自传《我的战斗生涯》中写道：“朝鲜战争初期，中国人民志愿军空军还   ...

Title: 人民志愿军出兵抗美援朝的原因_中国国情_中国网
Snippet: 2013年7月30日... 中央和毛泽东作出了抗美援朝、保家卫国的重大历史性决策。10月8日，毛泽东  发布命令，将东北边防军组成中国人民志愿军，任命彭德怀为司令员 ...

Title: 文章荐读·抗美援朝中的中国人民志愿军
Snippet: 中国人民志愿军是中华人民共和国在1950年10月25日，参加抗美援朝的中国方面  部队 .... 1950年10月19日，中国人民志愿军在司令员兼政治委员彭德怀率领下，跨过   ...


?. 羽毛球界被称为超级丹的运动员是谁

Title: 林丹_百度百科
Snippet: 林丹，汉族客家人，奥运冠军，有“超级丹”之美誉，中校军衔。中国男子羽毛球队单打  运动员。9岁进福建体校，12岁进入福州八一体工队，教练是何国权，18岁进入国家?...

Title: 林丹- 维基百科，自由的百科全书
Snippet: 最高世界排名第一位，因其球风凶悍、个性鲜明，被广大球迷称为「超级丹」。解放军  代表队运动员。 林丹被公认为同时代实力最强的羽毛球运动员， 甚至是羽毛球历史?...

Title: 商学院首届一站到底知识竞赛预赛题库（上），这里期待你来挑战 ...
Snippet: 13、香港特别行政区的区花是什么？ 答案：紫荆花. 14、羽毛球界被称为超级丹的  运动员是谁？ 答案：林丹. 15、目前我国内地的小型民用汽车牌照的底色是什么颜色  ？

Title: 【一站到底】题库及答案（20120330期）
Snippet: 被誉为绿色林海的大兴安岭位于我国哪个省份黑龙江 11.2008年奥运会的口号同  一个世界，下一句是什么同一个梦想 12.羽毛球界被称为超级丹的运动员是谁林丹   13.

Title: 林丹：第一次问鼎全英，超级丹叫响全世界_文化读书频道_新浪网
Snippet: 2013年5月28日 ... 从5岁开始练习羽毛球到成为世界首位拿到羽毛球全满贯的运动员，林丹的 ... 综合性  运动会，是对各省市后备力量的一次检阅，被称为“小全运会”。

Title: 爱丽达人志VOL.5林丹史无前例的羽毛球霸主-爱丽玩乐频道-爱丽时尚网
Snippet: 我是林丹，中国国家羽毛队成员。有的人叫我“羽坛一哥”，有的人叫我“超级丹”。其实  我仅仅是个有着20年球龄的羽毛球运动员，当然，我击败了无数羽毛球高手。我曾对  ?...

Title: 一站到底题库（一） - 全美视
Snippet: 2013年8月8日 ... 羽毛球界被称为超级丹的运动员是谁?林丹71. 明月几时有，把酒问青天出自宋朝哪  位词人之手?苏轼72. 三国演义中蜀国的五虎大将里被称为常胜?...

Title: 【一站到底】题库及答案（20120330期） - 一站到底网-456游戏大厅下载 ...
Snippet: 2012年5月17日 ... 羽毛球界被称为超级丹的运动员是谁 林丹 明月几时有，把酒问青天出自宋朝哪位词  人之手 苏轼 三国演义中蜀国的五虎大将里被称为常胜将军的是?...

Title: 最霸气、最逆天的题库，来试试你的知识储存量有多大！（第四期）_ ...
Snippet: 2013年4月24日 ... 黑龙江省. 11.2008年北京奥运会的中文主题口号是“同一个世界”下一句是什么？.......  .........同一个梦想. 12.羽毛球界被称为“超级丹”的运动员是谁？

Title: 林丹婚礼现场大牌云集身着军装亮相白岩松主持-中新网
Snippet: 2012年9月23日 ... 9月23日，被誉为“超级丹”的中国著名羽毛球运动员林丹和谢杏芳的大婚在 ... 羽毛球  馆是林丹2008年首夺奥运冠军的地方，所以这里也被外界称为他?...


?. 世界名画《和平鸽》的创作者是谁

Title: 2013公务员考试提分辅导:文学常识大百科（二）_中国网教育|中国网
Snippet: 2013年4月2日 ... 世界名画《和平鸽》的创作者是：毕加索. 希腊神话中海地士是： 财神. 《柳树下的梦》是  谁写的童话？安徒生. 进化论介绍到中国，并整整影响了一代人的 ...

Title: 和平鸽的创作者_创作者_ent.yxlady.com-伊秀娱乐网
Snippet: 问题：世界名画《和平鸽》的创作者是？ 答案：毕加索 “和平鸽”的雏形 1940年，希特勒  法西斯匪徒攻占了法国首都巴黎。毕加索的邻居米什老人的孙子,一个喜欢养鸽的 ...

Title: 公务员考试的444个常识题_职场法则_常识大全
Snippet: 2013年6月24日 ... 301、中央台的文艺频道是第几套节目？ 三套. 302、人生自古谁无死，留取丹心照  汗青”的作者是：文天祥. 303、中国无声影片的最高峰《神女》是谁的 ...

Title: 百科知识问答题库（文学文化知识之一）
Snippet: 世界名画《和平鸽》的创作者是：毕加索? 希腊神话中海地士是： 财神? 《柳树下的梦》  是谁写的童话？安徒生? 进化论介绍到中国，并整整影响了一代人的世界观的译著 ...

Title: 惊喜福利第四弹《伏魔者》世界问答文学篇_网易游戏频道
Snippet: 2012年11月8日 ... 雪》中“只识弯弓射大雕”的一代天骄指的是谁 成吉思汗. 51、《清明上河图》作于哪个  朝代 宋代. 52、世界名画《和平鸽》的创作者是不是毕加索 是.

Title: 育明教育：中山大学翻译硕士考研复试参考书、复试真题、复试经验_ ...
Snippet: 春风不度玉门关”是谁的诗句： B ） （ A 李白B 王之涣C 王昌龄D 白居易27. 中国诗歌   ... 世界名画《和平鸽》的创作者是： A ） （ A 毕加索B 凡高C 达芬奇31. 世界上地势 ...

Title: qq九仙答题活动答案查询大全-巴士玩网页游戏
Snippet: 2013年3月12日 ... 泼水节是我过那个少数民族的传统节日?(傣族). 91. 人体消化实物吸收营养主要靠哪  种器官?(小肠). 92. 世界名画《和平鸽》的创作者是谁?(毕加索).

Title: 知识问答比赛参考题目模版_百度文库
Snippet: 8、婚礼上放鞭炮最初是为了增加喜庆。 （ 9、张家界风景区位于我国的湖北省份。 （   10、世界名画《和平鸽》的创作者是梵高。 （ 11、校园歌曲《童年》的词曲作者是罗大佑   ...

Title: 巴勃罗·鲁伊斯·毕加索_百度百科
Snippet: 《和平鸽》. 《和平鸽》是为联合国专门创作的世界友谊作品，从此和平鸽来代表和平。   布拉克出生于塞纳河畔阿尔让特伊的一个漆工家庭，其父亲和祖父都是业余画家，.

Title: 一战到底题库01
Snippet: 敕勒歌198、校园歌曲《童年》的词曲作者是谁？ 罗大佑199、世界名画《和平鸽》的  创作者是谁？ 毕加索200、《黄河大合唱》的作曲者是谁？冼星海201、李白笔下的“飞   ...


?. 被称为书圣的古代书法家是哪个

Title: 被称为“书圣”的古代书法家是谁? _文化_历史_艺术_天涯问答
Snippet: 书圣汉代以后，经过六十余年的三国鼎立，进入晋代。书法又出现了一高峰。隶书的草  写，称为隶草，隶草是将隶体基本结构消解，只保留波磔，主要用于写奏章，所以也 ...

Title: 古代最著名的书法家是？ - 书法百科
Snippet: 2011年4月26日 ... 我国古代著名的书法家，被后人尊称为“书圣”。王羲之48岁任会稽内史，永和九年(  353)三月初三，与谢安、孙绰等42人修禊兰亭，写下了被称为“天下 ...

Title: 中国十大古代书法家
Snippet: 2010年5月30日 ... 中国古代十大书法家书法是中国特有的一种传统艺术。中国汉字是 ... 其中，王羲之  书写的《兰亭序》为书家所敬仰，被称作“天下第一行书”。王羲之对真 ...

Title: 十圣_百度百科
Snippet: 至圣孔子；亚圣孟子；诗圣杜甫；词圣苏轼；酒圣杜康；书圣王羲之；画圣吴道子；医圣  张仲景；药圣孙思邈；茶圣 .... 是中国著名的古代天文学家、数学家，被称为“算圣”。

Title: 中国最出名的书法家是谁？“书圣”是谁
Snippet: 2010年10月16日 ... 我国古代著名的书法家，被后人尊称为“书圣”。 ... 九年(353)三月初三，与谢安、孙绰  等42人修禊兰亭，写下了被称为“天下第一行书”的《兰亭集序》。

Title: 王羲之_百度百科
Snippet: 东晋书法家，字逸少，号澹斋，汉族，祖籍琅琊临沂（今属山东），后迁无锡，晚年隐居  剡县金庭，中国东晋书法家，有书圣之称。历任秘书郞、宁远将军、江州刺史。后为 ...

Title: 中国书法史- 维基百科，自由的百科全书
Snippet: 中国书法的历史和中国文字使用的历史一样悠久。自从甲骨文发明以来，中国书法的  字体经历了由篆书到隶书、草书、楷书、行书的发展阶段。每个阶段都产生了数量 ...

Title: “农行杯”首届电视书法大赛决赛综合问答题目参考
Snippet: 2 days ago ... 历史上以“心正笔正”向皇帝进谏的书法家是谁？请举出 ..... 你了解他吗，请你对他做  一个简单的介绍（东晋，他被誉为“书圣”，确立了行书的典范）。 62.

Title: 书法家_百度百科
Snippet: 书法家是擅长书法的人；具有汉字书写能力，并能能将其推至艺术高度的人。简单来  说就是以书法为主要创作的艺术家。或者说，是精通书法的人。中国历代书法家被 ...

Title: QQ御剑天涯每日答题全面攻略分享_游戏狗QQ御剑专区
Snippet: 2013年3月29日 ... 35、被称为“三苏”的北宋文学家父子中的父亲是：苏洵. 36、被称为“书圣”的古代书法  家是：王羲之. 37、北京的十三陵是哪个朝代的皇帝的陵墓：明.


?. 清朝太后身边最著名的贴身太监叫什么

Title: 【一站到底】题库及答案（20120330期） - 一站到底网-456游戏大厅下载 ...
Snippet: 2012年5月17日 ... 清朝太后身边最著名的贴身太监叫什么 李莲英 霸王别姬是京剧中有名的桥段，请问  项羽在那条河边自刎的 乌江. 我国大陆家庭电路的电压统一使用?...

Title: 慈禧太后最宠信的贴身太监是谁？ - 太监百科
Snippet: 2011年6月1日 ... 李莲英（1848年11月12日－1911年3月4日），河北河间府大城县李家村人，咸丰七年  （1857年）由郑亲王端华府送进皇宫当太监，是晚清一个著名的?...

Title: 太监_百度百科
Snippet: 公公是对太监的尊称，因为太监，特别是高级太监最接近皇帝，权势极大，最了解皇帝  的 ... 清朝太监的等级极其严格，清朝宫廷内设有管理太监的机构称“敬事房”，又谓“?...

Title: 最霸气、最逆天的题库，来试试你的知识储存量有多大！（第四期）_ ...
Snippet: 2013年4月24日 ... 清朝慈禧太后身边最著名的贴身太监叫什么名字？.................李莲英. 10.《霸王别姬》  是京剧中的有名桥段，请问项羽是在哪条河边自刎的？................

Title: 后宫·甄嬛传_百度百科
Snippet: 1．2011年大型古装清朝宫廷情感斗争电视剧2011年大型古装清朝宫廷情感斗争 .....   当太监叫到甄嬛名字时，皇帝和太后都十分诧异，因为眼前的甄嬛像极了一个人…

Title: 老宫女回忆录（真实的清朝宫女讲述过去）（摘自百度贴吧） – 【人人分享 ...
Snippet: 宫廷里有个传统的规矩，是太监全是汉人，是有头有脸的宫女，必须是旗人(应是上三  旗 .... 我们在储秀宫里伺候老太后叫当上差，可别人受不到的罪，我们都得受，谁能?...

Title: 李莲英_互动百科
Snippet: 李莲英-李莲英（1848年11月12日－1911年3月4日），河北河间府大城县李家村人，  咸丰七年（1857年）由郑亲王端华府送进皇宫当太监，是晚清一个著名的太监。

Title: 一站到底题库（一） - 全美视
Snippet: 2013年8月8日 ... 清朝太后身边最着名的贴身太监叫什么？李莲英52. 霸王别姬是京剧中有名的桥段，  请问项羽在那条河边自刎的？乌江53. 我国大陆家庭电路的电压?...

Title: 清朝皇帝不随便到妃嫔的屋里睡觉
Snippet: 2012年1月8日 ... 近来，随着电视连续剧《后宫·甄嬛传》的热播，引发出观众对后宫历史的诸多争议。  比如，秀女进宫后是否统统被尊称为“小主”？皇帝可以在妃子住处?...

Title: QQ农场IQ博士大挑战答案分享7月25日下午收集整理(7) - 花花QQ技术 ...
Snippet: 2013年7月25日 ... 320、 清朝太后身边最著名的贴身太监叫什么？李莲英. 321、霸王别姬是京剧中有名  的桥段，请问项羽在那条河边自刎的？乌江. 322、 我国大陆家庭?...


?. 是谁发明的地震仪

Title: 中国古代地震仪是谁发明的？ _历史千年
Snippet: 2010年7月23日 ... 一个有杰出贡献的科学领域是****学。他的代表作就是震烁古今的候风地动仪的发明  。不过，要声明的是，现在中国所见到的地动仪，并不是张衡发明 ...

Title: 世界上第一台地震仪是谁发明的？-历史地震-十堰市地震局
Snippet: 2012年2月1日 ... 世界上第一台地震仪是我国东汉时期杰出的自然科学家张衡发明的。他于公元132年  发明了世界上第一台观测和记录地震的仪器棗候风地动仪。

Title: 地震仪_百度百科
Snippet: 地震仪是一种监视地震的发生，记录地震相关参数的仪器。 ... 为了掌握全国地震动态  ，他经过长年研究，终于在阳嘉元年（公元132年）发明了候风地动仪这也是世界上 ...

Title: 世界上第一台地震仪是谁发明的？-宁夏回族自治区住房和城乡建设厅
Snippet: 2012年5月3日 ... 世界上第一台地震仪是在公元前132年，由中国科学家张衡发明的，叫做侯风地动仪  。 近代的地震仪在18世纪90年代才制作成，其原理与侯风地动仪 ...

Title: 防震减灾_百度百科
Snippet: 监测预报. 监测方法; 是谁发明了世界上第一台地震仪; 何谓地震预报; 预报类型; 地震  序列; 发布权限; 预报难度. 防震对策. 地震对策; 中国特色的防震减灾对策.

Title: 地動儀是誰發明的？ :: 科技文明:: 小蕃薯- 問號小博士
Snippet: 地動儀是誰發明的？ ... 歐洲人直到１８８０年才製造出地震儀（地動儀）比張衡晚了  １７００多年。（本文摘錄自e世紀十萬個為什麼？） <看科技文明篇更多為什麼> ...

Title: 之二
Snippet: 27.世界上第一台地震仪是谁发明的？简述地震仪的发展概况？ 世界上第一台地震仪  是在公元前132年，我国科学家张衡发明的，叫做侯风地动仪。 近代的地震仪在18 ...

Title: 地震常识
Snippet: 27.世界上第一台地震仪是谁发明的？简述地震仪的发展概况？ 世界上第一台地震仪  是在公元前132年，我国科学家张衡发明的，叫做侯风地动仪。 近代的地震仪在18 ...

Title: 科学松鼠会» 地震仪
Snippet: 2008年5月19日 ... 谁发明了世界上第一台地震仪（记录地震的仪器）？也许很多中国人都会回答：张衡。  的确，长期以来，我国的中小学教科书[...] 19 条评论». 回到顶部.

Title: 候风地动仪真能记录地震吗？
Snippet: 文／刘夙谁发明了世界上第一台地震仪（记录地震的仪器）？ ... 显然， 仅仅根据《后汉  书》中的简陋记载，要复原张衡的候风地动仪是根本不可能的； 今天的一切复制品， ...


?. 是谁发明的印刷术

Title: 中国古代四大发明是什么?都是谁发明的?- 百家讲坛网历史频道
Snippet: 2012年5月29日 ... 这四大发明是谁发明的呢？ 中国古代的四大发明指的是：造纸术、印刷术、指南针、  火药。 四大发明之一造纸术. 造纸术是由东汉元兴元年蔡伦发明的 ...

Title: 活字印刷术是谁发明的_历史千年
Snippet: 2010年6月4日 ... 活字印刷术是谁发明的.

Title: 活字印刷術是誰發明的？ :: 科技文明:: 小蕃薯- 問號小博士
Snippet: 畢昇是宋仁宗慶歷年間一平民百姓，靠雕刻印刷度日，然而每次看到自己雕刻的木板  ，印完書後便被丟棄，覺得非常心痛。常想：要是這些字能一個個拆下來，按文稿的 ...

Title: 国际上为何只承认是韩国发明了活字印刷术? - 中国历史- 铁血社区
Snippet: 2010年7月5日 ... 大家都知道活字印刷是一个高效率，具有推动历史意义的伟大发明！世界上 ... 首先  是1040年中国北宋年间毕升发明的胶泥活字印刷术！第二个是 ...

Title: 活字印刷术_百度百科
Snippet: 活字印刷术的发明是印刷史上一次伟大的技术革命。活字印刷的方法是先制成单字的  阳文反文字模，然后按照稿件把单字挑选出来，排列在字盘内，涂墨印刷，印完后再 ...

Title: 印刷术是谁发明的？_爱问知识人
Snippet: 毕升 -------------------------------------------------------------------------------- 毕升（？-约1051  ）北宋发明家。徽州（今安徽歙县）人。活字印刷术的发明者。 我国是 ...

Title: 谁发明了印刷术?荷兰市长写信抗议开幕式活字表演_
Snippet: 2009年11月23日 ... 施奈德斯是荷兰小城哈勒姆市的市长，身为一方父母官的他，对“印刷术是中国发明的  ”一说提出了抗议。据荷兰媒体报道，8月11日，施奈德斯给北京 ...

Title: 誰發明了印刷術?“古滕貝格”承認畢昇最早--科技--人民網
Snippet: 2008年8月20日 ... 施奈德斯是荷蘭小城哈勒姆市的市長，身為一方父母官的他，對“印刷術是中國發明的  ”一說提出了抗議。據荷蘭媒體報道，8月11日，施奈德斯給北京 ...

Title: 搜索结果_印刷术是谁发明的
Snippet: 印刷术是谁发明的？ 宋仁宗庆历元年至八年间，即公无1041－1048年间，一位名叫  毕升的普通劳动者发明了活字印刷术。 据... 来自百度知道网友:西伯利亚的狼.

Title: 活字印刷术- 维基百科，自由的百科全书
Snippet: 1850年广东佛山镇唐氏用锡活字印刷彩票和《文献通考》。 1907年，法国考古学家伯  希和在敦煌发现1300年的几百 ...


?. 谁写了著名的诗篇《将进酒》

Title: 《将进酒》_互动百科
Snippet: 写《将进酒》的时候，李白自觉怀才不遇，于是乎，要他的朋友和他一起喝酒，“与尔 ...   李白咏酒的诗篇极能表现他的个性，这类诗固然数长安放还以后所作思想内容更为 ...

Title: 将进酒_百度百科
Snippet: 百科名片. 《将进酒》. 《将进酒》原是汉乐府短箫铙歌的曲调，题目意译即“劝酒歌”。 .....   既是生逢知己，又是酒逢对手，不但“忘形到尔汝”，诗人甚而忘却是在写诗，笔下之 ...

Title: 《将进酒》---任志宏诗歌朗诵—在线播放—优酷网，视频高清在线观看
Snippet: 《将进酒》---任志宏诗歌朗诵李白《将进酒》---任志宏诗歌朗诵.

Title: 李白•嵩山•《将进酒》 中国嵩山|SongshanGeopark
Snippet: 2012年7月28日 ... 元丹丘姓林，名宗，乃大唐开元、天宝年间的著名道人，家居北嵩山脚下的颍阳 ...   怀才不遇的李白借酒消愁，挥笔写下了千古名篇乐府诗《将进酒》。

Title: 李白-诗词《将进酒》 古诗全诗赏析、作者及出处、年代！—诗词名句网
Snippet: 但全诗洋溢着豪情逸兴，取得出色的艺术成就。 李白咏酒的诗篇极能表现他的个性，  这类诗固然数长安放还以后所作思想内容更为深沉，艺术表现更为成熟。《将进酒》 ...

Title: 中国古代诗歌散文欣赏《将进酒》教案_一松柏_新浪博客
Snippet: 2013年3月18日 ... B.李白因酒而豪放、狂傲，因酒而成就了他的传世诗篇，就连他的死，也有 ... 成纪人，  唐代著名的浪漫主义诗人，后世称他为“诗仙”，又自称“酒中仙”。

Title: 李贺《将进酒》诗歌鉴赏资料论述文章解读- {TeacherCN.com}
Snippet: 李贺《将进酒》诗歌鉴赏 ... 一、多用精美名物，辞采瑰丽，且有丰富的形象暗示性，  诗歌形式富于绘画美。 此诗用大量篇幅烘托及时行乐情景，作者似乎不遗余力地搬出   ...

Title: 名篇欣赏李白的《将进酒》
Snippet: 注：李白《将进酒》原诗“朝如青丝暮成雪”大多数人都把“朝”字译为“早晨”，将“暮”译 ....   既是生逢知己，又是酒逢对手，不但“忘形到尔汝”，诗人甚而忘却是在写诗，笔下之 ...

Title: 同写《将进酒》:"诗仙"和"诗鬼"的区别——华夏文明——中国经济网
Snippet: 2007年11月28日 ... 他曾痛感生命无常，岁月不居，也挥毫写下了充满忧愁苦恨的诗篇《将进酒》，诗仙、诗  鬼，时代有别，人生有恨，借酒浇愁，一展歌喉，唱出了各有千秋 ...

Title: 《将进酒》教案5-免费语文教学资源
Snippet: 2007年7月21日 ... 他一生写下 了许多咏酒的诗篇。他的《将进酒》就是酒与愁经过心理反应后留下的  结晶。 《将进酒》是一支劝酒歌，是汉乐府曲名，大约作于李白以梁园( ...


?. 谁是中国第一任的外交部长

Title: 中国历任外交部长
Snippet: 2007年4月28日 ... 中华人民共和国国务院副总理(1954～1972)兼外交部长(1958～1972)。 ... 员兼政委  等职，参与组织领导了淮海战役等一系列重大战役。1949年任第 ...

Title: 外交部长_百度百科
Snippet: 中国首任外交部长周恩来. 外交部长是一个 ... （1）外交部和外交部长是一国受权能  当然地和经常地代表国家处理外交事务和对外进行交涉的机关和首长。按《中华人民   ...

Title: 中华人民共和国外交部- 维基百科，自由的百科全书
Snippet: 中华人民共和国外交部是中华人民共和国政府的外交机关，是中华人民共和国国务院  内主管 ... 周恩来是中央人民政府外交部和中华人民共和国外交部第一任部长。

Title: 新中国第一任外交部长——传奇元帅陈毅(组图)_中国网
Snippet: 2007年12月22日 ... 陈毅不仅是一位骁勇善战的元帅，又是新中国第一任外交部长，还是一位极富诗情的  诗人。 《陈毅传》编写组倾十年之功，综合千余当事人和知情者的 ...

Title: 傅莹- 维基百科，自由的百科全书
Snippet: 曾任中国外交部副部长，是继王海容之后中国第二位女副外长；先后担任过驻菲律宾  、驻澳大利亚、驻英国等国特命全权大使，是中国第一位少数民族女大使。现任第十 ...

Title: 惊人：中国第一任外交部长竟然是他？_正史考证_中国军事迷网
Snippet: 2013年4月24日 ... 中华人民共和国国务院(1954年9月前称政务院)总理，1958年前兼任中国第一任外交  部长，历任中共中央副主席、中央军委副主席、中国人民政治协商 ...

Title: 《中华文摘》文章：王光亚中国多边外交第一人
Snippet: 2007年12月13日 ... 在李肇星担任外交部长的最后几年中，有关下一任外交部长人选的传闻四起。 ... 当  王光亚这批新中国培养的第一批外交苗子正在天南地北干革命时， ...

Title: 李保东任外交部副部长 主管军控事务等(图/简历)--组织人事-人民网
Snippet: 20 hours ago ... （图片来源：外交部网站） 据外交部网站消息，前中国常驻联合国代表李保东，已出任  排名第三的外交部 ... 考证：到底谁是第一个喊“毛主席万岁”的人？

Title: 中華民國外交部- 维基百科，自由的百科全书
Snippet: 外交部為中華民國有關涉外事務之最高主理機構。《中華民國憲法》第一百四十一條  明定：「中華民國之外交，應本獨立自主之精神，平等互惠之原則，敦睦邦交，尊重條約   ...

Title: 历届中国外交部部长，了解一下他们– 【人人分享-人人网】
Snippet: 新中国外交部长 第一任外交部长：周恩来(1949-1958) 周恩来(Zhou Enlai 1898.3.5-  1976.1.8) 周恩来，中华人民共和国国务院(1954年9月前称政务院)总理，1958年前 ...


?. 谁在香港电影《花样年华》中饰演男主角

Title: 梁朝偉- 维基百科，自由的百科全书
Snippet: 同時也是獲得香港電影金像獎和臺灣電影金馬獎最佳男主角最多的人，至今共得 ...   中與已故港星張國榮合作，飾演一名同性戀者。2000年，他終憑《花樣年華》榮獲法國   ...

Title: 梁朝伟_百度百科
Snippet: 迄今为止，他是获得香港电影金像奖和台湾电影金马奖最佳男主角最多的人， .... 于  苦海，却不自觉的在他的内敛中沉陷，看《花样年华》中的梁朝伟，沉醉般的罪，爱上《   ...

Title: 藏在你心中的男神女神是谁？ - 人民聊吧
Snippet: 夏日炎炎亦或是暴雨滂沱，身体疲惫亦或是心情压抑，都木有关系——休息休息，让  我们搜罗一下各种男神女神来养养眼吧~~O(∩_∩)O还记得那些 ...

Title: 张曼玉_百度百科
Snippet: 张曼玉（Maggie Cheung，1964.9.20-），国家一级演员，联合国儿童基金会中国大使  ，爱丁堡大学荣誉博士。张曼玉是获得演员荣誉最多的华语电影演员，个人荣誉涵盖   ...

Title: 王家卫为梁朝伟操刀《花样年华》音乐录音带
Snippet: 东方网消息：王家卫导演将《花样年华》的音乐合约分为两部份：一是由滚石唱片负责   ... 的花样年华》EP专辑，由男主角梁朝伟亲自演唱4首歌曲，延续电影的主轴精神。

Title: 无间道I_百度百科
Snippet: ... 的作品而风靡国际影坛，在2000年更凭王家卫执导的《花样年华》连夺戛纳电影节  及香港电影金像奖的最佳男主角。他在《辣手神探》中饰演亦正亦邪的卧底备受好评。

Title: 最新精选专题梁朝伟——华语影坛演技“最出色”的巨星
Snippet: 2012年8月2日 ... 梁朝伟（Tony leung chiu wai，1962年6月27日—），祖籍广东台山，生于香港，国家  一级演员。他是一位在亚洲地区和整个华人社会具有影响力的电影 ...

Title: 九龙朝答题器_九龙朝科举考试答题器_太平洋游戏网
Snippet: 2013年5月14日 ... 初唐四杰”中以边塞诗闻名于世的是? 杨炯. 《九龙朝》游戏的剧情中，貂蝉的个性是?   人格分裂. “横看成岭侧成峰”的下一句是? 远近高低各不同.

Title: 《道道道》里的十方和尚是何人呢？ - 倩女幽魂百科
Snippet: 2011年8月12日 ... 当如今你看着这位已经晋级为影帝级的戏精，在电影中总是以深沉、老练、沧桑的  形象中出现 .... 第7届香港电影金紫荆奖最佳男主角提名《花样年华》

Title: 搜狐娱乐——《绿茶》 主演：姜文赵薇
Snippet: 多次获得香港电影金像奖最佳摄影和戛纳电影节技术大奖的香港摄影师杜可风， ...   翌年在影片《芙蓉镇》中饰演秦书田，于1987年获第十届电影百花奖最佳男演员奖。


?. 宋朝的开国皇帝是谁

Title: 宋朝皇帝列表宋朝历代皇帝宋朝开国皇帝是谁- 雷霆军事网
Snippet: 2013年4月3日 ... 导读：宋朝——后周恭帝继位后，命赵匡胤为归德节度使，归德军驻扎在宋州今河南  商丘。次年，赵匡胤在陈桥发动兵变即位，因其发迹在宋州，故国号 ...

Title: 宋朝皇帝列表_宋朝历代皇帝顺序表简介_宋朝开国最后一个皇帝是谁 ...
Snippet: 宋朝皇帝列表：大宋王朝几个皇帝？宋朝第一个皇帝是谁？宋朝末代皇帝是谁，宋朝  最后一个皇帝怎么死的？宋朝皇帝年号是？趣历史专题围绕以上一系列问题为您 ...

Title: 宋朝皇帝列表宋朝历代皇帝宋朝开国皇帝是谁(2)- 雷霆军事网
Snippet: 2013年4月3日 ... 导读：宋朝——后周恭帝继位后，命赵匡胤为归德节度使，归德军驻扎在宋州今河南  商丘。次年，赵匡胤在陈桥发动兵变即位，因其发迹在宋州，故国号 ...

Title: 宋朝开国皇帝是谁- 历史的世界- 合肥论坛
Snippet: 宋太祖赵匡胤（927－976），中国北宋王朝的建立者，汉族，涿州（今河北）人。出身  军人家庭，赵弘殷次子。948年，投后汉枢密使郭威幕下，屡立战功。951年，郭威称帝  ， ...

Title: 宋朝的皇帝列表
Snippet: 宋朝皇帝列表宋朝历代皇帝宋朝开国皇帝是谁字号. 导读：宋朝——后周恭帝继位后，  命赵匡胤为归德节度使，归德军驻扎在宋州(今河南商丘)。次年，赵匡胤在陈桥发动 ...

Title: 南宋开国皇帝赵构的功过是非_宋代历史简介_中国历代皇帝列表皇后 ...
Snippet: 2013年4月16日 ... 当然了不是说皇帝里就没有长寿的，在这些皇帝中，南宋开国皇帝宋高宗赵构就活  到了81岁。宋高宗 ... 陈桥兵变是谁发动的， 陈桥兵变是怎么回事.

Title: 赵匡胤简介宋朝开国皇帝赵匡胤[图]_赵匡胤,赵匡胤简介_商都文化
Snippet: 2011年2月18日 ... 赵匡胤简介宋朝开国皇帝赵匡胤[图],赵匡胤简介宋朝开国皇帝赵匡胤宋太祖赵匡胤  宋太祖赵匡胤（927年－976年11月14日），中国 ... 王小石是谁?

Title: 宋朝开国皇帝赵匡胤是个好演员—王伟的博客—强国博客—人民网
Snippet: 宋朝开国皇帝赵匡胤是个好演员. 原创于: 2011-03-09 21:55:02. 标签：. “黄袍加身”  是谁导演的？ - 王伟- 王伟. “黄袍加身”这个成语来自北宋开国皇帝赵匡胤，说的是 ...

Title: 赵匡胤_百度百科
Snippet: 宋太祖赵匡胤（927年3月21日－976年11月14日），中国大宋王朝的建立者，汉族，  出生于洛阳夹马营，祖籍河北涿州。出身军人家庭，赵弘殷次子。948年，投后汉枢密   ...

Title: 宋太祖：从流浪汉到开国皇帝(9)_宋朝皇帝_中国历史故事网
Snippet: 2013年4月8日 ... 由于五代频繁的战乱，宋王朝开国之初，人口稀少，小县只有200户人家， ... 这件事，  说明宋太祖对贪官处罚严厉，不论是谁，只要贪赃，概不轻饶。


?. 唐朝的第一个皇帝是谁

Title: 唐朝皇帝列表:唐朝皇帝唐朝最后一个皇帝是谁？- 雷霆军事网
Snippet: 2013年2月27日 ... 新闻摘要：唐朝皇帝列表——唐朝历代皇帝简介：唐朝有几个皇帝？唐朝第一个皇帝  是谁？唐朝最后一个皇帝是谁？唐朝由盛转衰的转折点是？

Title: 北宋皇帝列表北宋最后一个皇帝是谁_北宋,北宋皇帝_商都文化
Snippet: 2011年7月2日 ... 北宋皇帝列表北宋最后一个皇帝是谁,北宋疆域北宋都城地图• 中国历代皇帝 ... 北宋  皇帝则是指由宋太祖赵匡胤开始，直至宋钦宗赵桓，共九个皇帝。

Title: 唐朝的第一个皇帝是谁？ - 战争历史- 止戈论坛止戈网_中国国防第一 ...
Snippet: 唐朝的第一个皇帝是谁？ 唐朝, 皇帝. 单选投票, 共有3 人参与投票. 1. 李渊. 2.   李世民. 3. 李建成. 4. 李元霸. 5. 程咬金. 您所在的用户组没有投票权限 ...

Title: 唐朝皇帝
Snippet: 本词条主要列出唐高祖李渊建立的唐朝君主，及追尊未实际统治的君主，其中包括武  曌（武则天）建立的武周。此外，还包括唐代时期地方建立的政权君主。...

Title: 唐朝皇帝列表_唐朝历代皇帝列表顺序表简介_唐朝开国末代皇帝是谁 ...
Snippet: 唐朝历代皇帝简介：唐朝有几个皇帝？唐朝第一个皇帝是谁？唐朝最后一个皇帝是谁  ？唐朝由盛转衰的转折点是？安史之乱是如何发生的？唐朝在历史上最著名的 ...

Title: 西晋的开国皇帝是谁， 西晋的第一个皇帝_晋朝历史故事_中国历代 ...
Snippet: 西晋的开国皇帝是谁， 西晋的第一个皇帝. 时间：2013-4-10 15:31:22 作者：皇帝列表  编辑 来源：皇帝列表网 查看：21 评论：0. 内容摘要：西晋的第一个皇帝虽然是司马 ...

Title: 宋朝几个皇帝？各自的国号是？
Snippet: 他是中国的第一个皇帝，是中国历史上一位极富传奇色彩的划时代的人物。 ..... 三唐  太宗 唐太宗，名李世民。是唐朝的第二个皇帝。生于599年，病死于649年，死时50 ...

Title: 罗马帝国皇帝列表罗马帝国第一个皇帝是谁?- 趣历史
Snippet: 2013年3月18日 ... 【第一个皇帝】盖乌斯·屋大维（公元前27年-14年）. 【最后的皇帝】狄奥多西一世统一  罗马帝国的最后统治者。罗慕路·奥古斯都路斯西罗马帝国的最后 ...

Title: 中国第一个皇帝是谁- 中国历史百科
Snippet: 手机用户(****nown)： 中国第一个皇帝是谁. 标签：中国历史百科16个答案 2013-05-  03 21:51:02 来自：android客户端 ...

Title: 清朝历代皇帝列表清朝入关后第一个皇帝简介- 趣历史
Snippet: 2013年5月13日 ... 顺治帝福临，是清朝入关后的第一位皇帝。他是皇太极的第九子，生于崇德三年（  1638）崇德八年八月二ten+six日在沈阳即位，改元顺治，在位18年。


?. 卧龙先生是谁

Title: “卧龙先生”是谁?_谜语频道_中国娱乐网
Snippet: 2008年1月30日 ... 上一篇谜语：“我住长江头，君住长江尾。日日思君不见君，共饮长江水。此水几时休，  此恨何时已。只愿君心似我心，定不负相思意。”这是谁的词？

Title: 穿越之卧龙先生- 东方玄幻小说- 一千零一页
Snippet: 卧龙先生究竟是谁？ 五虎上将命运将会如何？ 现代科技和古代玄法将会碰撞出怎样  的火花？ 前途是光明还是黑暗？ 一切尽在最好看的穿越小说 穿越之卧龙先生.

Title: 卧龙先生"是谁?
Snippet: 4 days ago ... 诸葛亮（181年—234年），字孔明，号卧龙先生，琅琊郡阳都人（今山东省沂水县）。  三国时期蜀国大臣，着名的政－－治家、军事家、外交家。 回答者： ...

Title: 三顾茅庐_百度百科
Snippet: 玄德揖而问曰：“二公谁是卧龙先生？”长须者曰：“公何人？欲寻卧龙何干？”玄德曰：“  某乃刘备也。欲访先生，求济世安民之术。”长须者曰：“我等非卧龙，皆卧龙之友也： ...

Title: 卧龙先生：与著名人物画家薛丕显在一起_卧龙先生_新浪博客
Snippet: 2013年4月7日 ... 卧龙先生：与著名人物画家薛丕显在一起_卧龙先生_新浪博客,卧龙先生, ... 新疆维稳  反恐的第一力量应当是谁 · 豪哥 · 查看更多>>. 谁看过这篇博文.

Title: 正文第十八章卧龙先生，一世黄泉-逐浪小说阅读网
Snippet: 2013年7月24日 ... 前辈，那人是谁啊？在哪里？”李天昊好奇的问道。 “哦，他就在这个村子里！他叫  卧龙先生！”老头随意的对李天昊说道.“什么卧龙先生？”李天昊闻言 ...

Title: 卧龙先生和周建龙哪个更好点_鬼吹灯吧_百度贴吧
Snippet: 2013年2月17日 ... 收藏. 回复. shine习惯158. 经推荐，最近看了下小说，深感有趣，想下一套有声小说  听。问问大家卧龙先生评书版和周建龙的版本哪个更好点。 (+1).

Title: 卧龙先生的空间- 中国诗歌网
Snippet: 卧龙先生的个人空间 http://bbs.yzs.com/?15436 [收藏] [复制] [分享] [RSS] · 空间  首页 · 动态 · 记录 · 日志 · 相册 ... 到底是谁在胡搅蛮缠？！）相信大家都能看明白。

Title: 诸葛亮- 维基百科，自由的百科全书
Snippet: 诸葛亮青年時耕讀於荊州襄陽城郊，地方上稱其卧龙、伏龙。受劉備邀請出仕，隨劉備  轉戰四方，建立蜀漢政權，官封丞相。223年劉備死後，劉禪繼位為蜀漢皇帝， ...

Title: 将神答题器-将神官网-心动游戏
Snippet: 冷艳锯”是三国时期一名大将的武器，这件武器还有一个名字是什么？ 答案：青龙  偃月刀. 12.赤壁之战时，是谁向曹操提出连环锁船，将曹军的舰船用铁索连环在一起


?. 射雕英雄传的作者是谁

Title: 射雕英雄传_百度百科
Snippet: 《射雕英雄传》是金庸武侠小说创作的代表作品，也是金庸拥有读者最多的作品，本 ...   他没有哄洪七公教他武功，是黄蓉哄他；他可以只顾悲痛，不去想是谁在桃花岛杀 ...

Title: 谁是射雕英雄传里的英雄？ (评论: 射雕英雄传（全四册）)
Snippet: 谁是射雕英雄传里的英雄？ 2008-03-03 22:01:37 来自: 赵行德 · 射雕英雄传（全四  册）的评论 4 star rating 4. 射雕英雄传这部小说的背景是南宋金国双方都怀有国仇家   ...

Title: 《射雕英雄传》[小说]_互动百科
Snippet: 《射雕英雄传》[小说]-《射雕英雄传》是金庸中期武侠小说创作的代表作品，也是金庸 ...   在小说里，小说中的人物，一般都是作者理想化的人物，尤其是作品中的主角，像 ...

Title: 从《射雕英雄传》看家长教育：母亲成就性格_教育频道_凤凰网
Snippet: 2013年7月26日... 一直都没有下笔，今天在网上留言看到了一篇文章，以《射雕英雄传》为基础，阐述  家庭教育理念，一下就吸引住了我，不知道作者是谁，但我有英雄 ...

Title: 金庸- 《射雕英雄传》中人物分析
Snippet: 《射雕英雄传》中人物分析作者：杭州慈明亮《射雕英雄传》是金庸最受欢迎的书之一。  在20世纪优秀小说100部和 ... 射雕英雄是谁？郭靖还是成吉思汗？ 射雕英雄传 ...

Title: 穿越之射雕英雄传
Snippet: 2013年1月2日 ... 武侠小说穿越之射雕英雄传由作家黑暗骑长创作,起点小说提供穿越之射雕 ... 忽然，  有一个光头佬提着两米的斧子走了出来说道：“我管你是谁，死 ...

Title: 射雕英雄传名字来源个人意见+部分参考(评论: 射雕英雄传（全四册）)
Snippet: 2012年11月9日 ... 射雕英雄传（全四册）的评论 3 star rating 3 .... 《射雕》全书都没有写念慈的父母是谁,  但是由于铁心兄的收养,她总算是有了父爱,所以更怀念其母的爱。

Title: 射雕时代的爱情作者：叶轻舟(Artsdome)
Snippet: 我是谁？不过是人海之一栗米，尘世一粒沙而已，偶而做点文字游戏换酒钱。但在  这里我 ... 今天连对《射雕英雄传》里红极一时的主题歌耳熟能详者都不多了。 从客观  上 ...

Title: 他叫完颜康(评论: 射雕英雄传（全四册）)
Snippet: 2013年7月8日 ... 既然是国家利益，手段毒辣阴险一些也就说得过去了，正所谓大义面前，不拘小节。  不过这要看是谁家的“大义”。 纵观《射雕英雄传》，完颜康十之八九 ...

Title: 射雕英雄传- 搜搜百科
Snippet: 《射雕英雄传》2008版由李国立执导，胡歌、林依晨、袁弘、 ... 而这个英雄是通过整合  华夏文明的几个部分的精华才成长起来的。这个文明的再造的表征就是郭靖的成长 ...


?. 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 

Title: 【一站到底】题库及答案（20120330期）
Snippet: 1.由龚琳娜演唱的，被称为神曲的歌是忐忑 2.已使用有小哥一称，与周杰伦共同演唱  千里之外的男歌手是谁费玉清 3.麻婆豆腐是我国哪个菜系的传统名菜川菜 4.

Title: QQ农场iq博士大挑战答案最新版- 测智网答题器
Snippet: 一张20元人民币破损了2分之1，到银行可以兑换到多少钱？10元. 183. 遗传学始祖:   孟德尔. 184. 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁？

Title: 【一站到底】题库及答案（20120330期）
Snippet: 2013年6月19日 ... 由龚琳娜演唱的，被称为神曲的歌是 忐忑 已使用有小哥一称，与周杰伦共同演唱  千里之外的男歌手是谁 费玉清 麻婆豆腐是我国哪个菜系的传统名菜

Title: 一站到底题库（一） - 全美视
Snippet: 2013年8月8日 ... 由龚琳娜演唱的，被称为神曲的歌是？忐忑44. 已使用有小哥一称，与周杰伦共同  演唱千里之外的男歌手是谁？费玉清 45. 麻婆豆腐是我国哪个菜系?...

Title: 八月四日qq农场iq博士大挑战答案最强集合大全
Snippet: 2013年8月4日 ... 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁？费玉清. 185. 以帆为  造型的悉尼标志性建筑物是什么？悉尼歌剧院. 186. 印象派音乐?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 由龚琳娜演唱的，被称为神曲的歌是. 忐忑. 已使用有小哥一称，与周杰伦共同演唱  千里之外的男歌手是谁. 费玉清. 麻婆豆腐是我国哪个菜系的传统名?...

Title: 最霸气、最逆天的题库，来试试你的知识储存量有多大！（第四期）_ ...
Snippet: 2013年4月24日 ... 目前已经上映的《哈利波特》系列电影已经到了第几部？............第七部. 7. .... 有“小哥”  一称，与周杰伦共同演唱《千里之外》的男歌手是谁？................

Title: 一战到底题库01
Snippet: 日本498、最高级的爬行动物是？ 鳄鱼499、已使用有小哥一称，与周杰伦共同演唱  千里之外的男歌手是谁？费玉清500、麻婆豆腐是我国哪个菜系的传统名菜？川菜.

Title: QQ农场IQ博士大挑战答案分享7月25日下午收集整理(7) - 花花QQ技术 ...
Snippet: 2013年7月25日 ... 狮子座312、被称为神曲的歌是？忐忑. 313、已使用有小哥一称，与周杰伦共同演唱  千里之外的男歌手是谁？费玉清. 314 、麻婆豆腐是我国哪个菜系?...

Title: 周杰伦_百度百科
Snippet: 周杰伦（Jay Chou)，亚洲最具影响力和传奇性的偶像天王巨星，华语新四大天王之 ...   位在武道馆开唱的华人男歌手，演唱会上演唱的中国风歌曲《千里之外》《霍元甲》?...


?. 纸是谁发明的

Title: 造纸术是谁发明的?_百度知道
Snippet: 造纸术是谁发明的长期以来，人们一直认为是东汉宦官蔡伦发明的。 ... 因此，后来的  一些中、外著作，都据以尊东汉时代的蔡伦是纸的发明者，把他向 ...

Title: 造纸术是谁发明的？是蔡伦吗？_历史千年
Snippet: 2010年2月2日 ... 造纸术是谁发明的？是蔡伦吗？ ... 确切的说蔡侯纸是蔡伦发明的,早在西汉时期就  已经有纸的存在了,蔡伦只是加以改良 ...

Title: 到底是谁发明了造纸术
Snippet: 到底是谁发明了造纸术. ... 纸”墨官司. 长期以来，人们认为纸是蔡伦（？-公元121年）  发明的，主要是根据《后汉书》的记载。 《后汉书·蔡伦传》说：“自古书契多编以竹简， ...

Title: 纸是谁发明的？_小白牙_新浪博客
Snippet: 2012年5月22日 ... 牙牙问到抽纸是谁发明的，之后又跟着问了一堆，先回答“纸是谁发明的”。 纸是谁  发明的？ 蔡伦. 资料一：. 造纸术简介. 纸是用以书写、印刷、绘画或 ...

Title: 纸是谁发明的- 希希公主的博客
Snippet: 2012年12月8日 ... 女儿今晚手拿一张纸，问，妈妈，纸是谁发明的，本以为她随口问的，忽然大脑一空白  ，就随口反问了她，你说呢。没成想她脱口而出，蔡伦。 老师教的， ...

Title: 造纸术_百度百科
Snippet: 造纸术是中国四大发明之一，人类文明史上的一项杰出的发明创造。 ... 纸是汉族劳动  人民长期经验的积累和智慧的结晶，纸是用以书写、印刷、绘画或包装等的片状 ...

Title: 橡皮是谁发明的？ - 知乎
Snippet: 2 个回答; 三棱刀是中国发明的吗？ 3 个回答; 筷子是什么时候被发明的？ 2 个回答;   为什么似乎没有多少人能够用完一块完整的橡皮擦呢？ 7 个回答; 蔡伦发明纸是 ...

Title: 造纸术最早是谁发明的？ - pmmcn - pmmcn - 和讯博客
Snippet: 2013年7月3日 ... 造纸术是谁发明的长期以来，人们一直认为是东汉宦官蔡伦发明的。 ... 因此，后来的  一些中、外著作，都据以尊东汉时代的蔡伦是纸的发明者，把他向 ...

Title: 关于卫生巾是谁发明的两种说法_父母会育儿网
Snippet: 女性每个月的“好朋友”经期都会来报道，而女性每个月也会有一个“好帮手”那就是  卫生巾。那么女性朋友们知道卫生巾是谁发明的呢？下面关于卫生巾是谁发明的有两   ...

Title: 孔明灯是谁发明的- 已解决- 搜搜问问
Snippet: 孔明灯，我听大人们讲，之所以叫孔明灯，一来是做出来后的天灯有点像孔明先生所  戴的帽子，二来我们的民间是这样说出孔明灯的由来的。 ... 孔明灯是谁发明的. 5.


?. 中国参加奥运会次数最多的运动员是谁

Title: 历史上参加奥运会次数最多的运动员是谁？ 博闻网
Snippet: 丁佐兄弟是历史上参加奥运会次数最多的运动员，共参加了八届奥运会的马术比赛。  阅读文本，博闻网将为您介绍历史上参加奥运会最多的选手和马术比赛的知识。

Title: 谁是参加奥运会次数最多的运动员？_中国青年网
Snippet: 2012年8月9日 ... 加拿大马术选手伊恩·米勒今年已经65岁了，他是第一个参加过十届奥运会的传奇  运动员。

Title: 参加过奥运会次数最多的中国选手是谁？ 奥运中国奥运网站
Snippet: 2008年4月9日 ... 1984年开始，24岁的王义夫先后参加了1988年，1992年，1996年，2000年2004年  共六次奥运会，获得2金，2银，1铜。是中国目前奥运会历史上参赛 ...

Title: 洛克王国国际奥林匹克答案合集- 中国玩家网- Cwan.Com
Snippet: 2013年6月21日 ... 参加奥运会次数最多的中国运动员是？王义夫 洛克王国国际奥林匹克 ... 中国印. 5.  在夏季奥运会中获得金牌最多的运动员是谁？菲尔普斯 洛克王国 ...

Title: 洛克王国国际奥林匹克答题答案大全_洛克王国_一游网网页游戏门户
Snippet: 2013年6月21日 ... 奥运会的五环标志象征着什么？答案：五大洲团结。 参加奥运会次数最多的中国  运动员是？答案：王义夫。 国际奥委会的第一位中国委员是谁？

Title: 格里菲斯酒店管理学院和瑞士酒店管理学院哪个比较好_管理_天涯问答
Snippet: 中国男子第一个获得奥运会金牌的运动员是谁？ 许海峰。 中国女子第一个获得  奥运会 .... 32、参加奥运会次数最多的中国运动员是？（ B ） A 伏明霞B 王义夫 33、  连续 ...

Title: 洛克王国国际奥林匹克日攻略_洛克王国_一游网网页游戏门户
Snippet: 2013年6月19日 ... 奥运会的五环标志象征着什么？答案：五大洲团结。 参加奥运会次数最多的中国  运动员是？答案：王义夫。 国际奥委会的第一位中国委员是谁？

Title: 奥运知识竞赛题选—教育资源—金寨南溪中学
Snippet: 13、第一个荣获奥运会奖牌的旧中国运动员是谁？（ A ） A 杨传广 B 刘雪松 14、古代   ... 32、参加奥运会次数最多的中国运动员是？（ B ） A 伏明霞 B 王义夫 33、连续 ...

Title: 洛克王国国际奥林匹克日活动攻略_洛克王国_一游网网页游戏门户
Snippet: 2013年6月21日 ... 奥运会的五环标志象征着什么？答案：五大洲团结。 参加奥运会次数最多的中国  运动员是？答案：王义夫。 国际奥委会的第一位中国委员是谁？

Title: 洛克王国国际奥林匹克答题答案大全_86wan网页游戏门户
Snippet: 2013年6月21日 ... 奥运会的五环标志象征着什么？答案：五大洲团结。 参加奥运会次数最多的中国  运动员是？答案：王义夫。 国际奥委会的第一位中国委员是谁？


?. 作家老舍的原名叫什么

Title: 作家老舍的原名叫什么？ -智力测试
Snippet: 2012年1月22日 ... 更多关于“作家老舍的原名叫什么？ -智力测试”的文章>>. 把作家老舍的原名叫什么  ？收藏起来以后再看！作家老舍的原名叫什么？所属栏目：〖智力 ...

Title: 搜索结果_老舍的原名
Snippet: 老舍原名叫什么？ 老舍原名舒庆春，中国小说家、剧作家。生于1899年，卒于1966年  ，满族，祖籍北京。字舍予。老舍是他... 来自百度知道网友:偶班胡女侠. 老舍的原名.

Title: 安徽公务员常识判断百科知识精选（四十六） - 安徽公务员考试网
Snippet: 2013年6月3日 ... 4、作家老舍的原名叫什么：舒庆春. 5、人民英雄纪念碑上的雕塑作品《五四运动》是：  浮雕. 6、京剧《群英会》中“周瑜”的行当是：小生. 7、“安哥拉兔”由何 ...

Title: 公务员考试的444个常识题_职场法则_常识大全
Snippet: 2013年6月24日 ... 184、用齿轮传动不能改变运动的方向，对吗？ 不对. 185、世界三大男高音中的多明  戈和卡雷拉斯都是西班牙人. 186、作家老舍的原名叫什么？

Title: 第十期
Snippet: 186、作家老舍的原名叫什么？ (低级题) 舒庆春 187、人民英雄纪念碑上的雕塑作品  《五四运动》是: (低级题) 浮雕 188、京剧《群英会》中“周瑜”的行当是(高级题) 1: 小生

Title: 河南公务员考试网：常识知识点储备（三十五）_河南公务员考试网
Snippet: 2013年4月25日 ... 作家老舍的原名叫什么? (低级题) 舒庆春 6.人民英雄纪念碑上的雕塑作品《五四运动  》是哪种艺术？(低级题) 答：浮雕 7.京剧《群英会》中“周瑜”的行当 ...

Title: 2013重庆单招综合测试模拟题测试题（六） - 历年试题- 重庆单招网 ...
Snippet: 2013年3月16日 ... 14、作家老舍的原名叫什么？【舒庆春】. 15、用齿轮传动不能改变运动的方向，对吗  ？【不对】. 16、参加第一届古代奥运会的国家有：【A】. A.三个B.十 ...

Title: 国家公务员常识判断知识复习（6）_国家公务员考试网
Snippet: 2013年1月17日 ... 茶叶的含水量高于8%会导致什么后果：发生霉变7.“世界三大男高音”中的多明戈和卡  雷拉斯都是：西班牙人8.作家老舍的原名叫什么：舒庆春9.

Title: 综合常识题-一战到底题库- 一站到底网-456游戏大厅下载-一战到底
Snippet: 2012年10月17日 ... 32、作家老舍的原名叫什么？ 舒庆春 33、人民英雄纪念碑上的雕塑作品《五四运动》  属于哪类雕塑？ 浮雕 34、京剧《群英会》中“周瑜”的行当是什么？

Title: 大唐豪侠科举试题整理篇
Snippet: 2009年3月13日 ... 是谁的诗句：苏轼男性荷尔蒙会抑制什么生长：头发古代重阳节有饮酒的 ... 成语“  一衣带水”的意思是：形容一水之隔作家老舍的原名叫什么：舒庆春 ...


?. 谁粉碎了四人帮

Title: 粉碎“四人帮”的策划、实施过程----天涯在线书库
Snippet: 25年前的10月6日，中共中央一举粉碎“四人帮”，历史从此掀开崭新的一页20多年  过去了，有关这场斗争的方方面面，已有大量的文章和作品陆续问世。但参与这场  斗争 ...

Title: 谁促成了华叶联手粉碎四人帮_蜀人三隻眼_新浪博客
Snippet: 2012年4月15日 ... 36年前粉碎“四人帮”的行动，华国锋和叶剑英的联手起到了决定性作用。但在1976年  之前，两人并不熟悉。那么，华国锋和叶剑英是怎样走到一起的呢 ...

Title: 1976年谁促成华国锋和叶剑英联手粉碎四人帮_历史频道_凤凰网
Snippet: 2010年10月18日 ... 1976年7月28日凌晨，唐山大地震。当天下午，叶选基来探望熊向晖，并且告诉他，叶  帅已经见过了华国锋。

Title: 惊心动魄1976：抓捕“四人帮”高层决策纪实--天水在线
Snippet: 2007年8月23日 ... 在粉碎“四人帮”的伟大斗争中，谁是首倡者？对于这个重大而关键的问题，目前主要  有两种说法，一说是叶剑英，一说是华国锋。那么，哪种说法可靠 ...

Title: 揭秘历史真相——到底是谁粉碎了四人帮？- 雷霆军事网
Snippet: 2012年9月10日 ... 导读：年，以华国锋为首的中共中央一举粉碎了“四人帮”，虽然这一事件已经过去年。  这一重大行动一挽狂澜，结束了“文革”十年的历程，从此将我党， ...

Title: 粉碎“四人帮”后 谁引燃康生问题的“第一把火”？--文史--人民网
Snippet: 2011年4月26日 ... 1976年10月6日，中央一举粉碎“四人帮”。此后的一段时间内，全国全党上下虽然都  在深揭猛批“四人帮”，但康生问题一直没有被揭露，这就给彻底 ...

Title: 粉碎"四人帮"后谁力主不杀江青?—伴儿.blog的博客—强国博客—人民网
Snippet: 2013年6月18日 ... 林彪反革命集团被粉碎后，陈云在中央有关会议上就自己所知进行了积极的批判揭发  。然而“四人帮”一伙仍在全国各地兴风作浪。１９７２年６月，中央 ...

Title: [原创]粉碎“四人帮”的关键性人物是谁？向他致敬– 铁血网
Snippet: 2012年4月9日 ... 最近看了纪录片毛泽东的晚年，对文化大革命事件感到遗憾。毛主席逝世后，四人帮  指使宣传毛主席遗嘱：按既定方针办，仍然很疯狂的打击邓小平。

Title: 到底谁在粉碎“四人帮”过程中起了决定性作用？ - 搜狐社区
Snippet: 2013年5月2日 ... 近读炎黄春秋所刊《叶剑英、汪东兴密谈处置四人帮》一文，生出一大疑问：到底谁是  抓捕“四人帮”的首倡者？

Title: 有关粉碎“四人帮”的史实和疑点:谁先提的方案_中国国情_中国网
Snippet: 2013年5月27日 ... 关于粉碎“四人帮”的历史事件，学界有不少著述和文章。由于缺乏档案文献，研究者  主要依据回忆和口述资料来梳理和讨论。亲历者和当事人的记忆多 ...


?. 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 

Title: 哪个版本的东方不败才是你心目中永恒的经典_小骆驼_新浪博客
Snippet: 2013年2月28日 ... 台湾偶像剧女星陈乔恩转战电影，拍完《大闹天宫》及《倾城之泪》后，今年 ... 央视版《  笑傲江湖》中的东方不败由茅威涛扮演，一看这造型，脸上妖娆的?...

Title: 雷人剧《笑傲江湖》收视飘红到底谁愿消费它_大楚网_腾讯网
Snippet: 2013年2月28日 ... 2003年,金庸在接受媒体采访时,曾经批评徐克的《笑傲江湖》和《笑傲江湖之东方不败  》两部电影对原著《笑傲江湖》的改编。金庸说:“我不喜欢他,他不懂?...

Title: 东方不败_百度百科
Snippet: 东方不败，金庸武侠小说《笑傲江湖》中的日月神教教主，武功天下第一。 ... 一身绝世  武功，自此阴阳颠倒，变得不男不女，宠幸男宠杨莲亭，放任他弄权，自己不理教务，  ?...

Title: 【一站到底】题库及答案（20120330期）
Snippet: 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的林青霞 15.陈凯歌导演的  无极又被网友戏称一个什么引发的血案馒头 16.2009年红极一时的歌曲，七月份的?...

Title: 《一战到底》题库_百度文库
Snippet: 维生素A 曾饰演许文强，小马哥，赌神，等景点角色的香港男影星是谁？周润发徐克  电影笑傲江湖东方不败的东方不败由哪位女演员扮演的？林青霞陈凯歌导演的无极  ?...

Title: QQ农场iq博士大挑战答案最新版- 测智网答题器
Snippet: 新郎最早指什么: 新科进士. 176. 徐克电影笑傲江湖东方不败的东方不败由哪位女  演员扮演的？林青霞. 177. 寻寻觅觅冷冷清清凄凄惨惨戚戚是出自宋朝那位女词人  之?...

Title: 东方不败_互动百科
Snippet: 东方不败，文学大师金庸小说《笑傲江湖》中的日月神教的教主，武功当世第一。 .... 败  . 林青霞，台湾著名电影女演员，祖籍山东莱阳，1954年11月3日出生于台北三重。

Title: 连性别都能改变， 还有什么不能改编……_东方卫报官方网站
Snippet: 2013年2月28日 ... 在最新版的《笑傲江湖》中，于正破天荒的干脆将东方不败写成了一个女人，并且与男  主角令狐冲有一段虐恋……令许多观众大为讶异。不过这样将?...

Title: 谁是谁的笑傲，谁在谁的江湖- 昆山视窗
Snippet: 2013年2月28日 ... 倒是电影版《笑傲江湖》和衍生版《东方不败》，反而更多了几分“笑傲”的 .... 央视版《笑  傲江湖》中的东方不败由茅威涛扮演，一看这造型，脸上妖娆的?...

Title: 外国人论徐克的《笑傲江湖三部曲》（转贴资料） – 《笑傲江湖》影评
Snippet: 2008年4月5日 ... 我第一次有幸在大屏幕上看《笑傲江湖》是在纽约举行的徐克电影回顾展上。我几乎  错过这部电影，因为我琢磨着大多数的影迷认为《东方不败》比它?...


?. 中国空军第一任总司令是谁

Title: 揭秘：叶挺是如何当上红军首任总司令？_军事_环球网
Snippet: 2013年6月17日 ... 那么共产党领导的军队首任总司令是谁?即红军首任 ... 毛泽东同志曾当面称叶挺是“  共产党的第一任总司令”，并对他说“人民军队的战史要从你写起”。

Title: 名将叶挺：红军首任总司令- 刘继兴的日志- 网易博客
Snippet: 2013年6月8日 ... 那么共产党领导的军队首任总司令是谁？即红军首任总司令是谁？估计大多数人会  回答是朱德。 其实这个问题的正确答案是叶挺。 早在第一次国共 ...

Title: 中華民國空軍- 维基百科，自由的百科全书
Snippet: 中華民國空軍是中華民國國軍的空中武裝力量，以國防部空軍司令部為首，下轄作戰  、防空砲兵、教育訓練 .... 其餘56架F-CK-1A/B將於第一波升級結束之後再行評估。

Title: 周至柔_百度百科
Snippet: 中国国民党中央执行委员(1945年5月-). （国民政府）军事委员会委员长侍从室第一处  主任(1945年). 空军总司令部（第一任）总司令(1946年5月31日-1952年3月).

Title: 揭秘：叶挺是如何当上红军首任总司令？_历史长河_战略网
Snippet: 2013年6月19日 ... 那么共产党领导的军队首任总司令是谁?即红军首任总司令是谁?估计大多数人会  回答是朱德。 其实这个问题的正确答案是叶挺。 早在第一次国共 ...

Title: 叶挺司令简介-共产党的第一任总司令-虎贲军事网
Snippet: 2013年6月18日 ... 那末共产党带领的部队首任总司令是谁?即赤军首任总司令是谁?估量大大都人会  答复是朱德。 其实这个问题的精确谜底是叶挺。 早在第一次国共 ...

Title: 名將葉挺：紅軍首任總司令_書味頻道_新浪網-北美
Snippet: 2013年6月8日 ... 那麼共産黨領導的軍隊首任總司令是誰？即紅軍首任總司令是誰？估計大多數人會  回答是朱德。 其實這個問題的正確答案是葉挺。 早在第一次國共 ...

Title: 揭秘：叶挺是如何当上红军首任总司令？ - 轶闻秘档- 历史频道- 华声在线
Snippet: 2013年6月13日 ... 那么共产党领导的军队首任总司令是谁?即红军首任总司令是谁?估计大多数人会  回答是朱德。 其实这个问题的正确答案是叶挺。 早在第一次国共 ...

Title: 毛泽东为何称叶挺是“共产党第一任总司令”_历史_环球网
Snippet: 2013年3月20日 ... 毛泽东曾当面称叶挺将军是“共产党的第一任总司令，人民军队的战史要 ... 队集中  改编事宜，自己飞抵香港，通过宋庆龄的“保卫中国同盟”秘书处，向 ...

Title: 中國評論新聞：中國空軍推手張靜愚夏瀛洲致最高敬意
Snippet: 2013年4月19日 ... 中原大學校長張光正說，父親這張照片家族沒有收藏，反倒是空軍官校保留 ... 署副處  長，空軍官校第一任校長，空軍總司令，司令部航空署中將署長， ...


?. 中华人民共和国是哪位民主人士提出的

Title: 刘晓波- 维基百科，自由的百科全书
Snippet: 同日起草《致中国大学生的公开信》，提出七条如何开展学生运动的建议，与海外民运  团体“中国民主团结联盟”（简称“民联”）主席胡平共十位中国留学生、学者联署发表并   ...

Title: 美国之音中文网-中国
Snippet: 中国处罚了6家婴幼儿配方奶粉公司，其中多数属于外资，罚款总额为1.08亿美元。这  是中国最大的反垄断罚单之一。这些公司是由于价格操纵和反竞争做法而受到处罚 ...

Title: 中国_百度百科
Snippet: 中国疆域内的各个民族统称为中华民族，亦称中国人或华人。龙是中华民族的象征。   中国是四大文明古国之一，有着悠久的历史，距今约5000年前，以中原地区为中心 ...

Title: 魏京生- 维基百科，自由的百科全书
Snippet: 他写道：“中国人民要现代化，首先必须实行民主，把中国的社会制度现代化。民主并   ... 据白宫当天发布的新闻稿，这五位是吴弘达、魏京生、热比娅、龚小夏和傅希秋。

Title: 人民网—中国政协新闻
Snippet: 而政协作为一个组织长期存在，其理论根据则主要是以毛泽东为代表的中国共产党人  提出的同党外民主人士长期合作的思想。它的直接的实践准备是中国共产党领导的 ...

Title: 如果美式自由民主不该是中国未来的梦想– 【人人分享-人人网】
Snippet: 西方的民主是水平式的，人人投票平等、定期选举、政党竞争轮替。中国的垂直民主，  领导可以自上而下发出指示，人民也可自下而上提出倡议，视情况而在领导与民意 ...

Title: 哪位部长1957年评毛泽东“好大喜功急功近利”_历史频道_凤凰网
Snippet: 2013年7月21日 ... 关于工业文明的忧虑和对当代政治博弈的恐惧，中国人是不存在的。 ... 期间张奚若对  毛泽东提出了评价:“好大喜功，急功近利，鄙视既往，迷信将来”。

Title: 《求是》：中国共产党为什么得到人民的拥护？-新华时政-新华网
Snippet: 2013年7月1日 ... 编者按：今年是中国共产党成立92周年。92年来，我们党始终得到人民的 ... 也唤醒了  中国社会各界人士，使人们看清了国民党政府反民主的本质，而 ...

Title: 《中国近现代史纲要》试题– 【人人分享-人人网】
Snippet: 8、以下哪个人物是中国近代睁眼看世界的第一人A. A林则徐B魏源C郑观应D ... 的  主要出发点是C. A.反对贪官污吏B.发展资本主义C.挽救中华民族的危亡D.争取民主.

Title: 高放：中国梦最迫切的是要实现民主梦--理论--人民网
Snippet: 2013年7月11日 ... 人民论坛记者：习近平总书记提出了“中国梦”，有学者总结说包含七个梦，即复兴梦、  民主梦、 ... 在这几个梦中，中国人民最迫切要求实现的是民主梦。


?. 《二泉映月》的作者原名是什么 

Title: 二泉映月_百度百科
Snippet: 就这样，《二泉映月》流传了下来，而它也被看作是作是作者一生呕心沥血的艺术结晶  。 ... 的《第二交响曲》和弦乐合奏《二泉映月》（改编），当时，小泽征尔并没有说什么。

Title: 《二泉映月》[乐曲]_互动百科
Snippet: 《二泉映月》[乐曲]-二泉映月是中国民间二胡音乐家华彦钧（阿炳）的代表作。这首乐曲  自始至终流露的是一位饱尝人间辛酸和痛苦的盲艺人的思绪情感，作品展示了独特 ...

Title: 《二泉映月》赏析- 国学百科
Snippet: 2013年3月15日 ... 就这样，《二泉映月》流传了下来，而它也被看作是作是作者一生 ... 姆斯的《第二交响  曲》和弦乐合奏《二泉映月》（改编），当时，小泽征尔并没有说什么。

Title: 《阿炳在1950》导学案-免费语文教学资源
Snippet: 2011年3月18日 ... 认识阿炳及名作《二泉映月》，了解课文内容，领略中心思想。 [学习重点] ... 4、举例  说明作者是怎样多角度，多层面来展现阿炳的命运的？ 5、仔细 ...

Title: 《二泉映月》 - 搜搜百科
Snippet: 就这样，《二泉映月》流传了下来，而它也被看作是作是作者一生呕心沥血的艺术结晶  。 ... 的《第二交响曲》和弦乐合奏《二泉映月》（改编），当时，小泽征尔并没有说什么。

Title: 《二泉映月》教学实录_课堂实录
Snippet: 2013年2月13日 ... 师：《二泉映月》是我们今天要学习的一篇课文，也是一首曲子的名字。《二胡映月》这  首曲子的作者是谁？ 生：阿炳。 师：出示阿炳的图片。简介阿炳。

Title: 《二泉映月》（二胡独奏--- 赵寒阳）
Snippet: 2010年7月19日 ... 阿炳，原名华彦钧，生于清光绪十九年(1893年-1950年)，江苏无锡人。 .... 就这样，《  二泉映月》流传了下来，而它也被看作是作是作者一生呕心沥血的 ...

Title: 二胡曲《二泉映月》：泉清月冷含蓄凄凉_国学- 国学网-一元一国学网
Snippet: 阿炳，原名华彦钧，生于清光绪十九年(1893年~1950年)，江苏无锡人。后双目失明，  人称“瞎子阿炳”。 ... 给听者留下铭心刻骨的深刻印象。《二泉映月》的“神”是什么呢？

Title: 是描绘二泉映月的吗？
Snippet: 我国民间音乐家华彦均（瞎子阿炳，1893～1950年）创作的二胡曲《二泉映月》，以其  优美而深沉的旋律，拨动了无数中外听众的心弦。《二泉映月》不仅是一首优秀的中国   ...

Title: 孙双金：《二泉映月》课堂实录
Snippet: 2008年12月17日 ... 作者：孙双金日期2013-01-18 16:57:06 阅读： ... 生：我的喇叭在心里，因为我们这节  课学的是《二泉映月》，是首著名的乐曲，要用心去领会。 师：你们 ...


?. 自由落体定律由谁发现

Title: 自由落体_互动百科
Snippet: 目录. [隐藏 ]. 1 特点: 2 公式: 3 自由落体定律: 4 发现者: 5 研究: 6 推理: 7 实验验证: 8   例子: 9 同名歌曲: 10 相关条目: 11 参考资料 ...

Title: 自由落体定律_百度百科
Snippet: 自由落体的发现与产生传闻1590年，伽利略在比萨斜塔上做了“两个铁球同时着地”的  实验， ... 自由落体的发现与产生: 自由落体定律的创立: 自由落体推导动能公式 ...

Title: 自由落體定律的發現
Snippet: 自由落體定律的發現(§15-4 加速度). 【資料來源：數理化通俗演義梁衡/著】. 第十六回.   恍當一聲千年聖人被推翻. 寥寥數語滿座論敵皆無言. －自由落體定律的發現.

Title: 比萨斜塔- 维基百科，自由的百科全书
Snippet: ... 比萨斜塔上做自由落体实验，将两个重量不同的球体从相同的高度同时扔下，结果  两个铅球同时落地，由此发现了自由落体定律， ...

Title: 新歌榜-百度音乐排行榜_百度音乐-中国第一音乐门户
Snippet: 38 山风一样自由 阿鲁阿卓. 39 城里的月光 · 现场 · 胡海泉 / 田斯斯. 40 Rock N Roll   Avril Lavigne. 41 一言难尽 · 现场 · 陈羽凡 / 陈俊豪. 42 悄悄告诉你 范玮琪.

Title: 真理还是谎言？ 张压定律评伽利略的自由落体| 非主流理论小组| 果壳 ...
Snippet: 2012年7月25日 ... 张压定律评伽利略的自由落体古希腊权威思想家亚里士多德（公元 ... 直到16世纪，  伽利略（公元1564—1642年）才发现了这一理论在逻辑上的矛盾。

Title: 《斜塔上的实验》教学实录--免费语文教学资料
Snippet: 2011年1月28日 ... 生（主持人）:比萨斜塔是意大利著名的建筑，就在这座举世闻名的斜塔上一名年轻人  做了一个实验，由此发现了自由落体定律。这个年轻人是谁呢？

Title: 三国时代OL文策天下答题题库_游戏狗新闻
Snippet: 2012年10月22日 ... 自由落体定律由谁发现? 答案：伽利略. 41.仙人掌上的刺实际是植物的() 答案：叶子的  退化产物. 42.时尚更替的速度越快,说明人们的思想() 答案：越 ...

Title: 牛顿的贡献及其对中国的影响
Snippet: 在牛顿所处的时代，哥白尼提出了日心说，开普勒从第谷的观测资料中总结了经验的  行星运动三定律，伽利略又给出了力、加速度等概念并发现了惯性定律和自由落体 ...

Title: 科学方法漫话-2:伽利略的科研方法——从自由落体定律的发现谈起
Snippet: 2010年10月8日 ... 科学方法漫话-2:伽利略的科研方法——从自由落体定律的发现谈起 精选 ... 关于自由  落体，当时风行的是亚里士多德的错误观点：落体以匀速下落， ...


?. 最早发现x射线的科学家是谁

Title: 放射性元素_百度百科
Snippet: 直到1895年德国物理学家伦琴发现X射线以后，许多科学家都兴致勃勃地去研究这类  新 ..... 放射性元素（确切地说应为放射性核素）最早应用的领域是医学和钟表工业。

Title: X射线- 维基百科，自由的百科全书
Snippet: X光（英语：X-ray），又被称为艾克斯射线、伦琴射线或X射线，是一种波长范围 ... 他还  发现，当将未曝光的相片底片靠近这种管时，一些部分被感光了，但是他没有继续 ...

Title: 科学家发现中国目前最早的竹子化石记录—论文—科学网
Snippet: 2013年7月17日 ... 之前，中国唯一可靠的竹子化石记录是发现于云南寻甸县上新统地层（年龄在2.48–  3.40百 ... 德国科学家实现让光停止60秒 · 美拟研发新X射线激光器.

Title: 物理学史- 维基百科，自由的百科全书
Snippet: 它是最早形成的自然科学之一，如果把天文学包括在内则有可能是名副其实历史最  悠久的自然科学。最早的物理学著作是古希腊科学家亚里士多德的《物理學》。

Title: 輻射是誰發現的？
Snippet: 最早在1895年11月，德國物理學教授侖琴(Roentgen) 發現一種眼睛看不見但能穿透  物質的射線。因不知其名，故稱為X射線，一般俗稱X光。隨後不久發現X射線會使 ...

Title: 特斯拉与爱迪生，一个鲜为人知的人物
Snippet: 他的最著名的发明是“特斯拉线圈”，这是一种分布参数高频共振变压器，可以获得上  百万伏的高频电压。他是最早制作成功荧光灯和发现和研究X射线的科学家之一，并   ...

Title: 日晷的作用是什么？计时器
Snippet: 最早发现x射线的科学家是： 伦琴 软饮料的共同特征是： 不含酒精 市场上出售的香蕉  有正常的种子吗？ 没有 黄种人很多有眼褶（双眼皮），为什么？防止风沙吹入眼中

Title: 2012年公务员考试—最全的行测常识(1) – 【人人分享-人人网】
Snippet: 绿藻－苔藓自由落体定律由谁发现？ ... 珍妮纺纱机的发明者是：哈格里夫斯最早  发现x射线的科学家是： 伦琴软饮料的共同特征是： 不含酒精市场上出售的香蕉有  正常 ...

Title: 南非卡鲁盆地发现世界上最早两种不同物种共居一室的化石证据- 神秘 ...
Snippet: 2013年6月25日 ... 这是科学家发现地球上最早的两种不同物种同居一室现象。 ... 独特的X射线束可确保  实现无损探测，除了发现这种动物骨骼保存的完整性，科学家们 ...

Title: 科学家发现迄今轨道周期最短双星：仅2.4小时_男儿不展风云志，空负 ...
Snippet: 2013年3月22日 ... 据国外媒体报道，欧洲空间局（ESA)的XMM-牛顿望远镜观测到一颗恒星和一颗黑洞  组成的双星系统，它们的轨道周期非常短，达到了惊人的2.4小时， ...


?. 微软亚洲研究院的院长是谁

Title: 微软亚洲研究院_百度百科
Snippet: 微软亚洲研究院是微软公司在海外开设的第二家基础科研机构，也是亚洲地区唯一 ...   洪小文博士现任微软亚洲研究院院长，负责研究院在互联网搜索、数据挖掘、语音 ...

Title: 专访微软亚洲研究院院长洪小文：创业企业可与巨头共赢- 访谈- 创业邦
Snippet: 《创业邦》杂志记者对微软亚洲研究院院长洪小文进行了专访。 《创业邦》：微软亚洲  研究院 ... 从研发的角度来说，研究院是一个战略性的部门。因为一家公司最后成功与   ...

Title: 张亚勤_百度百科
Snippet: 张亚勤博士是通讯和软件领域世界级的科学家。他1999年加入微软亚洲研究院担任  首席科学家，在2000-2004任微软亚洲研究院院长， 2004年他晋升微软公司资深副 ...

Title: “梦想绽放，共创未来”
Snippet: 微软亚洲研究院前任院长、微软全球资深副总裁沈向洋博士在致辞时表. 示，“早在  １９９８年洪小文 .... 洪小文：研究院是一个很特殊的研究单位。它属于微软公. 司，微软   ...

Title: 张铮_百度百科
Snippet: ... 演员、北京电影制片厂导演。原名张淑珍，1916年出生，原籍江苏丹阳人；第四个是  微软亚洲研究院副院长兼首席研究员的男博士；第五个是陕西师范大学副教授。

Title: 立即下载
Snippet: 讨会”上，微软亚洲研究院院长洪小文博士向敦煌研究院捐赠了. 专门为敦煌莫高窟量   .... 微软亚洲研究院与敦煌研究院的合作是微软亚洲研究院文. 化遗产数字化研究 ...

Title: 创新如同烹小鲜——微软亚洲研究院院长洪小文新年致辞_微软亚洲 ...
Snippet: 2013年2月8日 ... 可以说，微软是一位非常有耐心的厨师，例如在2012年微软亚洲研究院于 ... 就是  基于微软亚洲研究院及微软雷德蒙研究院长达数年、多个研究领域的 ...

Title: 微软亚洲研究院中文介绍画册
Snippet: 不仅是为了明天，而且是明天的明天。 洪小文博士. 微软亚洲研究院院长. 我们一直为  从微软亚洲研究院诞. 生出来的新技术而激动不已。他. 们总能提出新奇的想法，并 ...

Title: 科学网—拜访微软亚洲研究院- 盛弘强的博文
Snippet: 2011年11月4日... 我拜访了微软亚洲研究院副院长、资深总监张益肇博士(Dr. Eric Chang)（http://  baike.baidu.com/view/3326138.htm)。初次相见于微软大楼的小型 ...

Title: 飘浮在时空中的大脑——跟张峥副院长读科学(六)_微软亚洲研究院_ ...
Snippet: 2010年2月22日 ... 飘浮在时空中的大脑——跟张峥副院长读科学(六)_微软亚洲研究院_新浪 ... 只是  那个波兹曼大脑不会是我的，也许是你的，但更可能是谁的都不是。


?. 中国共产党这个名称是谁最早提出的

Title: 揭秘：是谁致信毛泽东最早提出建立"中国共产党"_时政频道_新华网
Snippet: 2011年4月20日 ... 揭秘：是谁致信毛泽东最早提出建立"中国共产党" ... 并告诉记者，党史界的共识是：“  共产党”这一名称是由我党早期卓越领导人之一的蔡和森最先提出 ...

Title: 揭秘：是谁致信毛泽东最早提出建立"中国共产党"--中国政协新闻网 ...
Snippet: 2011年4月20日 ... 揭秘：是谁致信毛泽东最早提出建立"中国共产党" ... 并告诉记者，党史界的共识是：“  共产党”这一名称是由我党早期卓越领导人之一的蔡和森最先提出 ...

Title: 最先提出“中国共产党”名称的人是谁？-花季乐园-中学生频道- 未来网 ...
Snippet: 2012年4月17日 ... 蔡和森是中国共产党重要的创始人之一，在建党前夕提出了建立中国共产党的主张和  “中国共产党”的名称，在党的创建过程中最早提出了比较全面 ...

Title: 是谁最早提出建立“中国共产党”？_党史钩沉_党建直通车_三农直通车
Snippet: 2011年12月13日 ... 共产党”这一名称是由中共早期卓越领导人之一的蔡和森最先提出的，这可以从《新民   ... 近年来党史研究披露：最早提出建立“中国共产党”的是蔡和森。

Title: 中国共产党_百度百科
Snippet: 中国共产党是中国工人阶级的先锋队，同时是中国人民和中华民族的先锋队，是 ....   最早提出“中国共产党”这一名称的是蔡和森。1920年8月13日和9月16日，正在留法 ...

Title: 谁最早提出"马克思主义中国化"科学命题的--中国共产党新闻--中国 ...
Snippet: 马克思主义中国化”，在中共党内领导人中到底是谁最早提出这一科学命题的？很多  文章众口一词地认为是毛泽东在1938年10月党的六届六中全会上作《抗日民族战争   ...

Title: “中国共产党”这个名字是怎么确定的__战略网
Snippet: 2012年12月7日 ... 中国共产党”这个名字是怎么确定的,的是共产党中国. ... 但最早提出“中国共产党”这  一名称的还是蔡和森。1920年8月13日和9月16日，正在留法 ...

Title: 蔡和森：他最早叫出“共产党”？_新闻中心_新浪网
Snippet: 2011年6月21日 ... 近年来党史研究披露：最早提出建立“中国共产党”的是蔡和森。 ... 共产党”这一名称是  由中共早期卓越领导人之一的蔡和森最先提出的，这可以从《新民 ...

Title: 谁是中国共产党内最早提出“收回香港”主张和构想的人？ _中国国情_ ...
Snippet: 谁是中国共产党内最早提出“收回香港”主张和构想的人？ 中国国情-中国网guoqing.  china.com.cn 时间： 2012-09-28 发表评论>>. 在1925年6月至1926年10月开展的 ...

Title: 到底谁是中国共产党和中共军队的缔造者和创始人？_红学研究_新浪 ...
Snippet: 2013年4月17日 ... 难道这个祸国殃民的 "思想"，真是中共离不开的"护身符"，含在贾宝玉 ... 陈独秀是被  污水泼遍全身的伟大革命家、“五四”新文化运动的旗手、中国最早 ...


?. 我国军史上第一位女将军是谁

Title: 揭秘：中共建国后文艺界第一位真正女将军是谁_历史频道_凤凰网
Snippet: 2013年6月5日 ... 1988年解放军开始恢复军衔制，当时我国共有五位女将军获得将军军衔，她们是（左  起）国防科工委科学技术委员会副主任聂力、第一军医大学副校长 ...

Title: 中国历史上第一位女将军：妇好_商朝历史人物_历史春秋网
Snippet: 2010年7月16日 ... 中国历史上第一位女将军：妇好. ... 妇好是商朝国王武丁的王妃，是位杰出的女政治家  与军事家。由于妇好有很好的文化修养，商王武丁经常令她主持 ...

Title: 李贞：开国第一位女将军
Snippet: 2007年10月9日 ... 女将军是人民解放军中的一道独特风景，本书带领读者走近女将军们鲜为 ... 李贞，并  握住她的手说：“祝贺你，李贞同志，你是新中国第一位女将军。”.

Title: 女神联盟答题器,女神联盟每日答题最全最完整的答案
Snippet: 2013年7月8日 ... 我国古代项羽"破釜沉舟"战胜秦军是在哪次战役? 巨鹿之战. 下列哪次古代著名战役   ... 我国人民解放军第一位女将军是: 李贞. 我国现存最早的兵书是:

Title: 中国历史上第一个女相是谁？历史上有几个女相- 雷霆军事网
Snippet: 2013年5月13日... 加入收藏夹 -放到桌面 · 雷霆军事网首页军史军史揭秘>历史博览> 正文 ... 唐代的  上官婉儿是中国古代第一位也是唯一的女宰相。其实，上官婉儿有 ...

Title: 中国古代十位巾帼英雄
Snippet: 中国历史上第一位有据可查的女英雄。商朝的武功以商高宗武丁时代 ... 木兰悯其  父老，便替父从征。木兰初为戎卒，以功为小校，后晋升为将军，守燕山南麓之曲逆。

Title: 妇好_百度百科
Snippet: 是中国历史上有名的军事家，是个善于打仗的女将军，殷墟的甲骨文记录了她 ... 是  我国有历史记录的最早的女政治家和军事家，中国历史上第一位有据可查的女英雄。

Title: 巾帼英雄：新中国“第一位女将军”李贞-米尔网
Snippet: 2013年4月28日 ... 在1955年新中国举行的中国人民解放军第一次授衔仪式上，有一位巾帼英雄被授予  少将军衔她就是李贞作为新中国历史上的第一位女将军，李贞的 ...

Title: 新中国“第一位女将军”遗物只有这些_中国国情_中国网
Snippet: 2013年4月16日 ... 作为新中国历史上的第一位女将军，李贞的英名传扬中外，她的丈夫、1955年被授予  上将军衔的甘泗淇同样威名远扬，人们称他俩为“神州夫妻两将 ...

Title: 中国体育界第一位女将军是谁？（组图）_王南方_新浪博客
Snippet: 2012年8月3日 ... 陈招娣给武警部队的排球爱好者签名 中国体育界第一位女将军是谁？（组图） 曹慧英  、 ... 第一祼模到底是谁？ 潜入大陆当特工的台军第一美女少将.


?. 现代奥林匹克运动创始人是谁

Title: 古代奥运会的创始人是谁?古代奥运会的创始人是伊菲图斯现代奥运会 ...
Snippet: 古代奥运会的创始人是伊菲图斯现代奥运会的创始人是顾拜旦.

Title: 现代奥运会的创始人是谁？_首都儿科研究所
Snippet: 现代奥运会的创始人是谁？ 现代奥运会的创始人是法国人顾拜旦，他被誉为“  奥林匹克之父”。1892年，他发表了“复兴奥林匹克”的演说，正式提出复兴奥运会的  具体 ...

Title: 古代奥运会创始人是谁？_百度知道
Snippet: 古代奥运会创始人是谁？古代奥运会的创始人是伊菲图斯。 1.现代奥林匹克运动  创始人是顾拜旦。 2.国际奥委会1961年成立。 3.第一任维凯拉 ...

Title: 奥林匹克运动会_百度百科
Snippet: 伯罗奔尼撒的统治者伊菲图斯（古代奥运会的创始人）努力使宗教与体育竞技合为  一体。他不仅革新 .... 1896年4月6日至4月15日，希腊雅典举办了第一届现代奥运会  。

Title: 奥运知识100问
Snippet: 2008年4月2日 ... 现代奥林匹克运动创始人是顾拜旦，曾任国际奥委会第二任主席。 6、著名的《体育颂  》作者是谁？ 顾拜旦在第五届奥运会上发表了他的著名诗作《体育 ...

Title: 大唐无双奥运会答题答案大全大唐无双奥运答题器_5433游戏攻略
Snippet: 2012年8月9日 ... 首次使用高清晰度电视转播奥运会是哪一年C: 1992年巴塞罗那. X 现代奥林匹克  运动创始人是谁? A: 顾拜旦. 夏季奥运会每几年举办一届B: 4年.

Title: 奥运知识问答1-15
Snippet: 1、奥林匹克运动的发祥地在何处？ 奥林匹亚为奥林匹克运动的发祥地，位于希腊  首都雅典西南约300公里的地方。 2、古代奥运会创始人是谁？ 古代奥运会的创始人  是 ...

Title: 奥运知识问答活动:古代奥运会创始人是谁？ - 新航海之路- 游久社区 ...
Snippet: 2012年8月3日 ... 活动赛事」] 奥运知识问答活动:古代奥运会创始人是谁？ [复制链接] ... 现代奥林匹克  运动创始人是顾拜旦。 2.国际奥委会1961年成立。 3.第一任维凯 ...

Title: 奥林匹克运动会- 维基百科，自由的百科全书
Snippet: [编辑]. 奧林匹克會旗. 现代奥运会的创始人，皮埃尔·德·顾拜旦男爵. 15世纪的文艺  复兴使得许多欧洲人开始重新赞扬奥林匹克精神。

Title: 您现在的位置是
Snippet: 5、现代奥林匹克创始人是谁？ 现代奥林匹克运动创始人是顾拜旦，曾任国际奥委会  第二任主席。 6、著名的《体育颂》作者是谁？ 顾拜旦在第五届奥运会上发表了他的 ...


?. 文学名著《西游记》是谁的作品

Title: 西游记- 维基百科，自由的百科全书
Snippet: 本文介紹的是中国古典文学名著《西遊記》。關於西游记的 ... 赞同此说。 2013年，孙  晓发表长微博推测《西游记》是民间几代草根文人共同编撰而成，属于集体民族作品。

Title: 《西游记》[中国古典小说]_互动百科
Snippet: 开放分类：书籍出版出版业出版物名著图书小说影视文化文学电视电视剧艺术. 图片;   讨论; 知识 .... 因此，有人重新提出《西游记》是丘处机所著，或是其弟子、传人所著。

Title: 名著- 维基百科，自由的百科全书
Snippet: 《紅樓夢》的作者是誰長久以來存在爭議，大多數人認為前八十回作者是清代的曹雪芹  ，後四十回作者是高 ... 《西遊記》是一部中国古典神魔小说，為中國“四大名著”之一。

Title: 西游记_百度百科
Snippet: 添加义项 这是一个多义词，请在下列义项中选择浏览（共13个义项）. 1． ... 《西游记》  是中国古典四大名著之一，作者相传是吴承恩，成书于16世纪明朝中叶，主要描写了   ...

Title: 《西游记》究竟是部什么书？作者的写作意图是什么？(第三稿) - 人民聊吧
Snippet: ... 《西游记》这部文学名著问世几百年了，它究竟是部什么书？ ... 。《西游记》这部作品  实际写得是“孙悟空的故事”，孙悟空才是《西游记》的主人公，唐僧 ...

Title: 语文资源网名著阅读专区-->西游记(吴承恩)
Snippet: 语文资源网文学名著在线阅读. 西游记. 作者：吴承恩. 《西游记》却以丰富瑰奇的想象  描写了师徒四众在迢遥的西方途上和穷山恶水冒险斗争的历程，并将所经历的千难 ...

Title: 《西游记》哲学解(修订重发) - 人民聊吧
Snippet: 作者从朴素的唯物观出发，在作品的开头运用“元会运世”之说，对大自然的发展变化  及人的产生进行了讲述， .... 。《西游记》是世界文学名著中的名著。

Title: 中国古典文学名著《西游记》
Snippet: 中国古典文学名著《西游记》. http://www.chinese.cn 2010年04月16日15:03 中国大  百科全书出版社. 字号： 大 中 小. 《西游记》是一部中国古典神魔小说，为中国“四大 ...

Title: 《西游记》究竟是部什么书？作者的写作意图是什么？ - 人民聊吧
Snippet: [收藏] [发短信] [回复] [投诉] [添加好友]. 《西游记》这部文学名著问世几百年了，作者的  写作意图是什么？至今也没有被读者搞清楚。一般读者自不必 ...

Title: 《西游记》《水浒传》《红楼梦》《三国演义》名著复习题
Snippet: 1、古典文学名著《西游记》中：孙悟空最具有反叛精神的。故事情节是：大闹天宫。 2、  八戒 ... 8、孙悟空独自去学艺，那么他的师傅是谁？教了他什么本领？ 答：师傅是： ...


?. 星际航行理论的开创者是哪位科学家

Title: 钱学森_百度百科
Snippet: 代表作品：, 工程控制论、物理力学讲义、星际航行概论、论系统工程 .... 中国科学家的  硬劲；力学、喷气推进、航天技术，钱学森展现了一位科学家在研究上的牛劲；东方 ...

Title: 百科知识问答题库
Snippet: 瑞典世界水日是哪一天？3月23日辣椒在植物分类中，是属于： 茄科科学家普利 ......   于100年生物的个体发育起点是： 幼体星际航行理论的开创者是下列哪位科学家？

Title: 虫洞_百度百科
Snippet: 由阿尔伯特·爱因斯坦提出该理论。简单地说，“虫洞”就是连接宇宙遥远区域间的时空  细管。暗物质维持着虫洞出口的敞开。虫洞可以把平行宇宙和婴儿宇宙连接起来， ...

Title: 1909年美国科学家戈达德提出液体火箭思想
Snippet: 戈达德是美国著名航天先驱者，液体火箭事业的开创者。他较早提出了液体火箭思想  ，并通过大量的理论与实验研究，率先研制成功液体推进剂火箭，为航天飞行奠定了   ...

Title: 科学网—白春礼纪念钱学森：杰出的科学家伟大的爱国者
Snippet: 2011年12月7日 ... 钱老是现代喷气推进和火箭理论开创者之一。 ... 提出了火箭助推起飞装置、火箭旅客  飞机概念、核火箭、行星际飞行理论等一系列重要的概念和理论。

Title: UFO研究19.星际飞行
Snippet: 2011年3月29日 ... 长久以来，科学家们一直在设计各种不同的航天飞船，飞船动力是设计中的最大难题  。星际航行的漫漫长途需要的能量从何而来？我们也许能通过 ...

Title: 钱学森
Snippet: 钱学森，作为为新中国成长做出无可估量贡献的老一辈科学家团体中影响最大、功勋  最为卓著的杰出代表人物，他是新中国爱国留学归国人员中最具代表性的国家建设 ...

Title: 史蒂芬·霍金- 维基百科，自由的百科全书
Snippet: 2006年，他在香港透露正與女兒合撰一套類似《哈利波特》，但主題是理論物理學而   .... 的奇點定理，提出時間及宇宙是有起點和終點，肯定了同時代其他人開創的宇宙 ...

Title: 身为科学家的教育家钱学森_科技之窗_求是理论网
Snippet: 2011年12月15日 ... 身为科学家的教育家钱学森_求是理论网源自:中国教育报作者:张瑜. ... 恩师、享誉海  内外的杰出教育家、中国航天事业的开创者和奠基人钱学森先生 ...

Title: 宇宙- 维基百科，自由的百科全书
Snippet: 对于大爆炸以后的宇宙，则可以用较成熟的理论加以描述。一种典型的 ... 公元100年  左右的东汉时代，当时科学家张衡最早提出“过此而往者，未知或知也。未知或知者，   ...


?. 中国古代哪一位曾被称为“药王”

Title: 药王_百度百科
Snippet: 孙思邈，世称孙真人，后世尊之为药王，唐京兆华原（今陕西耀县）孙家塬人，约生于隋   ... king of medicine;yao wang; 定义：: 中国民间对古代名医的尊称，或称医王。

Title: 公务员考试可能需要的720条百科知识
Snippet: 公务员考试可能需要的720条百科知识--假期有空温习下. 601. 中国的铁轨宽多少米  ?(B) 1.25米1.435米2米1.525米 602. 世界卫生组织的英文缩写是:(A) WHO WHEN   ...

Title: 2012公务员考试最全行测常识（2） – 【人人分享-人人网】
Snippet: 以下哪一位曾被称为“药王”：孙思邈国际红十字会首次大会召开于：巴黎窗户最早的   .... 吐鲁番盆地被称为中国古代第一个监狱的凌里城位于现在的： 安阳从攻占巴士底   ...

Title: 中国的铁轨宽多少米_百度文库
Snippet: 漫画《三毛流浪记》的作者是:(C) 齐白石丰子凯张乐平张大千612. "二十四史"的最后  一部是:(A) 《明史》 《清史》 《中华民国史》 《元史》 613. 中国民歌《?撞恕肥鞘粲谑裁吹   ...

Title: 大明浮生记题库篇_51wan网页游戏_网页游戏大全
Snippet: 2013年5月8日 ... 布中国古代完成“七千兵力抵敌50万大军攻取洛阳”这个成就的是谁？陈庆之飞入  寻常百姓 .... 西亚以下哪一位曾被称为“药王”？孙思邈亚洲首次举办 ...

Title: 孙思邈简介,千金方,养生著作,药王孙思邈被称为医神的故事传说及相关 ...
Snippet: 孙思邈是古时候非常著名的一位医学家，他又被人们称之为药王、医神，相传他活  到了100 ... 这位医学家非常了不得，他曾经被皇上看中，要他执掌太医院，但是他却  婉 ...

Title: 问题有很多噢,大家可以快捷键Ctrl+F查找你要找的内容
Snippet: 问题有很多噢，大家可以快捷键Ctrl+F查找你要找的内容。资料不定期更新官网地址：  . 死海的最低海拔为：：－392米. 古人对六十岁年龄的人的称呼是：花甲. 我国古代 ...

Title: 百科知识（问答形式）---爱心献血屋
Snippet: 哪些具体行政行为会被行政复议机关撤消？（多选）->主要事实不清、证据不足,适用  依据有错误,违反法定程序,超越职权或者滥用职权,具体行政行为明显不当.

Title: 问道1.47骑战天下文曲星答案（续）-问道-游久网
Snippet: 2011年12月26日 ... 1018、中国古代的四大名楼中，黄鹤楼在今天的：湖北 1019、“知天命”代指什么年纪  ？ ... 1070、以下哪一位曾被称为药王？孙思邈 1071、中华人民 ...

Title: 大话水浒会试殿试答案查询_大话水浒_网络游戏专区_腾讯游戏频道
Snippet: 马革裹尸”这一成语是形容我国古代哪一位军事家的？ 马援. 从夏朝的器皿和工具 ...   被称为“中国17世纪的工艺百科全书”的是：, 《天公开物》. 唐朝的都城是哪个地方？


?. 谁是微软的首席执行官

Title: 微软总裁_互动百科
Snippet: 威廉·亨利·盖茨(William Henry Gates III)昵称比尔·盖茨(Bill Gates) 是全球个人  计算机软件的领先供应商－微软公司的创始人、前任董事长和首席执行官,盖茨的  资产 ...

Title: 微软大中华区CEO陈永正离职专题_科技时代_新浪网
Snippet: NBA主席大卫-斯特恩宣布，正式任命微软大中华区首席执行官陈永正为NBA中国(  NBA China)的首席执行官(CEO)，10月15日正式生效。今后陈永正将全面领导NBA   ...

Title: 史蒂夫·鲍尔默_百度百科
Snippet: 史蒂夫·鲍尔默先生是全球领先的个人及商务软件开发商--微软公司的首席执行官，在  2006年亿万富翁列表中，被福布斯杂志排在24位，拥有资产136亿美元。鲍尔默 ...

Title: 微软大中华区董事长兼首席执行官梁念坚_网易财经会客厅_第70期_ ...
Snippet: 微软大中华区董事长兼首席执行官. 梁念坚希望windows8成为一个非常成功 ... 您能  否谈一下您认为Windows 8最大的对手是谁？ 梁念坚： Windows 8其实目前来讲， ...

Title: 韩正会见美国微软公司全球首席执行官史蒂夫·鲍尔默一行--新闻报道 ...
Snippet: 2013年5月23日 ... 市委书记韩正昨天上午会见了美国微软公司全球首席执行官史蒂夫·鲍尔默一行。   韩正首先祝贺微软在中国市场取得的成绩。他说，当今中国拥有数以 ...

Title: 纽约时报：微软首席执行官鲍尔默的一天(图)-搜狐IT
Snippet: 2007年2月7日 ... 【搜狐IT消息】 《纽约时报》近日公布了一组图片，介绍了微软首席执行官斯蒂夫-鲍尔  默在微软公司的工作情景：. 1、5202房是鲍尔默在微软公司的 ...

Title: 芮成钢专访微软首席执行官鲍尔默
Snippet: 史蒂夫·鲍尔默，微软公司首席执行官。1998年，鲍尔默就任微软总裁，2000年，他又  从盖茨手中接过了首席执行官的帅印。2008年盖茨宣布正式退休，微软也随即进入“   ...

Title: 韩正会见美国微软公司全球首席执行官- 搜狐视频
Snippet: 2013年5月23日 ... 韩正会见美国微软公司全球首席执行官. 标签：. 韩正 美国微软公司全球首席执行官   地方. 简介：. 韩正会见美国微软公司全球首席执行官。 来源：.

Title: 微软首席执行官史蒂夫·鲍尔默简介-科技频道-和讯网
Snippet: 2011年5月4日 ... 现年44岁的史蒂夫·鲍尔默先生是全球领先的个人及商务软件开发商微软公司的总裁  兼首席执行官。鲍尔默先生于1980年加盟微软，他是比尔·盖茨 ...

Title: Zynga首席执行官下台微软Xbox掌门马特里克接任_科技_腾讯网
Snippet: 2013年7月2日 ... Zynga首席执行官下台微软Xbox掌门马特里克接任受马特里克被任命为首席执行官  消息 ... 解读Facebook移动广告收入猛增：究竟是谁在创造价值？


?. 谁死后布了七十二疑冢

Title: 曹操为何要建72座陵墓
Snippet: 生前，他因多疑，错杀了许多人；死后，他的多疑也不例外。传说，在安葬他的那一天，  72具棺木从东南西北四个方向，同时从各个城门抬出。 这72座疑冢，哪座是真的呢 ...

Title: 考考你：曹操为什么要设“七十二疑冢”？ - 金山词霸汉语- HAPPY Life
Snippet: 曹操在丧葬上有别于历代帝王，他对自己的身后事，提出了“薄葬”。他是中国历史上第  一位提出“薄葬”的帝王。当时，曹操虽未称帝，但权力与地位不比帝王低，为什么他 ...

Title: 七十二疑冢_互动百科
Snippet: 七十二疑冢，是指传说中的曹操坟墓。传说曹操怕死后被人发掘坟墓，在漳河一带造  了七十二个疑冢。关于曹操陵墓，在历史上有很多传说。特别是“七十二疑冢”的真相，   ...

Title: 2013年广西省事业单位考试备考:公共基础知识常识部分7 -国家公务员
Snippet: 2013年6月4日 ... 谁死后布了“七十二疑冢”?曹操. 2. 《历史研究》的作者是： 汤因比. 3. 旧时妇女的发髻  上喜插一支银簪，簪子的最初作用是：防身武器. 4. “华表”又叫做表 ...

Title: 曹操“七十二疑冢”之传说、史实及意义--文化--人民网
Snippet: 2010年3月2日 ... 可以说，唐以前并无曹操“七十二疑冢说”，有之，自宋代起。 .... 元陶宗仪《辍耕录》引  宋人俞应符题曹操疑冢诗曰：“生前欺天绝汉统，死后欺人设疑冢。

Title: 综合基础知识必背考点（20） - 浙江公务员网
Snippet: 2012年12月7日 ... 谁死后布了“七十二疑冢”：曹操. 1087．《历史研究》的作者是： 汤因比. 1088．旧时  妇女的发髻上喜插一支银簪，簪子的最初作用是：防身武器. 1089．

Title: 七十二疑冢
Snippet: 传说曹操怕死后被人发掘坟墓，在漳河一带造了七十二个疑冢。 明陶宗仪 《辍耕录·疑  冢》：“ 曹操疑冢七十二，在漳河上。 宋俞应符有诗题之曰：'生前欺天絶汉统，死后欺 ...

Title: 贵州事业单位笔试备考：公共基础知识_贵州人事网_贵州人事考试信息 ...
Snippet: 2013年1月12日 ... 第一个接受人造心脏移植手术后活了112天的人，是一位： 医生. 乐器中的“圆号”又称  ：法国号. 潮汕的独特的村居是： 四点金. 谁死后布了“七十二疑冢” ...

Title: 曹操墓谜团：是否设七十二疑冢？--文史--人民网
Snippet: 2013年4月16日 ... 所谓曹操“七十二疑冢”，只不过是从南宋时代兴盛起来的民间传说。众所周知，凡是“  传说”，大致可分两类：一类是完全属实或基本接近事实，尽管事实 ...

Title: “72疑冢”辨:受南宋朱熹“尊蜀贬魏”影响-雅虎文化
Snippet: 2010年2月5日 ... 社会上流传:曹操奸诈,感到生前没做好事,死后会有人挖他的坟墓,遗命设了七十二疑  冢,使后人莫知真墓所在,以逃尸骨遭诛。这种传说,可见之于下列各 ...


?. 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 

Title: 周润发_百度百科
Snippet: 周润发，1955年5月18日生于香港南丫岛，国家一级演员，华人世界顶级巨星，国际   ... 更是远播欧美，并塑造了许文强、小马哥、赌神等多个脍炙人口的经典角色；又与?...

Title: 最霸气、最逆天的题库，来试试你的知识储存量有多大！（第四期）_ ...
Snippet: 2013年4月24日 ... 曾饰演许文强、小马哥、赌神等经典角色的香港男影星是谁？................周润发. 14.徐  克电影《笑傲江湖之东方不败》中东方不败是由哪位女演员扮演的?...

Title: 大丈夫日记_百度百科
Snippet: 从《上海滩》里的许文强，到《英雄本色》里的小马哥，从《赌神》里的高进，到《侠盗高 ...   赌神等多个脍炙人口的经典角色；又与成龙、周星驰并称为“双周一成”，被视为香港?...

Title: 周润发- 搜搜百科
Snippet: 2013年1月30日 ... 香港著名电影和电视演员，香港影坛地位极高，华人影视巨星。 ... 并创造了多个  脍炙人口的经典角色：许文强、小马哥、赌神等等。1990年代以后，与?...

Title: 【艺术之声】今天的孔子昔日的小马哥：周润发_艺术之声吧_百度贴吧
Snippet: 1980年代与成龙一并成为香港电影市场的票房保证，并创造了多个脍炙人口的经典  角色：许文强、小马哥、赌神等多不胜数。1990年代开始后，与成龙、周星驰因为电影  ?...

Title: 一站到底第四期题库一站到底20120323期题库
Snippet: 2012年8月12日 ... 曾饰演许文强、小马哥、赌神等经典角色的香港男影星是谁？周润发. 14.徐克电影《  笑傲江湖之东方不败》中东方不败是由哪位女演员扮演的？林青霞.

Title: 最有成就的华语电影人（图文并貌）_影视评论_天涯论坛
Snippet: 2013年7月12日 ... 周润发周润发，1955年5月18日生于香港南丫岛，国家一级演员，华人 ... 远播欧美，  并塑造了许文强、小马哥、赌神等多个脍炙人口的经典角色；又与?...

Title: 一战到底题库，来看看你的知识储量有多大！_中国HR劳斯莱斯俱乐部 ...
Snippet: 2013年4月15日 ... 曾饰演许文强、小马哥、赌神等经典角色的香港男影星是谁？................周润发. 14.徐  克电影《笑傲江湖之东方不败》中东方不败是由哪位女演员扮演的?...

Title: 《一站到底》前四期题库本站地址：www.hygqt.net 来源： ［字体：大中小］
Snippet: 2012年5月24日 ... 曾饰演许文强、小马哥、赌神等经典角色的香港男影星是谁?周润发. 14.徐克电影《笑  傲江湖之东方不败》中东方不败是由哪位女演员扮演的?林青霞.

Title: 八卦各个年代受追捧的男明星你喜欢哪位？_网易女人
Snippet: 2012年8月15日 ... 八卦各个年代受追捧的男明星你喜欢哪位？ ...... 一并成为香港电影市场的票房保证，  并创造了许文强、小马哥、赌神等多个脍炙人口的经典角色。


?. 谁发明了蒸汽机

Title: 蒸汽机- 维基百科，自由的百科全书
Snippet: 发明[编辑]. 托马斯·纽科门蒸汽机. 世界上第一台蒸汽机是由古希臘數學家亚历山大  港的希罗于1世纪发明的汽轉球，它早于世界二千年，但它只不过 ...

Title: 誰發明蒸汽機?
Snippet: 2003年11月30日 ... 紐科門及其助手J.卡利在1705年發明了大氣式蒸汽機﹐用以驅動獨立的提水泵﹐被  稱為紐科門大氣式蒸汽機。扇形平衡槓桿左側的配重將活塞 ...

Title: 蒸汽机是谁发明的？怎么发明的？_历史_论剑历史门户网_历史网_ ...
Snippet: 2013年3月16日 ... 问题: ┊ ┊. 110.255.111.* [匿名]. 蒸汽机是谁发明的？怎么发明的？ 0分. 标签：  蒸汽机发明回答：1 浏览：3082 提问时间：2012-01-13 13:47. 蒸汽机 ...

Title: 7月2日，世界上第一台蒸汽机| 科技日历小组| 果壳网科技有意思
Snippet: 2013年7月1日 ... 谁发明了蒸汽机？你多半会说瓦特。瓦特虽然通过蒸汽机改变了世界，但他只是改进  了蒸汽机。1698年的今天，托马斯·塞维利为他发明的世界上第一 ...

Title: 谁发明蒸汽机？(2)_历史_论剑历史门户网_历史网_中国古代历史_ ...
Snippet: 2013年3月16日 ... 地面导弹部队 [学长]. 不是瓦特，瓦特是改进蒸汽机 ============== 第一台蒸汽机  是法国物理学家德尼斯·帕潘1688年用一个圆筒和活塞发明制造 ...

Title: 輪船資訊/輪船是誰發明的？ - 實用查詢
Snippet: 但是，在人類水運史上，從人力（包括使用風力）船到用蒸汽機發動的輪船，卻是一個  驚天動地的變化。第一隻輪船是誰發明製造的呢？ 發明製造第一艘輪船的人叫富爾 ...

Title: 谁发明蒸汽机？_历史_论剑历史门户网_历史网_中国古代历史_历史故事
Snippet: 2013年3月16日 ... 问题: ┊ ┊ ┆. 天行键 [神机真人]. 谁发明蒸汽机？ 0分. 标签：蒸汽机发明回答：4   浏览：20109 提问时间：2009-02-20 18:39. 共9条评论... 最佳答案 此 ...

Title: 谁发明了拉链？,Who invented the zip-fastener ?,音标,读音,翻译,英文 ...
Snippet: 您的位置：首页 -> 词典 -> 谁发明了拉链？ 1) Who invented the zip-fastener ? 谁  发明了拉链？ 2) Who invented the steam engine? 谁发明了蒸汽机?

Title: 7月2日，世界上第一台蒸汽机
Snippet: 2013年7月1日 ... 谁发明了蒸汽机？你多半会说瓦特。瓦特虽然通过蒸汽机改变了世界，但他只是改进  了蒸汽机。1698年的今天，托马斯·塞维利为他发明的世界上第一 ...

Title: 蒸汽機是誰發明的- 相關結果- 相關好站
Snippet: 蒸汽機是誰發明的相關話題, 有蒸氣機是誰發明的- 2013年菜推薦- 無名小站,生活大  發現: 兒子的疑問- yam天空部落,火車是誰發明的？ - 大消息愛分享- 無名小站,


?. 中国古代名医华佗为谁所杀

Title: 中国古代名医华佗为谁所杀？ - 旅游百科
Snippet: 问题正文. 叶子a ： 中国古代名医华佗为谁所杀？ 标签：旅游百科1个答案 2013-04-  06 10:53:17 来自：旅游百科 · 叶子a：. 中国古代名医华佗为谁所杀？ 标签：旅游 ...

Title: 中国古代名医华佗为谁所杀? _历史千年
Snippet: 2010年8月1日 ... 华佗医术出名，曹操遂“使佗专视”，华佗成为了曹操的“御医”，华佗看了曹操的病情后  ，说：“此近难济，恒事攻治，可延岁月。”意思是这个病一时难以治 ...

Title: 2013年四川事业单位考试《行测》：常识判断,事业单位招聘网
Snippet: 2013年3月21日 ... 中国古代名医华佗为谁所杀? A.曹操. B.孙权. C.吕布. D.董卓. 【参考答案】A. 【解析】  曹操总是犯头疼病，华佗建议给曹操开颅治病，曹操生性多疑， ...

Title: 中国古代名医华佗为谁所杀？ _历史千年
Snippet: 2010年2月22日 ... 中国古代名医华佗为谁所杀？ 中国古代名医华佗为曹操所杀. 揭开曹操杀华佗的  真正原因 曹操是历史上著名的政治家、军事家和文学家，但由于《 ...

Title: 安徽公务员常识判断百科知识精选（五十） - 安徽公务员考试网
Snippet: 2013年6月8日 ... 谁得分：乙方得分. 8、人们购买保险，为的是满足人们的什么需要：安全. 9、中国古代  名医华佗为谁所杀：曹操. 10、自称“白蒙古”的民族是哪一民族： ...

Title: 三国时的名医华佗并非曹操同乡而是波斯人？_历史频道_凤凰网
Snippet: 2012年7月27日 ... 华佗，三国时著名的医学家，与曹操同乡，并为其所杀。这位古代神医的故事在中国  妇孺皆知。但是，历史上果真有此神奇人物？史学界历来看法不一 ...

Title: 2013年内蒙古公务员考试常识判断之历史知识2_公务员考试网
Snippet: 2013年5月29日 ... 中国古代名医华佗为谁所杀？ 曹操. 6.我国现存时代最早、规模最大的木结构古建筑  是：五台山佛光寺大殿. 7.《四库全书》是什么时候纂修的？ 清朝.

Title: 公务员考试公共基础常识知识汇编最全面版一-模拟试题-四川人事考试
Snippet: 2013年1月28日 ... 中国民族工业短暂发展时涌现的民族资本家不包括： 张之洞. 中国古代名医华佗为谁  所杀？ 曹操. 太阳大气的最内层是： 光球. 黄果树瀑布在贵州省 ...

Title: 第十五期
Snippet: 282、下列哪个作家不是法国人？ (高级题) 5)海涅 283、人们购买保险，为的是满足  人们的什么需要？ (低级题) 1)安全 284、中国古代名医华佗为谁所杀? (高级题) 曹操

Title: 《战谷》每日答题科目答案（第一卷）_网游攻略_手机网游新闻_当乐手机 ...
Snippet: 2013年7月24日 ... 44丶奥林匹克运动会的发源地是？【答案：古希腊】 45丶白雪公主是被谁亲吻而苏醒  的？【答案：王子】 46丶中国古代名医华佗为谁所杀？【答案：曹操】


?. 谁提出了改革开放

Title: 改革开放- 维基百科，自由的百科全书
Snippet: 改革开放是中国共产党於1978年召開的中国共产党十一届三中全会上提出的一條「  對內改革、對外開放」的戰略決策，是中华人民共和国成立以来第一个对外开放的 ...

Title: 改革开放决策的提出
Snippet: 2007年10月8日 ... 在此前后，邓小平、陈云、李先念等中央领导人多次提出要改革我国的经济管理体制、  实行对外开放政策的主张。1978年7月至9月，在国务院务虚会 ...

Title: 为何说最早提出改革开放建立特区的人是华国锋？_爱闯虎山_新浪博客
Snippet: 2011年9月27日 ... 关于改革开放起源的历史叙述，很少提到华国锋，似乎华与改革开放无缘甚至是对立  的。其实这是一个误解。 ..... 毛泽东邓小平是谁提出一国两制的？

Title: “改革开放”的最早提出者并非邓小平--文史--人民网
Snippet: 2011年8月16日 ... 对于“改革”的全面论述，始于胡耀邦1983年1月30日的一份讲话提纲。最早把“改革  开放”连在一起的，同样是胡耀邦。近读胡德平著《中国为什么要 ...

Title: 改革开放_百度百科
Snippet: 会议一致通过《中共中央关于经济体制改革的决定》，明确提出：进一步贯彻执行对内  搞活经济、对外实行开放的方针，加快以城市为重点的整个经济体制改革的步伐，是   ...

Title: 邓小平：改革开放的方针谁也变不了下几代也不变_历史频道_凤凰网
Snippet: 2012年1月13日 ... 我们要向世界说明，我们现在制定的这些方针、政策、战略，谁也变不了。……所以，  从我们 ... 邓小平不是最早提出改革开放的人. 蔡信. [责任编辑：蔡 ...

Title: 改革开放的成绩主要归功于谁？ - 曹久强- 草根网
Snippet: 2012年1月30日 ... 其次，改革开放后，邓小平提出了计划与市场都是资源配置方式，与国家性质无关。  因此，市场不是资本主义的专有，也不是现在所谓主流经济学家的 ...

Title: 谁是中国改革开放的总设计师- 美国侨网- Powered by SupeSite
Snippet: 2010年1月15日 ... 贯穿三十年余年的改革开放，人民已经清晰的发现，谁是中国改革开放的总 .... 然而  这还远远不够，于是悍然提出了改革要牺牲一代人，牺牲经历了 ...

Title: 是谁为中国改革开放提供了沃土？—萃岚的博客—强国博客—人民网
Snippet: 2012年9月8日 ... 因为，没有他就没有新中国，是他为中国的改革开放事业和科学发展、永续 ... 毛泽东  同志在他的晚年还提出了关于三个世界划分的战略思想，并且 ...

Title: 改革开放是谁先提出来的？
Snippet: 2008年8月22日 ... 到底改革开放三个梯度战略构思的提出，是以张家琪、罗国正为先，还是中央内部  早已有这个构思，或是中国高层接受了张家琪、罗国正提出的观点 ...


?. APDPlat的发起人是谁？

Title: Java应用级产品开发平台APDPlat作者杨尚川专访- 名家访谈- ITeye精华
Snippet: 2013年4月7日  APDPlat是Application Product Development Platform的缩写，即应用级  2008年  我发起这个项目，最初的目的是为了方便自己做项目，之后一直 

Title: “开源群英会2013” 参会“英雄榜”（持续更新中） - 开源软件- ITeye资讯
Snippet: 2013年6月21日  开源群英会”特别邀请国内知名开源项目发起人、活跃的开源布道师、有影响    杨尚川：APDPlat项目发起人; 余杰：UbuntuKylin开源操作系统负责人 

Title: 杨尚川_百度百科
Snippet: 2010年获得系统分析师职业资格（水平）证书。 2012年4月9日发起了JAVA开源项目  ：APDPlat应用级产品开发平台。 2013年6月28日APDPlat当选为&quot;2013年度优秀 

Title: CSDN的《2013年度中国优秀开源项目评选》已经沦落为一场刷票大战 ...
Snippet: 你不知道很多人是共享一个IP上网吗？ .. 没人给我指导，吃尽了苦头，做了N多  项目，终于赚了点钱，于是发起了JAVA开源项目APDPlat，目的就是 

Title: “2013年度中国优秀开源项目”榜单发布开源项目展示继续征集中 - CSDN
Snippet: 2013年7月4日  APDPlat是Application Product Development Platform的缩写，意为应用级产品开发  平台。 作为应用级 .. 我们会陆续对这些项目发起人进行采访。

Title: 国内最受欢迎的开源项目集锦-CSDN.NET
Snippet: 2013年6月21日  开源群英会”特别邀请国内知名开源项目发起人、活跃的开源布道师、有  APDPlat：  APDPlat是一个应用级产品开发平台，提供了产品开发所需的各 

Title: 黑客马拉松中脱颖而出的17 岁女孩- 软件编程- OPEN资讯
Snippet: 2013年5月4日  Twivo 是“Twitter for TiVo”的缩写，它是为观剧者开发的一个网络服务。  Change   The Ratio 公司的联合创始人Rachel Sklar 认为，“这是一个非常棒 

Title: 黑客十五年：寻找被黑金毁掉的黑客精神- IT业界- OPEN资讯
Snippet: 2013年7月12日  黑客所做的不是恶意破坏，根据开放原始码计划创始人Eric Raymond 对此字的解释  ，hacker  消息传出，中国黑客自发发起网络抗议活动。 黑客十


?. 被称为画圣的古代画家是哪一位

Title: 吴道子_百度百科
Snippet: 是中国唐代第一大画家，被后世尊称为“画圣”，被民间画工尊为祖师。 ...... 在中国古代  艺术史上，有三位艺术家被称作"圣"人：一位是晋代（公元265--公元420年）王羲之，?...

Title: 《谁是赢家》题库
Snippet: 2011年2月10日 ... 被称为"画圣"的古代画家是:(A) 吴道子 顾恺之 韩干 张择端. 天下第一书"《兰亭集序》  是哪一位古代书法家的杰作?(C) 张旭 王献之 王羲之 张芝.

Title: 公务员考试常识40000题，有空看看，增加点知识面– 【人人分享-人人网】
Snippet: 下列哪一位著名画家擅长画虎？->张善子,. 被称为“画圣”的古代画家是：->吴道子,. “  天下第一书”《兰亭集序》是哪一位古代书法家的杰作？->王羲之,. 古代楷书四大家哪  ?...

Title: 百科知识竞赛题库（3）_红谷滩育新分校六（3）班_百度空间
Snippet: 2010年4月16日 ... 204、被称为"画圣"的古代画家是:(A) 吴道子顾恺之韩干张择端 205、天下第一书"《  兰亭集序》是哪一位古代书法家的杰作?(C) 张旭王献之王羲之张芝

Title: 卡布仙踪答题答案大全[图] 第4页- 游戏资讯- 网侠软件站
Snippet: 2 days ago ... 被称为"画圣"的古代画家是：吴道子. 3.《史记》中的“世家”是给什么人作的 ... 金屋藏娇  的故事与哪一位皇帝有关：汉武帝. 21."豆蔻年华”是指几岁：13岁.

Title: 百科知识精选练习题(十九)
Snippet: 2011年8月22日 ... 下列哪一位著名画家擅长画虎?(B). A.张大千 B.张善子 C.徐悲鸿 D.齐白石. 326. 被  称为"画圣"的古代画家是:(A). A.吴道子 B.顾恺之 C.韩干 D.张择端.

Title: 大话神仙猜灯谜游戏答案大全-265G大话神仙
Snippet: 2013年4月18日 ... 被称为"画圣"的古代画家是（吴道子）. 被称为酿酒业的祖师是谁（杜康） ... 宝座，骑  狮子”的是（文殊菩萨）. 吃年糕的习俗与哪位历史人物有关（伍子胥）.

Title: 常识判断：百科知识精选练习题三十七- 云南公务员网
Snippet: 2012年11月29日 ... 4、被称为“画圣”的古代画家是：（A）. A.吴道子B. 顾恺之. C. 韩干D. 张择端. 5、天下第  一书“《兰亭集序》是哪一位古代书法家的杰作？（C）. A.张旭 B.

Title: 女神联盟最新答题库_女神联盟官网
Snippet: 5 days ago ... 下列哪一位著名画家擅长画虎? 张善子. 被称为"画圣"的古代画家是: 吴道子. "天下第  一书"《兰亭集序》是哪一位古代书法家的杰作? 王羲之. 古代楷书?...

Title: 百科知识竞赛试题
Snippet: 2013年4月7日 ... 81、下列哪一位著名画家擅长画马?徐悲鸿. 82、被称为"画圣"的古代画家是:吴道子.   83、天下第一书"《兰亭集序》是哪一位古代书法家的杰作?王羲之.


?. 被称为酿酒行业的祖师是谁

Title: 女神联盟答题器,女神联盟每日答题最全最完整的答案
Snippet: 2013年7月8日 ... 被称为酿酒行业的祖师是谁? 杜康. "文房四宝"中的毛笔是谁发明的? 蒙恬. 古代钱的  单位"贯"是多少? 千枚铜钱. 下列清朝皇帝中哪位是末代皇帝？

Title: 祖师爷_百度百科
Snippet: 各行祖师爷; 酿酒业祖师爷----杜康; 酸梅汤业祖师爷———朱元璋; 建筑业祖 ... 行业  祖师崇拜是民间文化的一个分支，过去各行业都很重视，视其为本行业的保护神。

Title: 女神联盟-PPS《女神联盟》每日答题答案完整版
Snippet: 2013年8月13日 ... 被称为酿酒行业的祖师是谁? 杜康. "文房四宝"中的毛笔是谁发明的? 蒙恬. 古代钱的  单位"贯"是多少? 千枚铜钱. 下列清朝皇帝中哪位是末代皇帝？

Title: 封神2文王访贤智者考验题库_封神2官网_fs.175game.com
Snippet: 智者考验行游天下煮酒论史饮食大全文学艺术自然常识武王亲策题目?...

Title: 元旦百科知识竞赛-刘志芳-中国教育人博客
Snippet: 2011年12月31日 ... 被称为酿酒行业的祖师是谁?(D). A孔子B鲁班C柳永D 杜康. 15. "文房四宝"中的毛笔  是谁发明的?(C). A乐毅B闻仲C蒙恬D 刘伯温. 16、著名的卢浮宫?...

Title: 宝石总动员新版趣味问答题目与答案_彩云游戏网
Snippet: 2012年8月8日 ... 4、被称为酿酒行业的祖师是-----------杜康. 5、唐僧师徒取经成功后都成了 ... 12、在  虎门抗击英国侵略者壮烈牺牲的爱国将领是谁？-------------关天培.

Title: 宮廷計攻略百科：官邸隨機事件表- 巴哈姆特
Snippet: 你知道被稱為釀酒行業的祖師是誰嗎？→ 杜康→ 屠蘇酒. 65.我好無聊啊，你告訴我  ，五百二十加五百二十等於多少？→ 一千零四十→ 我和宛妃誰先進宮→ 你→ 交際?...

Title: 2013年云南省农村信用社考试常识复习4
Snippet: 2013年4月25日 ... 下列历史上的事变是李世民发动的 :(A) 玄武门之变陈桥兵变靖康之变土木之变 99.   被称为酿酒行业的祖师是谁 ?(D) 孔子鲁班柳永杜康 100.

Title: 2013年江西省公务员行测常识备考- 江西公务员,行政职业能力测验 ...
Snippet: 2013年3月19日 ... 玄武门之变 陈桥兵变 靖康之变 土木之变99. 被称为酿酒行业的祖师是谁 ?(D) 孔子   鲁班 柳永 杜康100. "文房四宝"中的毛笔是谁发明的 ?(C) 乐毅 闻?...

Title: 大话神仙猜灯谜答案及题库大全（已更新最终版）_大话神仙攻略网 ...
Snippet: 2013年2月28日 ... 北宋"三苏"中,苏洵与苏轼的亲戚关系是什么(父子). 被称为"画圣"的古代画家是(吴  道子). 被称为酿酒业的祖师是谁(杜康). 被称作东方威尼斯的是(杭州).


?. 被今人誉为"开眼看世界第一人"是谁

Title: 总裁令答题题库小结部分(五)_40407网页游戏网::40407.COM::
Snippet: 2013年6月18日 ... 6、清朝晚期,被今人誉为“开眼看世界第一人“的是谁? 答案：林则徐. 7、红军长征中,哪  次战役最突出反映毛泽东军事思想和指挥才能? 答案：四渡赤水.

Title: 其它-北京公务员考试网
Snippet: 我国境内最早的人类是:( ) A.北京人B.元谋人C.山顶洞人D.丁村人2. 清朝晚期,被今人  誉为"开眼看世界第一人"的是谁?( ) A.魏源B.龚自珍C.林则徐D.严. 2011-06-15?...

Title: 乡试,会试,殿试,奥运会试题-新水浒Q传-游久网
Snippet: 2010年1月13日 ... 清朝晚期，被今人誉为“开眼看世界第一人”的是谁？ （林则徐）. 爵，是一种典礼时用  的酒器，那么爵有几只脚？ （三只脚）. 据考古资料显示，我国的钻?...

Title: 百科知识竞赛试题
Snippet: 2013年4月7日 ... 76、 清朝晚期,被今人誉为"开眼看世界第一人"的是谁?林则徐. 77、红军长征中,哪次  战役最突出反映毛泽东军事思想和指挥才能?四渡赤水. 78、秦时?...

Title: 常识判断：百科知识精选练习题十六- 云南公务员网
Snippet: 2012年10月12日 ... 我国境内最早的人类是：（B） 北京人元谋人山顶洞人丁村人302. 清朝晚期，被今人誉  为“开眼看世界第一人”的是谁？（C） 魏源龚自珍林则徐严复303.

Title: 杨宝举_百度百科
Snippet: 闽侯是人文荟萃之地，被誉为“八闽首邑”。这里诞生了名垂青史的民族英雄、禁毒先驱  、“开眼看世界第一人”的林则徐。林公“苟利国家生死以，岂因祸福避趋之”，“?...

Title: 开心辞典题库534题2
Snippet: 2011年5月25日 ... (B) 康德黑格尔马克思丹纳 301. 我国境内最早的人类是:(B) 北京人元谋人山顶洞人  丁村人 302. 清朝晚期,被今人誉为"开眼看世界第一人"的是谁?(C)

Title: forever_百度空间
Snippet: 美国帝国大厦建于哪一年？【C】A、1930；B、1932；C、1931. 清朝晚期，被今人誉为“  开眼看世界第一人”的是谁？【D】A 、魏源；B 、严复；C、龚自珍；D、林则徐.

Title: 女神联盟最新答题库_女神联盟官网
Snippet: 5 days ago ... 荷迦兹. "人把他的环境人化了"这是谁的论断? 黑格尔. 我国境内最早的人类是: 元谋  人. 清朝晚期,被今人誉为"开眼看世界第一人"的是谁? 林则徐.

Title: 魔力学堂每日答题黄小丫答题题库及答案- 多玩网页游戏webgame ...
Snippet: 1、清朝晚期被今人誉为“开眼看世界第一人”是（林则徐）. 2、球王贝利的球衣号（10号  ）. R：. 1、“人把他的环境人化了”是谁说过的话？（黑格尔）.


?. 被列为世界十大文豪之一的中国文学家是哪位

Title: 公务员考试可能需要的720条百科知识3_口袋推推
Snippet: 下列著名作家哪位不是19世纪英国诗坛三大巨星之一:(A) 笛福济慈雪莱拜伦 199. 被  列为"世界十大文豪"之一的中国文学家是:(C) 茅盾郭沫若鲁迅丁玲 200. 诺贝尔?...

Title: 世界十大文豪_百度百科
Snippet: 世界十大文豪是：荷马、但丁、歌德、拜伦、莎士比亚、雨果、泰戈尔、列夫·托尔斯泰、  高尔基、鲁迅。...

Title: 神魔遮天答题器神魔遮天智力问答答题器神魔遮天答题器答案
Snippet: 2012年2月14日 ... Internet最初用作 A.童试参加科举考试“连中三元”，不包括在以下哪一 ... C.鲁迅被列  为"世界十大文豪"之一的中国文学家是： C.安定门不属于北京“皇?...

Title: 【攻略】智力問答14 @補天Q 傳哈啦板- 巴哈姆特
Snippet: 2013年8月11日 ... 340、標誌著北宋詩文革新運動最高成就的作家是？蘇軾 341、中秋節吃 ... 371、哪  位中國文學家被列為“世界十大文豪”之一？魯迅 372、被稱為“畫?...

Title: 女神联盟最新答题库_女神联盟官网
Snippet: 5 days ago ... 下列著名作家哪位不是19世纪英国诗坛三大巨星之一: 笛福. 被列为"世界十大文豪"  之一的中国文学家是: 鲁迅. 诺贝尔文学奖是从什么时候开始评选?...

Title: 被列为“世界十大文豪”之一的中国文学家是- 文学家- 国家大事- 国家大事
Snippet: 世界十大文豪①.荷马——古希腊诗人②.但丁——意大利诗人③.歌德——德国诗人、  剧作家、思想家④.拜伦——英国积极浪漫主义诗人⑤.

Title: 消息(1）在有道在世界十大文豪中国文学家是谁的第一页第十五位镶着 ...
Snippet: 2012年6月2日 ... 消息(1）在有道在世界十大文豪中国文学家是谁的第一页第十五位镶着中国网三个字  _董克俭的博客_凤凰博报,凤凰博客.

Title: 下列成语中哪个有错别字:
Snippet: 2010年11月30日 ... 9、我国植树节定在每年的3月12日,这也是为纪念哪位人物而定的? A屈原 B孙中山 ...   12、被列为"世界十大文豪"之一的中国文学家是: A茅盾 B郭沫若?...

Title: 世界十大文豪是那几个人物？ - 莎士比亚百科
Snippet: 2012年1月7日 ... 世界十大文豪中外国人物有荷马、莎士比亚、高尔基等，中国有鲁迅。

Title: 《拇指西游》文昌阁一千题全收录1_九游(9game.cn)
Snippet: 2013年4月19日 ... 题目 正确答案“大弦嘈嘈如急雨，小弦切切如私语”描述的是哪种乐器： ...... 人创办的：  语丝周刊被列为"世界十大文豪"之一的中国文学家是：鲁迅世界?...


?. 被誉为“钢琴之王”的作曲家是谁

Title: 音乐普及知识汇总
Snippet: 乐圣”是指丧失听力的贝多芬。 21·谁是“钢琴诗人”呢？ 波兰作曲家肖邦，被视为钢琴  音乐最伟大的作曲家，通常被誉为“钢琴诗人” 22·十二平均律是由谁首创？

Title: 音乐常识– 【人人分享-人人网】
Snippet: 乐圣”是指丧失听力的贝多芬。 21·谁是“钢琴诗人”呢？ 波兰作曲家萧邦，被视为钢琴  音乐最伟大的作曲家，通常被誉为“钢琴诗人” 22·十二平均律是由谁首创？

Title: 交响乐之父，钢琴诗人，歌曲之王，乐圣，小提琴王，音乐神童，圆舞曲 ...
Snippet: 交响乐之父——海顿海顿（1732－－1809），奥地利作曲家，维也纳古典乐派的最  早期代表，被世人称为“交响乐之父”。他自幼在艰苦的条件下学习?...

Title: 张乐华博士微博综合素质问题集合（每日更新中）
Snippet: 问题54：世界上最大的壁画西斯廷教堂天顶壁画《创世纪》的画家是谁？ ... 被誉为  钢琴之王的是著名匈牙利作曲家、钢琴家、指挥家，伟大的浪漫主义大师李斯特。

Title: 世界十大著名钢琴名曲——20世纪最伟大的钢琴家_南京佳音幼儿提琴 ...
Snippet: 2013年2月27日 ... 简介: 拉赫玛尼诺夫被誉为２０世纪最著名的俄罗斯作曲家、钢琴家兼 ... 家和音乐  活动家，浪漫主义音乐的主要代表人物之一，被人们誉为“钢琴之王”。

Title: 李斯特_百度百科
Snippet: 弗朗茨·李斯特Franz Liszt），著名的匈牙利作曲家、钢琴家、指挥家，伟大的浪漫主义   ... 了管弦乐的效果，他还首创了背谱演奏法，他也因此获得了“钢琴之王”的美称。

Title: 有欧洲近代音乐之父的人是谁？_音乐_名人_天涯问答
Snippet: 巴赫被称为“不可超越的大师”，甚至被誉为“欧洲近代音乐之父”。 ... 年3月21日－  1750年7月28日），巴洛克时期的德国作曲家，杰出的管风琴、小提琴、大键琴演奏家  。

Title: 世界上最著名最具有代表的古典音乐家及其12星座（古典音乐爱好者必 ...
Snippet: 2013年2月5日 ... 匈牙利作曲家、钢琴家、指挥家和音乐活动家，浪漫主义音乐的主要代表人物之一，被  人们誉为“钢琴之王”。代表作品：《浮士德交响曲》、《但丁交响?...

Title: 金刚之印答题
Snippet: 《浪客剑心》中绯村剑心脸上竖着的伤疤是谁划上的？ 雪代巴的未婚夫. 四大名亭中  的陶然亭是 ..... 被誉为“钢琴之王”的作曲家是：, 李斯特. 《雪绒花》是哪部影片的插曲  ？

Title: 公务员考试可能需要的720条百科知识_我的博客
Snippet: 2011年12月28日 ... 被誉为"钢琴之王"的作曲家是:(C) 肖邦勃拉姆斯李斯特约翰．施特劳斯 686. "法西斯"  这个词由什么演化而来?(D) 人名地名刑法名刑具名 687. 全国性?...


?. 被誉为乐圣音乐家的是谁

Title: 被称为“乐圣”的外国音乐家为_百度知道
Snippet: 贝多芬1.

Title: 路德维希·凡·贝多芬_百度百科
Snippet: 是“集古典主义之大成，开浪漫主义之先河”的伟大音乐家；他创作的作品对音乐发展  有着深远的影响，由此被尊称为乐圣。祖父自从二十岁来到波恩就做了那里的乐长。

Title: 被称为“乐圣”的外国音乐家是谁？_百度知道
Snippet: 路德维希·凡·贝多芬ludwig van beethoven (1770-1827) 德国最伟大的音乐家之一。  出身于德国波恩的平民家庭，很早就显露了音乐上的才能，八岁便开始?...

Title: 音乐家_百度百科
Snippet: 贝多芬对音乐的最重要贡献是交响曲，因此他被誉为“交响乐之王”。 .... 父亲在圣-桑  两个月大时去世，圣桑由母亲和伯母共同抚养，伯母是音乐家，于圣桑两岁半时开始  ?...

Title: 被称为"乐圣"的外国音乐家是谁?歌剧诞生于哪个国家?_百度知道
Snippet: 1、乐圣贝多芬 2、歌剧诞生于意大利佛罗伦萨.

Title: March 9 at 11:14am
Snippet: 著名油畫《自由引導人民》是誰的作品? 13.臺灣第一個火車頭的名稱是什麼? 14.世界  上建立最早的資產階級國家是? 15.被譽為「樂聖」的音樂家是誰? 16.電影金棕梠獎?...

Title: 交响乐之父，钢琴诗人，歌曲之王，乐圣，小提琴王，音乐神童，圆舞曲 ...
Snippet: 他自幼在艰苦的条件下学习音乐，8岁时被教堂乐长挑去学习歌唱，后接受了键盘  乐器、小提琴和 ..... 81; 2006-07-06 被称为乐圣的外国音乐家是谁？

Title: 第九交响曲_百度百科
Snippet: 但是对艺术追求完美的乐圣坚持自己的理念，没有改动一个音符。 .... 斯Egon   Wellesz奥地利作曲家和音乐学家，被誉为拜占庭音乐的权威；英国作曲家沃恩威廉  斯· 拉?...

Title: 音乐知识大放送<<音乐加油站-音乐知识库>>只想做最- 天籁屋...
Snippet: 在众多知名的作曲家里，被称为乐圣的是谁？ 乐圣所指的是贝多芬，他写了 ... 在  西洋音乐史上有哪几位作曲家是二十世纪新音乐的开创者？ 在西洋音乐史上被称为  是?...

Title: 贝多芬传_百度百科
Snippet: 这些作品对音乐发展有著深远影响，因此被尊称为乐圣。 贝多芬. 贝多芬出生于贫寒  的家庭，父亲是歌剧演员，性格粗鲁，爱酗酒，母亲是个女仆。贝多芬本人相貌丑陋，  ?...


?. 被誉为中国摇滚的第一人是谁

Title: 罗琦_百度百科
Snippet: 圈里的朋友都说那个能给人灵感，事实上这是一种误导，它只是刺激人的感官神经…   ... 作为20世纪90年代流行乐坛重量级的风云人物，被誉为“中国第一摇滚女声”的罗?...

Title: 中国摇滚教父——崔健_音乐教父_MV中国
Snippet: 2012年9月6日 ... 崔健被誉为中国摇滚乐开山之人，有“中国摇滚教父”之称。 ... 《一无所有》，他后来被  誉为中国摇滚第一人，《一无所有》也成为中国摇滚乐的开山之作。

Title: 崔健_百度百科
Snippet: 崔健被誉为中国摇滚乐开山之人，有“中国摇滚教父”之称。成名曲为1986 .... 在ADO  的帮助下，崔健发行了他自己认为是第一张的专辑--《新长征路上的摇滚》。这张专辑  ?...

Title: 偶像变迁30年
Snippet: 如果要论当时的业界精英中谁是最让中国人集体崇拜的偶像，毫无疑问——中国女排  。 ... 中国大陆自产的最红娱乐偶像则属后来被誉为“中国摇滚第一人”的崔健。

Title: 瘦人乐队_百度百科
Snippet: 瘦人乐队成立于1997年，是中国摇滚界公认的继崔健、唐朝、黑豹之后最具实力开创  中国摇滚新时代的乐队，是现代中国摇滚乐坛具有极高知名度和影响力的乐队；是?...

Title: 《我是歌手》周晓欧集结摇滚六虎复活中国摇滚_湖南卫视
Snippet: 2013年3月15日 ... 湖南卫视《我是歌手》舞台一直刻意保持着“摇滚”这个元素。然而听众们对摇滚这一  派别的包容度并不如其他类型音乐。第一场黄贯中作为BEYOND?...

Title: 迷笛音乐节_百度百科
Snippet: 迷笛是第一个把户外摇滚音乐节的概念带到中国的先行者。 ... 精选自全国各地，每日  观众达到3000-4000人次，被媒体誉为中国第一次真正意义上的露天摇滚音乐节。

Title: 林立果：中国摇滚第一人
Snippet: 2013年1月15日 ... 如果说崔健于1986年5月9日为中国内地打开了一扇摇滚大门，林立果则是第一个为  我们开启摇滚乐窗户的人，时间是1969年。做为中国历史上第一?...

Title: 中国人偶像变迁30年_中国网
Snippet: 2008年2月25日 ... 如果要论当时的业界精英中谁是最让中国人集体崇拜的偶像，毫无疑问——中国 ...   中国大陆自产的最红娱乐偶像则属后来被誉为“中国摇滚第一人”的?...

Title: 崔健顺流而下，逆流而上~ 南方人物周刊南方人物周刊
Snippet: 乐评人李皖后来在《从1986年的窗口望出去——崔健是谁？》一文中 ..... 这张名为《第  一册》的专辑被誉为“人文摇滚”的代表作，1998年获得“中国最佳十大摇滚专辑”。


?. 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 

Title: 双J恋_百度百科
Snippet: 因为两个人的英文名中个都有一个“J”字， 而两人又传出恋情，所以称之为双J恋。   目录. 简介: 双J ... 周杰伦和蔡依林曾经在乐坛上被称作一对金童玉女，. 2010年6月  13?...

Title: 《一站到底》题库及答案（20120323期） - 一站到底网-456游戏大厅下载 ...
Snippet: 2012年5月20日 ... 周杰伦的专辑叶惠美中，叶惠美是周杰伦的什么人 妈妈 跟周杰伦传出绯闻，被称为  双J恋的女歌手是谁 蔡依林 位于香港的亚洲第一大海港叫什么

Title: 昆凌_百度百科
Snippet: 昆凌（中文本名为武谊蓁，英文本名：Hannah Quinlivan 艺名Hannah）1993年8月12  日出生于 ... 她被狗仔传为台湾音乐人周杰伦的绯闻女友，被称为新一代的“J女郎”。

Title: 一站到底第四期题库一站到底20120323期题库
Snippet: 2012年8月12日 ... 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁蔡依林位于香港的亚洲第一大海港叫  什么维多利亚位于深圳，联结香港和内地的第一口岸叫什么罗湖?...

Title: 一战到底最全题库– 【人人分享-人人网】
Snippet: 羊被誉为广州的母亲河，也是广州最大的河流叫什么？珠江周杰伦的专辑叶惠美中，  叶惠美是周杰伦的什么人? 妈妈跟周杰伦传出绯闻，被称为双J恋的女歌手是谁？

Title: 人人网校内- 说说Jay和Jolin的那点事
Snippet: 2010年5月23日 ... 实则周杰伦、罗志祥、蔡依林及一票好友同游日本，传出双J恋。“双J ... 他说：“第一次  合作录音就被传出绯闻，令到大家尴尬了好一段时间才恢复联络。

Title: 一战到底– 【人人分享-人人网】
Snippet: 珠江12、周杰伦的专辑《叶惠美》中，叶惠美是周杰伦的什么人？妈妈13、跟周杰伦出  绯闻，被称为“双J恋”的女歌手是谁? 蔡依林14、位于香港的亚洲第一大海港叫什么?...

Title: 台湾“第一美女主播”侯佩岑
Snippet: 侯佩岑凭主播新闻成名，随后成为东风卫视品牌节目《娱乐亚洲》的主持人，因为和  台湾政界要人连战的公子的“连侯恋”而备受压力，如今又传出和周杰伦相恋绯闻。

Title: 历任J女郎大比拼【图】_星座名人_星座_太平洋女性网
Snippet: 2012年12月20日 ... 才华横溢的亚洲小天王周杰伦确实魅力非凡，最近更是绯闻四起，传出与19岁嫩模 ...   Jolin一直是大家公认周董的最佳情人，也被歌迷称为“双J恋”。

Title: 战
Snippet: 2013年4月23日 ... 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁? 蔡依林 53.位于香港的亚洲第一大  海港叫什么? 维多利亚 54.位于深圳，联结香港和内地的第一口岸?...


?. “冲冠一怒为红颜“中的红颜是指谁

Title: “冲冠一怒为红颜”中“红颜”指的是谁？ - 历代名妓百科
Snippet: 2011年10月14日 ... 在民间流传最广的传闻，莫过于陈圆圆、吴三桂和李自成之间的纠缠，“冲冠一怒为  红颜”讲述的就是这段传闻。崇祯时外戚周奎欲给皇帝寻求美女，?...

Title: 漫话明清之三：冲冠一怒为红颜_张晓波_新浪博客
Snippet: 2007年1月5日 ... 漫话明清之三：冲冠一怒为红颜. 吴三桂. 冲冠一怒为红颜. “恸哭三军皆缟素，冲冠一  怒为红颜”，明末清初诗人吴梅村千古名句，指吴三桂、陈圆圆事。

Title: 考考你：“冲冠一怒为红颜”是指的谁？ - 金山词霸汉语- HAPPY Life
Snippet: 当吴三桂领兵赴京朝见新主（李自成），走至永平沙河驿时，遇到从京城逃出的家人，  吴三桂问：“我家里人好吗？”家人说：“被闯王抄了。”吴三桂说：“没关系，我到后就会?...

Title: “冲冠一怒为红颜”被误读了三百多年_老狼新浪博客_新浪博客
Snippet: 2013年2月6日 ... 诗人吴伟业将吴三桂的这句口号作了峻刻的讽刺，即冲冠一怒为红颜，可以看出来  吴三桂是在降清，而并非具有报国的本意，陈圆圆也并非是红颜?...

Title: 背黑锅还是叛徒吴三桂冲冠一怒真是为红颜？
Snippet: 很多人都爱说吴三桂引清兵入关是因为冲冠一怒为红颜，这实在是滑天下之大稽，  为了吸引读者，小说家可以这么写，但作为学者，如果也这样人云亦云，则不禁令人?...

Title: 冲冠一怒为红颜美女今夜落谁家,皇帝传_皇帝传官网_火焰皇帝传网页 ...
Snippet: 2013年6月7日 ... 冲冠一怒为红颜美女今夜落谁家. 传说中的四大美女已不再是神话，每晚21:15至21:  30大家都怀着激动澎湃的心情去抢夺，在这里没有亲情，友情，?...

Title: 冲冠一怒为红颜
Snippet: 2012年1月25日 ... 恸哭三军皆缟素，冲冠一怒为红颜”，明末清初诗人吴梅村千古名句，指吴三桂、  陈圆圆事。李自成围攻北京，吴三桂先降复叛，《明史》载：“初，三桂奉诏?...

Title: 准妻子与他人玩暧昧：冲冠一怒为红颜到底值不值？ 热点心理文章 ...
Snippet: 2 days ago ... 很多事情就像热点中一样，准妻子搞暧昧，小伙子冲冠一怒为红颜。咋一看，有人会猜  是男人的错， ... 8月热浪来袭：高温与犯罪谁是谁非？ 测试推荐：.

Title: 明末疑案之五（是谁冲冠一怒为红颜） -- 听甘德霜讲故事-- 传送门
Snippet: 明末疑案之五（是谁冲冠一怒为红颜）. 2013-07-15. 很久之前我写吴三桂的时候用过  吴梅村的《圆圆曲》当中的一句诗“恸哭六军俱缟素，冲冠一怒为红颜。”，我想大家?...

Title: [图文]云南版的“冲冠一怒为红颜”早吴三桂260余年- 历史网www.lishi.net
Snippet: 2013年4月5日 ... 也许在云南，谁都知道吴三桂“冲冠一怒为红颜”的典故，传说吴三桂因爱妾陈圆圆被  掠，一怒 .... 匿名 评论 [图文]揭秘谁是史上杀害兄弟最多的皇帝？


?. 草圣指哪位书法家

Title: 以草书见长，人称“草圣”的书法家是？ - 已解决- 搜搜问问
Snippet: 张旭：唐代大书法家、有“草圣”之称张长史，即张旭，唐吴郡（江苏苏州）人，生卒年月  不详。字伯高，官至金吾 ... 草圣”是指哪位书法家？ 更多相关知识>?...

Title: 书法家林散之为什么被称为“当代草圣”-书画印知识-书画印知识-海峡 ...
Snippet: 2012年10月4日 ... 内容摘要：书法家林散之为什么被称为“当代草圣” 海峡书画艺术网草圣是指哪位书法  家。林散之被公认称为“当代草圣”。林散之（1898年11月20?...

Title: 绝代双骄答题器
Snippet: 问题 提醒：答题可以开启宝箱哦~！ 正确答案. （）

Title: 草圣
Snippet: 位于唐寅墓西侧，全部采用古建筑材料兴建，将草圣祠建成类似浙江绍兴兰亭的建筑  ，陈列展示张旭书法艺术成就，并成为国内外文人雅士笔会场所。苏州百姓以书法家  ?...

Title: 快玩绝代双骄答题器
Snippet: 问题, 答案. （）

Title: 神将三国辅助答题器题目汇编_神将三国新闻攻略_9k9k网页游戏数据 ...
Snippet: 2013年5月23日 ... 答案： 琵琶行问： “草船借箭”是《三国演义》中的著名事件，除了诸葛亮以外谁还用过“  草船借箭”之计？ 答案： 孙坚问： “草圣”是指哪位书法家？

Title: 开心辞典题库02＿为您服务教育网
Snippet: 企鹅产卵的季节一般是： 春季夏季秋季冬季3 “草圣”是指那位书法家？ 张旭 王羲之  张芝怀素在世界史上，“两河文明”中的两河是指幼发拉底河与： 底格里斯河 尼罗河恒  ?...

Title: 书画艺术
Snippet: 著名的《女史箴图》是哪位画家的作品, 顾恺之. 被誉为“书圣”的是哪位书法名家,   王羲之. 有“画圣”美誉的吴道子是哪朝人, 唐朝. 以草书见长，人称“草圣”的书法家是,   张旭.

Title: 百科知识竞赛题（一）_江南学堂_新浪博客
Snippet: 2013年3月30日 ... 26、“草圣”是指哪位书法家？张旭 27、唐代诗佛、诗鬼分别是指：王维、李贺 28、有“  钢琴诗人”之称的是：肖邦 29、被赞誉为“诗中有画，画中有诗”的唐?...

Title: 張旭- 维基百科，自由的百科全书
Snippet: 張旭（生卒年不詳；一說是658年－747年），字伯高，是中國唐朝中期的知名書法家。  出生於吳郡吳縣（今江蘇省苏州市)，在書法界，他有「草聖」的稱呼。在唐朝開元年間?...


?. 查尔斯的第二任妻子是谁

Title: 卡米拉_百度百科
Snippet: 2005年4月9日，王储查尔斯与卡米拉在温莎市政厅举行世俗婚礼。随后，卡米拉别被  女王 ... 查尔斯出访美国。 威尔士亲王查尔斯的第二任妻子卡米拉的官方头衔全称.

Title: 英国现任王室主要成员- 英国王室百科
Snippet: 康沃尔公爵夫人和查尔斯王子是什么关系？ 行家：岳武穆时间：2011年04月22日 康  沃尔公爵夫人卡米拉是威尔士亲王查尔斯王子的第二任妻子。…[详细] · 你知道现任?...

Title: 查尔斯王子为什么宣布退出马球赛？ - 马球之家百科
Snippet: 2010年12月27日 ... 查尔斯王子的婚姻也与马球有着不解之缘，1970年，当时23岁的查尔斯王子在一场  马球比赛中结识了第二任妻子卡米拉，在查尔斯王子夫妇一张很?...

Title: 卡米拉——查尔斯的第二任妻子故事 CCTV.com
Snippet: 2009年8月10日 ... 谁又能真的说清楚查尔斯究竟爱谁呢？也许，连他自己都不知道。 卡米拉王妃殿下.   威尔士亲王查尔斯的第二任妻子. 卡米拉的官方头衔全称:.

Title: 康沃尔公爵夫人和查尔斯王子是什么关系？ - 英国王室百科
Snippet: 2011年4月22日 ... 康沃尔公爵夫人卡米拉是威尔士亲王查尔斯王子的第二任妻子。 康沃尔公爵夫人卡  米拉殿下. 康沃尔公爵夫人-卡米拉. 威尔士亲王查尔斯威尔斯亲王?...

Title: 怪屋- 维基百科，自由的百科全书
Snippet: 明顯的嫌疑犯是布倫達·利奧尼茲，亞里斯提德斯的第二任妻子，以及勞倫斯·布朗， ...   約瑟芬透露了不少內幕，並聲稱她知道兇手的身份是誰，卻不願意告訴查爾斯。

Title: 6
Snippet: 2013年8月12日 ... 英国王妃卡米拉个人资料及图片欣赏: 威尔士亲王查尔斯的第二任妻子卡米拉2005  年4月9日与相恋35年的情人 ... 高夫人的扮演者于小慧是谁呢?

Title: 查尔斯·曼森- 维基百科，自由的百科全书
Snippet: 在随后的两次盗窃中，曼森在第二次又被抓住送到了Indiana Boys School。那时他才  13 ... 入狱的第一年中，曼森时常得到妻子和母亲的探视——她们那时住在一起。

Title: 关于查尔斯布兰登_都铎王朝吧_百度贴吧
Snippet: 2011年11月15日 ... 查尔斯·布兰登（Charles Brandon, 1st Duke of Suffolk）与法国王太后、英格兰公主  玛丽·都铎的第 ... 有，忘记和谁的了，好像是和第二任妻子凯瑟琳的.

Title: 英国查尔斯王子晋升三军元帅曾在海军空军服役-搜狐新闻
Snippet: 2012年6月18日 ... 查尔斯王子情妇卡米拉 · 戴安娜王妃和查尔斯王子 · 查尔斯第二任妻子的资料 ·   查尔斯王子的妻子 ... 拳王迈克·泰森网上调侃中国城管：城管是谁？


?. 英国王储查尔斯的妻子是谁

Title: 查爾斯(威爾斯親王) - 维基百科，自由的百科全书
Snippet: 作為英國王儲，查爾斯的戀愛經歷一直是英國大小傳媒追訪的話題。 ... 他現在的妻子  ，卡米拉·珊德在查爾斯婚前也傳出過緋聞，但在1970年代末傳出兩人分手的消息。

Title: 查尔斯王子_百度百科
Snippet: 作为英国王储，查尔斯的恋爱经历一直是英国大小传媒追访的话题。 ... 他的现任妻子  ，卡米拉·珊德在查尔斯婚前也传出过绯闻，但在1970年代末传出两人分手的消息。

Title: 美国杂志称英国王储查尔斯要和"小三"卡米拉离婚了--传媒--人民网
Snippet: 2011年8月20日 ... 最新一期美国杂志《National Examiner》以大幅版面报道英国皇室查尔斯王储将与  妻子卡米拉离婚事件。报道称，查尔斯和卡米拉迄今已经结婚6年，?...

Title: 卡米拉_百度百科
Snippet: ... of Cornwall） 前称卡米拉·帕克-鲍尔斯（Camilla Parker Bowles），本姓珊德（  Shand），是英国王储查尔斯王子在2005年4月9日以公证结婚方式所迎娶的第二任  妻子。

Title: 查尔斯夫妇访约旦探视叙难民| 英国王储| 难民营| 大纪元
Snippet: 2013年3月13日 ... 约旦官员表示，英国王储查尔斯与妻子卡蜜拉（Camilla）今天探访约旦北部一 ... 这是  查尔斯夫妇抵达约旦的第2天，他们稍后将参观约旦北部吉拉希?...

Title: 凯特·米德尔顿_百度百科
Snippet: 凯特·米德尔顿（Kate Middleton ），1982年1月9日出生，是英国王储威廉王子的妻子  。英国社会各界对凯特的评价也是褒多于贬，民众普遍评价凯特是个温和、智慧的?...

Title: 英国王储查尔斯访瑞典秀球技表演单手上篮(图)-中新网
Snippet: 2012年3月23日 ... 据外电23日报道，近日英国皇室的查尔斯王储携妻子巡访了瑞典，在当地 ... 据悉，这  是查尔斯王储与夫人卡米拉出访北欧三国的其中一站，另外两国?...

Title: 威廉王子_百度百科
Snippet: 英国王位第四顺位继承人，哈里是英国查尔斯王储和戴安娜王妃的第二个 ..... 据英国  媒体报道，查尔斯王子在妻子康沃尔公爵夫人卡米拉的陪同下，来到英格兰林肯郡?...

Title: 威廉王子_互动百科
Snippet: 威廉王子的妻子是剑桥公爵夫人凯萨琳。 编辑摘要 .... 弟弟 英国王位第三顺位继承人  ，哈里王子是英国查尔斯王储和戴安娜王妃的第二个儿子，1984年9月15日出生。

Title: 英国王储查尔斯常年私下会见内阁成员涉嫌干政-搜狐新闻
Snippet: 2013年8月13日 ... 中新网8月13日电 据外媒13日报道，英国王储查尔斯涉嫌干政的争议未平，英国《每  日邮报》揭发他过去三年私下与内阁成员举行36次会议，谈论?...


?. 查尔斯的妻子是谁

Title: 卡米拉_百度百科
Snippet: 2005年4月9日，王储查尔斯与卡米拉在温莎市政厅举行世俗婚礼。随后，卡米拉别被  女王 ... 查尔斯出访美国。 威尔士亲王查尔斯的第二任妻子卡米拉的官方头衔全称.

Title: 查尔斯·曼森- 维基百科，自由的百科全书
Snippet: 曼森入狱期间，Rosalie生下了他们的孩子，小查尔斯?曼森。入狱的第一年中，曼森  时常得到妻子和母亲的探视——她们那时住在一起。在1957年3月，当他妻子不再来  ?...

Title: 查尔斯·林白_百度百科
Snippet: 林白的妻子是作家安妮·默洛·林白，他们在1929年结婚，共有六名子女，其中长子  查尔斯·林白三世在1932年新泽西家中被绑架，并遭撕票。最初凶手要求五万美金?...

Title: 查爾斯(威爾斯親王) - 维基百科，自由的百科全书
Snippet: 值得一提的是，查爾斯是第一位能說威爾士語的威爾士親王。為此， ... 他現在的妻子  ，卡米拉·珊德在查爾斯婚前也傳出過緋聞，但在1970年代末傳出兩人分手的消息。

Title: 查尔斯王子_百度百科
Snippet: 值得一提的是，查尔斯是第一位能说威尔士语的威尔士亲王。为此， ... 他的现任妻子  ，卡米拉·珊德在查尔斯婚前也传出过绯闻，但在1970年代末传出两人分手的消息。

Title: 康沃尔公爵夫人和查尔斯王子是什么关系？ - 英国王室百科
Snippet: 2011年4月22日 ... 康沃尔公爵夫人卡米拉是威尔士亲王查尔斯王子的第二任妻子。 ... 伊丽莎白二世  女王的丈夫是谁？ 温莎王朝你了解吗？ 英国王室家谱 · 英国王室?...

Title: 戴安娜王妃_百度百科
Snippet: 戴安娜（Diana Spencer）王妃1961年7月1日出生于英国诺福克，是爱德华斯宾塞  伯爵的小女儿，1981年7月29日与威尔士亲王查尔斯结婚。她是查尔斯的第一任妻子  ，?...

Title: 查尔斯·达尔文- 维基百科，自由的百科全书
Snippet: 查尔斯·罗伯特·达尔文，FRS（英语：Charles Robert Darwin，1809年2月12 .... 不過  後來卻被他妻子的弟弟約書亞·威治伍德二世所說服，同意他兒子參加航程。

Title: 收藏家查尔斯萨奇宣布与妻子离婚_收藏资讯_华夏收藏网
Snippet: 2013年7月9日 ... 收藏家查尔斯萨奇宣布与妻子离婚” 据媒体报道，自从萨奇对妻子锁喉的照片 ... 馆藏  玉器观摩学习（一） · 案例浅析：400碧玺变玻璃，有猫腻的是谁？

Title: 查尔斯·泰兹·罗素- 维基百科，自由的百科全书
Snippet: 在幼年时期，查尔斯是他父亲在匹兹堡裁缝店的帮手。12岁那年他就已经开始跟 ....   罗素妻子，玛利亚·罗素1938年8月因霍奇金氏病于佛罗里达州圣彼得斯堡去世。


?. 长篇小说《林海雪原》的作者是谁

Title: 林海雪原_百度百科
Snippet: 这是作家后来创作《林海雪原》的重要生活基础与现实题材。1950年秋，曲波因重伤  转业到地方工作，转入工业战线。1952年春，他以顽强的毅力写作长篇小说《林海?...

Title: 《林海雪原》人物原型忆：解放军也有土匪习气_历史频道_凤凰网
Snippet: 5 days ago ... 国共战争史上有威虎山剿匪的史实记录，有根据战斗经过创作的长篇小说《林海雪原》  ，作者曲波已在国家一机部任职。“文革”前夕拍摄过故事片《林海?...

Title: 曲波_曲波[作家]_互动百科
Snippet: 这是作家后来创作《林海雪原》的重要生活基础。1950年曲波因重伤转业到地方工作，  1952年他以顽强的毅力写作长篇小说《林海雪原》，1956年8月完成了40万字的?...

Title: 江苏卫视《一站到底》的1000道题（含答案）
Snippet: 2013年6月13日 ... 临川四梦”的作者是我国伟大戏剧家汤显祖，其中《牡丹亭》又被称为什么？（《还魂记》  ）。 24. ..... 长篇小说《野火春风斗古城》的作者是谁？（李英儒）.

Title: 林海雪原(豆瓣)
Snippet: 林海雪原. 副标题: 中国当代长篇小说藏本 作者: 曲波 出版社: 人民文学出版社 ... · ·. 《  林海雪原》讲的是解放战争初期，国民党军队的主要兵力压向东北，形成了敌我双方?...

Title: 备战2013高考：语文文学常识重要考点汇总（6）_高考语文复习资料_ ...
Snippet: 2013年2月13日 ... 长篇通讯《谁是最可爱的人》的作者是魏巍，以陕北“信天游”形式写成的长篇叙事诗《  王贵与李香香》的作者是李季。 22．长篇小说《林海雪原》、《青春之?...

Title: 【随感杂谈】 读小说之闲话
Snippet: 和许多同龄人一样，我的第一部长篇小说是《林海雪原》，记得当时对小白鸽白茹 ... 这  部小说不知道是谁译的，那翻译的语言之优雅传神，让我从此记住了这位小说?...

Title: 《林海雪原》-中文百科在线
Snippet: 2010年12月4日 ... 讲述的是小说作者亲身经历的一件往事。书里所写的是有关于1946 ... 长篇小说《  林海雪原》是作家根据自己的亲身经历创作的。作家曲波曾担任中国?...

Title: 《林海雪原》人物原型憶：解放軍也有土匪習氣_歷史頻道_鳳凰網
Snippet: 5 天前 ... 國共戰爭史上有威虎山剿匪的史實記錄，有根據戰鬥經過創作的長篇小說《林海雪原》  ，作者曲波已在國家一機部任職。“文革”前夕拍攝過故事片《林海?...

Title: 《朝内166人文文库·中国当代长篇小说：林海雪原》(曲波)【摘要书评试读 ...
Snippet: 作者简介. 曲波，1923-2002，山东龙口人。中共党员。毕业于胶东公学抗大。 ... 著有  长篇小说《林海雪原》《桥隆飙》《山呼海啸》《戎萼碑》短篇小说《热处理》，散文《观画思  ?...


?. 1994年谁是土库曼斯坦的总统

Title: 土库曼斯坦已故总统尼亚佐夫
Snippet: １９９４年１月，土库曼斯坦举行全民公决，决定将尼亚佐夫的总统任期延长 ... 尼亚佐  夫爱好诗歌、哲学、历史和音乐，是土库曼斯坦科学院院士、世界土库曼人人文协会?...

Title: 土库曼斯坦总统_互动百科
Snippet: 1994年1月，土库曼斯坦举行全民公决，决定将尼亚佐夫的总统任期延长至2002 ...   尼亚佐夫爱好诗歌、哲学、历史和音乐，是土库曼斯坦科学院院士、世界土库曼人?...

Title: 土库曼斯坦政治- 维基百科，自由的百科全书
Snippet: 土库曼斯坦前身為蘇聯其中一個中亞地區加盟共和國，在1991年蘇聯瓦解成立獨立   ... 但他在國內大搞個人崇拜，他在1994年起修改該國的憲法，逐步將自己行使總統?...

Title: 尼亚佐夫_百度百科
Snippet: 按照土库曼斯坦宪法规定，1992年6月在全国举行了第二次总统选举，尼亚佐夫获得  了99.5%的选票，再次当选为土库曼斯坦总统。1994年1月，土库曼斯坦举行全民?...

Title: 土库曼斯坦- 维基百科，自由的百科全书
Snippet: 土庫曼斯坦的前身為蘇聯的一個中亞地區加盟共和國，在1991年蘇聯瓦解后成为 ...   他在國內推行個人崇拜，他在1994年起修改該國的憲法，逐步將自己行使的總統?...

Title: 土庫曼斯坦已故總統尼亞佐夫
Snippet: １９９４年１月，土庫曼斯坦舉行全民公決，決定將尼亞佐夫的總統任期延長 ... 尼亞佐  夫愛好詩歌、哲學、歷史和音樂，是土庫曼斯坦科學院院士、世界土庫曼人人文協會?...

Title: 萨帕尔穆拉特·阿塔耶维奇·尼亚佐夫_百度百科
Snippet: 按照土库曼斯坦宪法规定，1992年6月在全国举行了第二次总统选举，尼亚佐夫获得  了99.5%的选票，再次当选为土库曼斯坦总统。1994年1月，土库曼斯坦举行全民?...

Title: 土库曼斯坦
Snippet: 国名：土库曼斯坦(Turkmenistan). 国旗日：２月１９日. 独立日：１０月２７日（１９９１年）.   中立日：１２月１２日. 国旗：呈横长方形，长与宽之比约为５∶３。旗地为深绿色，靠?...

Title: 土库曼斯坦地图与土库曼斯坦概况
Snippet: 【国家元首】 总统萨帕尔穆拉特·尼亚佐夫（Сапармурат Ниязов）,1990年10月27日   ..... 【旅游业】 制订了旅游业发展规划，颁布了“旅游法”。1994年成立“土库曼斯坦国家  ?...

Title: 土库曼斯坦：引人注目地成为永久中立国
Snippet: 1995年是土库曼斯坦白1991年10月取得独立后的第5年。 ... 尼亚佐夫总统根据本国  国情对政治体制改革采取渐进的方针，力主“有计划、有步骤地革新原有的权力?...


?. 《星尘》这首歌是谁写的

Title: 星尘_百度百科
Snippet: 添加义项 这是一个多义词，请在下列义项中选择浏览 ... 翻译解释：《星尘》的原文为  stardust，star是星星，dust是尘土，直接翻译过来是星星的尘土，因为剧情中的线索，  ?...

Title: 面对首尾两首价值观截然不同的歌曲，我实在欣赏不来小克的三观 ...
Snippet: 2013年8月1日 ... 因为这首歌主要还是写两个角色之间的关系，看似对立，却又相互依存， .... 我之所以  這樣說，是《星塵》站於「神」的角度去落筆，這在香港樂壇，以我所?...

Title: 威利·纳尔逊_百度百科
Snippet: 从1957年录制演艺生涯中第一支单曲“昨日的酒”（Yesterday Wine）至今，威利的录  歌和写歌生涯长达40余年。他创作的经典乡村歌曲，有“疯狂”（Crazy）和“?...

Title: 宇宙浩渺，神為之奪(评论: 星尘)
Snippet: 2010年8月4日 ... 头两首歌全没听出味儿来，第三首《轻轻叹》倒是迅速把我迷住了，只觉“轻轻叹”这几  个字发声好不美妙，单只为这几个字听这首歌都值的。于是把这首?...

Title: Rule The World_百度百科
Snippet: 与此同时，这首歌也是华纳电影公司2007年出品的电影《星尘》的片尾曲，电影由马修  沃恩执导，由克莱尔·丹尼斯、罗伯特·德尼罗和米歇尔·法伊弗等人主演.

Title: 港乐，夕阳无限好(评论: 夜话港乐)
Snippet: 2013年1月7日 ... 于是，我就通过乐评，来给大家介绍陈奕迅的其他歌曲，然后在介绍的过程里，再提到  这首歌是谁写的，他还给谁写过什么样的歌……慢慢的、渐进式?...

Title: 如何评价陈奕迅2013 年的粤语专辑《The Key》？ - 知乎
Snippet: 2013年7月23日 ... 而《阿猫阿狗》则是写那些被统称为“人民”的千千万万的普通人，他们面容 ... 这生  余业永在”；《床头床尾》是整张专辑里情绪最单纯的一首歌，这首歌?...

Title: 水堂俊秀_新浪博客
Snippet: 题目来自大塚爱《星尘》，很寂静的曲子，歌词也很美丽~虽然我更喜欢听伴奏~ ... 女  主唱的英文咬字非常喜欢，PV也非常非常好看很喜欢~最近几乎都在用这首歌洗脑~.

Title: 陈奕迅《The Key》：打开心房的钥匙
Snippet: 2013年8月10日 ... 《任我行》是《The Key》的第二主打，似乎唱片公司也认定了这首歌具备流行的 ... 《任  我行》和金庸的《笑傲江湖》没有关系，写的是一个人在成长过程中的?...

Title: Stardust - 星塵之一@ 吉他情愁路- 秋草夏人的深溪#2 :: 痞客邦PIXNET ::
Snippet: 2013年2月2日 ... 先說抱歉，向誤以為這是《星塵傳奇》(Stardust 2007 港名魔幻星塵) 電影由 ... 這裡的  曲子是美國1927 年的名曲"Stardust" 《星塵》(原作"Star Dust")?...


?. 《孙子》的作者别名是什么

Title: 孙子兵法- 维基百科，自由的百科全书
Snippet: 有個別觀點曾認為今本《孫子》應是戰國中晚期孫臏及其弟子的作品，但是銀雀山出土  的漢簡（同時在西漢墓葬中出土《孫子兵法》、《孫臏兵法》各一部）已基本否定此說。

Title: 《孙子兵法》_互动百科
Snippet: 中文名： 《孙子兵法》, 作者： 孙武. 别名： 《孙子》、《孙武兵法》、《吴孙子兵法》, 类别：   兵书. 语种： 中文, 简介： 兵家经典著作. 其他： 春秋末年著名军事家孙武所著?...

Title: 孙子_百度百科
Snippet: 孙子（约公元前535－？）即孙武，名武，字长卿，汉族，中国春秋时期齐国乐安（今  山东惠民，一说博兴，或说广饶）人，是吴国将领。著名军事家、政治家。曾率领吴国?...

Title: 書名論正
Snippet: 《孫子兵法》，它的原名應該是什麼？這是一個歷來鮮見 .... 退一步說，即便這個《孫子  》是指孫武與孫臏的兵法之泛稱，它仍然是代指孫武的兵法的一種稱謂。）此後〈隋書．

Title: 孙子兵法_百度百科
Snippet: 作者为春秋吴国将军孙武，字长卿，汉族，中国春秋时期齐国乐安（今山东惠民，一 ....   的第一人是法国天主教耶稣会传教士约瑟夫·J·阿米欧---（中文名：钱德明，别名钱遵?...

Title: 中国著名的预测后世3000年的《推背图》图文详解（转载） – 【人人分享 ...
Snippet: 在此之前，太史监候王思辩上表称《五曹》、《孙子》十部算术书有很多缺点。李淳风又  与 ... 袁天罡，别名叫袁天纲，唐朝隐士，是唐代易学数术高人。具体生平事迹及生卒?...

Title: 叹花_百度百科
Snippet: 作者以自己寻春失时，致狂风催花，花落结子，暗喻自己与某位女性之间一段错过的  因缘，笔端带有无尽的感叹与 ... 注重军事，写下了不少军事论文，还曾注释《孙子》。

Title: 《孫子兵法》課程首三篇教學議題之研究
Snippet: 醫學領域的運用情形參見(1)楊善群，《孫子》. （台北市：知書房，2002 年4 月）， .....   當然這些只是作者本身教學運用的材料，. 有關《孫子兵法》的著作汗牛充棟，隨.

Title: 由老子到孙子--南怀瑾--成功网
Snippet: 由老子到孙子--南怀瑾. 作者：南怀瑾. 《老子》一书，原著不过五千言，可以说，几乎是  一字就涵盖一个观念的好文章，一句就涵盖有三玄三要的妙义。 它告诉了我们许多?...

Title: 时空穿越者Deux Mondes，Les_电影库_网易娱乐
Snippet: 时空穿梭一直是人类不尽的幻想，也为电影带来了不竭的创作动力。在巴黎这个真实  的世界中，瑞米是个油画修复员，他害羞、谨慎、毫不起眼，他和妻子露赛尔有两个?...


?. “宝带桥”是谁建造的

Title: 宝带桥_百度百科
Snippet: 现在所见的宝带桥是明代正统年间重新修建的。清咸丰 .... 宝带桥的建造，同中国  历史上的漕运关系十分密切，江、浙一带，自古为鱼米之乡，历代帝王无不以此作.   漕运.

Title: 宝带桥名称的由来_百度知道
Snippet: 我们现在所见的宝带桥是明代正统年间重新修建的。 ... 主持建造，为筹措建桥资金，  王仲舒带头将自己身上的宝带捐出来，宝带桥之名由此而来。

Title: 苏州宝带桥_百度百科
Snippet: ... 桥命名为宝带桥。现在的宝带桥是明正统年间重建的，桥的南北两端原来各有一对  石狮子。 ... 宝带桥的建造同我国历史上的漕运关系十分密切，江、浙一. 苏州宝带桥.

Title: 根据习俗命名的桥_百度知道
Snippet: 宝带桥用坚硬素朴的金山石筑成，桥长316.8米，桥孔53孔，是我国现存的古代桥梁  中，最长的一座多孔石桥。我们现在所见的宝带桥是明代正统年间?...

Title: 三次被“拆”的宝带桥飒爽英姿 喜迎祖国60华诞--苏南频道--人民网
Snippet: 2009年9月7日 ... 据史料记载，苏州宝带桥，又名小长桥，始建于唐代816-819年（元和十一年至十四年  ），由当时的苏州刺史王仲舒主持建造，为筹措建桥资金，王刺史?...

Title: 寻访宝带桥
Snippet: 2013年3月23日 ... 他去世以后，南方很多地方建祠祭祀。长桥的另一头，就有“澹台子祠”，是今恢复的。  过桥可见一碑亭，碑的正面是宝带桥重修记，背面是孔子的图像和?...

Title: 城南打造运河风光带特色滨水区宝带桥畔开建-名城新闻网
Snippet: 2012年10月13日 ... 本报讯作为“两河一江”吴中段城市环境建设工程的重点，宝带桥所处的澹台湖 ... 澹台  湖地区北侧规划建造一座跨越京杭运河的人行景观桥，用于沟通?...

Title: 【关注文化遗产】寻访苏州[宝带桥] - 新华博客- News Blog
Snippet: 2013年5月31日 ... 说也惭愧，这么多年从未真正到过[宝带桥]，以前只是从边上的路上经过时看到过这  座古桥。0526早上出门，去 .... 谁是林彪唯一没有战胜的强悍对手?...

Title: 第七课辉煌的隋唐文化（一）
Snippet: 2010年8月27日 ... 设计并主持建造这座桥的是隋朝的一名普通工匠。想一想，他是谁呢？ 在我国古代四  大发明中，有一项发明被誉为“文明之母”。你能说出是哪一项吗？

Title: 苏州宝带桥- 到到网
Snippet: 中国十大名桥之一的宝带桥位于苏州市东南。宝带桥始建于公元816年，拥有317米  长的宝带桥是一个多孔的石拱桥。宝带桥名字的由来是因为建设宝带桥桥时缺少?...


?. 2008年北京奥运会开幕式和闭幕式的总导演是谁

Title: 北京奥运会闭幕式总导演陈维亚谈闭幕式--强国社区--人民网
Snippet: 2008年8月25日 ... 编者按8月25日17时，北京奥运会闭幕式执行总导演陈维亚做客人民网强国 ... 闭幕  式的排练和开幕式一样，进行了将近一年多的艰苦的创作和排练。

Title: 开闭幕式运营中心_百度百科
Snippet: 北京奥运会开闭幕式运营中心是北京奥组委批准成立的独立法人事业单位，于2007  年1月15日正式成立。它的任务是组织、实施2008年北京奥运会开闭幕式和2008年?...

Title: 北京2008年奥运会闭幕式_互动百科
Snippet: 2008年8月17日 ... 北京2008年奥运会闭幕式：2008年8月24日晚上，北京2008第二十九届奥运会将在  国家体育场“鸟巢”落下帷幕，由于开幕式的巨大成功，人们对?...

Title: 北京奥运会开闭幕式创作团队_百度百科
Snippet: 北京奥运会开闭幕式创作团队包括开、闭幕式总导演张艺谋，中国人民解放军总政  歌舞 ... 2003年3月，北京奥组委面向全球启动了2008年奥运会开、闭幕式创意方案  的?...

Title: 揭张艺谋是如何获得奥运会开闭幕式总导演—在线播放—优酷网，视频 ...
Snippet: 揭张艺谋是如何获得奥运会开闭幕式总导演距离2008年8月8日北京奥运会开幕式还  剩下不到四天的时间，大家都 ... 每个人都没有资格批评张艺谋你以为你是谁啊?

Title: 张继钢_百度百科
Snippet: 毕业院校：, 北京舞蹈学院编导系. 主要成就：, 现任武警部队政治部副主任. 曾任总政  歌舞团团长. 2008北京奥运会开闭幕式副总导演. 2008年北京残奥会开闭幕式总?...

Title: 西安名人--北京奥运会开闭幕式总导演张艺谋-搜狐2008奥运
Snippet: 2008年6月22日 ... 2006年4月16日上午，北京奥组委向第29届奥运会开闭幕式第一批主要工作人员  颁发聘书，张艺谋任总导演，张继钢、陈维亚任副总导演?...

Title: 2008年北京奥运会_百度百科
Snippet: 开闭幕详见相关词条。 词条图册更多图册. 参考资料. 1． 中国体育代表团2008 ．凤凰  网[引用日期2013-01-1]． 开放分类：?...

Title: [视频]《揭密北京奥运会开幕式上的“字模”》_CCTV.com_中国中央电视台
Snippet: 2008年10月17日 ... 这是2008年8月8日北京奥运会开幕式表演中高潮迭起的一幕。 ... 来到北京军区某红  军团驻地，带队的正是北京奥运会开闭幕式副总导演张继刚。

Title: 2008北京奥运开闭幕式四大畅想- 豆豆豆的个人空间- 世界经理人管家 ...
Snippet: 2005年3月2日 ... 3月1日上午10时，北京奥组委执行副主席蒋效愚宣布，北京2008年奥运会开闭幕式  创意方案征集活动正式启动。此次北京奥运会开闭幕式征集方案?...


?. 谁是第一个中国国家总理

Title: 中华人民共和国国务院副总理- 维基百科，自由的百科全书
Snippet: 中华人民共和国国务院副总理是中华人民共和国国务院的重要组成人员，也是国务院  常务会议 ... 总理：周恩来（1949年10月1日中央人民政府委员会第一次会议决定）；.

Title: 新中国成立以来的历届总理是谁？
Snippet: 2011年1月10日 ... 新中国自1954年颁布第一部社会主义宪法以来的国家总理名单：. 第一届国务院总理  ：周恩来（1954年9月-1959年4月）. 第二届国务院总理：?...

Title: 中华人民共和国国务院总理- 维基百科，自由的百科全书
Snippet: 中华人民共和国国务院总理是中华人民共和国国务院（1954年行宪后的中央人民 ...   在中华人民共和国公务员体制中，国务院总理属於行政级别最高的第一级，为国家?...

Title: 揭秘：谁是李克强的政治带路人？ - 阿波罗新闻网
Snippet: 2012年8月6日 ... 外界普遍认为，李克强是接任温家宝成为下一任中共国务院总理呼声最高的 ... 法官  丹宁勋爵的名著《法律的正常程序》一版再版，李克强是第一译者。

Title: 新华国际时评：中国总理首访四个关键字- 高层动态- 新华网
Snippet: 2013年5月29日 ... ５月１９日至２７日，中国国务院总理李克强对印度、巴基斯坦、瑞士和德国进行正式  访问。这是李克强就任 ... 第一个关键字是互信的“信”。印度是李克强?...

Title: 两会常识：国家主席能管总理吗？-搜狐评论
Snippet: 其实，国家主席与国务院总理的属性是不一样的：国家主席本身就是一个国家机构，  国务院总理却是一个国家机构里面的一个人，是国务院这个国家机构的首脑，是其?...

Title: 李克强在瑞士《新苏黎世报》发表署名文章- 高层动态- 新华网
Snippet: 2013年5月23日 ... 瑞士是我就任中国国务院总理后出访的第一个欧洲国家。在中国文化 ... 这几件都是  中国对外开放具有标志性的大事，也都与瑞士有关。 其一是推动中?...

Title: 瑞士驻华大使杜哲巍谈中瑞关系_中国访谈_中国网
Snippet: 2013年7月5日 ... 简介：瑞士是最早承认新中国的西方国家之一，也是李克强就任国务院总理后出访的  第一个欧洲国家，瑞士驻华大使杜哲巍先生，就李克强总理访问?...

Title: "用改革最大红利让广大人民受益"--记中国国务院总理李克强- 2013 ...
Snippet: 2013年3月17日 ... 新华网北京３月１６日电３月１５日，５７岁的李克强就任国务院总理。此时的中国已成为  全球第二大经济体。李克强是第一位出生在新中国、并同时拥有?...

Title: 关注李克强外交首秀：中国总理首访四个关键字--理论--人民网
Snippet: 2013年5月30日 ... 盘点此访，四个关键字呼之欲出。 5月20日，国务院总理李克强在新德里与印度总理  辛格举行会谈。新华社记者马占成摄. 第一个关键字是互信的“信”。


?. 《西厢记》的作者是谁

Title: 《西厢记》杂剧的作者是谁？
Snippet: 《西厢记》杂剧的作者是谁？ ... 描写崔莺莺与张珙的恋爱故事的元代杂剧《西厢记》，  全名《崔莺莺待月西厢记》，取材于唐代元的传奇小说《会真记》（又名《莺莺传》），是?...

Title: 《西厢记》的作者是谁于哪个时期的作品？_古典诗词_天涯问答
Snippet: 王实甫《西厢记》大约写于元代元贞、大德年间（1295～1307）是王实甫的代表作。 《  西厢记》全名《崔莺莺待月西厢记》。作者王实甫，元代著名杂剧作家，大都（今北京市）  ?...

Title: 西厢记_百度百科
Snippet: 他一生写作了14部剧本，《西厢记》大约写于元贞、大德年间是他的代表作。 ... 元稹曾  作《莺莺传》，其中张生对崔莺莺始乱终弃，而作者却以借张生之口，反诬莺莺为“?...

Title: 西厢记的作者是谁？_天涯问答
Snippet: 西厢记的作者是王实甫. ... 他一生写作了14种剧本，《西厢记》大约写于元贞、大德  年间（1295～1307）是他的代表作。这个剧一上舞台就惊倒四座，博得男女青年的?...

Title: 《西厢记》_《西厢记》[元杂剧]_互动百科
Snippet: 语种： 中文, 简介： 《西厢记》是我国家喻户晓的古典戏剧名著，它叙述了书生 ...... 张生  是忠于爱情的，那么拆散他们婚姻的又是谁呢这，再次闪耀出作者的犀利目光。

Title: 宣传杀、淫、盗的《水浒传》《西厢记》《会真记》的作者遭受严重果报_阳光 ...
Snippet: 2011年3月2日 ... 譬如，中国四大名著之一《水浒传》的作者施耐庵，他笔下的一百零八好汉， ... 还有《  西厢记》的作者王实甫，善于描写男女偷情私会的情形，导致许多人?...

Title: 西厢记- 维基百科，自由的百科全书
Snippet: 这本《西厢记》将内容大为增加，加入许多人物和场景，最后结局改为张生和莺莺不顾   ... 这部剧本作者说法不一，有人说是关汉卿所作，也有人说是关作王续，或王作关?...

Title: 元曲中的花间美人《西厢记》_新闻中心_光明网
Snippet: 一是《西厢记》的风情之美,表现为对生命张力的情感认同。《西厢记》对 ... 研炼艳冶”  一派。 《西厢记》的雅,体现的是作者对普通民众艺术需要、艺术理解力的肯定与尊重。

Title: 谁是《水浒传》的作者——中国文学网
Snippet: 谁是《水浒传》的作者,这是一个谜团。 ..... 在统治阶级的立场上说话,视《水浒传》、《  红楼梦》、《西厢记》等名著为洪水猛兽,对作品的作者更是刻骨仇恨,极尽谩骂之能事。

Title: 临去秋波那一转——醉读《西厢记》
Snippet: 2010年6月22日 ... 或许我们在“草桥梦醒”一折里能找到他模糊的影迹，作者借张生之口唱出 ... 爱情皆是  最美丽的歌咏主题，这恐怕是《西厢记》久演不衰的主要原因。


?. 《西厢记》是谁的作品

Title: 《西厢记》_《西厢记》[元杂剧]_互动百科
Snippet: 语种： 中文, 简介： 《西厢记》是我国家喻户晓的古典戏剧名著，它叙述了书生张君瑞 ...   1 简介: 2 作者简介: 3 故事起源: 4 作品赏析: 5 人物赏析: 6 剧本评价: 7 艺术成就?...

Title: 西厢记_百度百科
Snippet: 同时，《西厢记》在中国戏剧史上首度成功刻画了爱情心理，是戏剧史上一部直接描写  爱情心理的作品。其对矛盾冲突的设计也足以示范后人。全剧以莺莺、张生、红娘与?...

Title: 西厢记- 维基百科，自由的百科全书
Snippet: 《西厢记》是在中国流传很广，家喻户晓的爱情故事。最早取材于唐代诗人元稹所写的  传奇《会真记》（又名《莺莺传》），后被元代王实甫改编为杂剧（此前有宋人趙令畤以此  ?...

Title: 《西厢记》杂剧的作者是谁？
Snippet: 《西厢记》杂剧的作者是谁？ ... 描写崔莺莺与张珙的恋爱故事的元代杂剧《西厢记》，  全名《崔莺莺待月西厢记》，取材于唐代元的传奇小说《会真记》（又名《莺莺传》），是?...

Title: 《西厢记》的作者是谁于哪个时期的作品？_古典诗词_天涯问答
Snippet: 王实甫《西厢记》大约写于元代元贞、大德年间（1295～1307）是王实甫的代表作。 《  西厢记》全名《崔莺莺待月西厢记》。作者王实甫，元代著名杂剧作家，大都（今北京市）  ?...

Title: 《西厢记》中的美色鉴赏家是谁【文化散论】-凯迪社区
Snippet: 可以说，王实甫就是一位美色的鉴赏家，包括他在《西厢记》中所牵引出来 ... 在作品中  ，崔莺莺一度蔑视过众和尚哪些贪婪而又充满肉欲的目光，这时?...

Title: 西厢记的作者是谁？_天涯问答
Snippet: 西厢记的作者是王实甫. ... 他一生写作了14种剧本，《西厢记》大约写于元贞、大德  年间（1295～1307）是他的代表作。这个剧一上舞台就惊倒四座，博得男女青年的?...

Title: 中国文学史第三章王实甫的《西厢记》
Snippet: 中国文学史第三章王实甫的《西厢记》 大约在关汉卿进行频繁创作活动的同时，元代  剧坛又绽开了一树奇葩，这就是王实甫的杂剧《西厢记》。如果说，关汉卿剧作以酣畅  ?...

Title: 引用《西厢记》作品简介,《西厢记》作者简介,《西厢记》动幻影集和组图 ...
Snippet: 2009年11月2日 ... 【作品简介】. 《西厢记》全名《崔莺莺待月西厢记》。作者王实甫，元代著名杂剧作家，  大都（今北京市）人。他一生写作了14种剧本，《西厢记》大约写于元?...

Title: 章培恒骆玉明-->中国文学史-->第三节王实甫与《西厢记》
Snippet: 如果以单部作品而论，《西厢记》可以说是元杂剧中影响最大的。 ... 但同时它也有一个  显著的特点，是作者很少从观念的冲突上着笔，而是直接切入生活本身，来描绘?...


?. 《幸运52》的主持人是谁

Title: 幸运52_百度百科
Snippet: 总的来说，新版《幸运52》是以原来节目结构与核心元素为平台，进一步提升各方面 ...   不错，如果当初我没有上广院播音系，肯定不会能有今天，做《幸运52》的主持人。

Title: 从《幸运52》到《梦想中国》:李咏是这样炼成的
Snippet: 2004年12月3日 ... 究竟是谁成就了李咏？ 李咏究竟 ... 最初操持《幸运52》的三位编导，为这档新节目“网  ”了一大堆主持人，到最后也没“罗”住一个，便就近让李咏替补。

Title: 综艺大观
Snippet: ... 《综艺大观》将与《幸运52》倾力合作，曹颍、李咏与您相约银屏，最幸运的人是谁，  请 ... 个栏目的“中心人物”——《综艺大观》导演孙滨、《幸运52》主持人李咏应邀于5月  7?...

Title: 李咏的老婆是谁?李咏个人资料_新婚生活_奇丽女性网
Snippet: 2013年2月20日 ... 李咏是中央电视台着名节目主持人，新疆乌鲁木齐人。主持节目有《幸运52》、《非常6  +1》、《梦想中国》、《咏乐汇》等。曾多次主持中央电视台的春节?...

Title: 李咏的老婆是谁_李咏个人资料_李咏简历_李咏_ent.yxlady.com-伊秀 ...
Snippet: 李咏是原中央电视台著名节目主持人，新疆乌鲁木齐人。主持节目有《幸运52》、《非常  6+1》、《梦想中国》、《咏乐汇》等。曾多次主持中央电视台的春节联欢晚会。1968?...

Title: 《向幸福出发》主持人简介-综艺台-中国网络电视台
Snippet: 2011年4月1日 ... 李咏是中央电视台著名节目主持人，新疆乌鲁木齐人。主持节目有《幸运52》、《非常6  +1》、《梦想中国》、《咏乐汇》、《欢乐英雄》等。曾多次主持中央?...

Title: 中央电视台《幸运52》_影音娱乐_新浪网
Snippet: 带着你的家人来《幸运52》参加节目，和著名主持人李咏来一次智慧交锋！和你的  亲朋好友并肩作战，用实力证明你们是最聪明的“家庭”组合！[详细介绍][发表评论]?...

Title: 中国最知名的十位主持人是谁？ - 精华知识- 搜搜问问
Snippet: 李咏是中央电视台著名节目主持人，新疆乌鲁木齐人。主持节目有《幸运52》、《非常6  +1》、《梦想中国》、《咏乐汇》等。曾多次主持中央电视台的春节联欢晚会。李咏1968?...

Title: CCTV-模特大赛主持人投票
Snippet: 是谁在北京绚彩、瑰丽却又竞争激烈的舞台等待他们共同演绎美丽的神话？是御用的  佳明、雨霏，是当红的李咏、小丫，还是新晋的高博、欧阳夏丹？每个主持人都?...

Title: 《幸运52》栏目组：主持人李咏离职纯属谣言--传媒--人民网
Snippet: 2007年9月18日 ... 某网络有关主持人李咏“从央视离职”一事的报道纯属谣言，主持人李咏目前正在积极  准备明天（2007年9月19日）进行的《幸运52》节目录像，录像的各?...


?. 称为“数学之神”的科学家是谁

Title: 行测常识1000题你掌握了吗？？ – 【人人分享-人人网】
Snippet: 称为“数学之神”的科学家是： 阿基米德. 9. “薛涛笺”产生于哪个朝代?唐. 10. .... 民有、  民治、民享”的纲领性口号是谁提出来的? 林肯. 97. 下列哪位航海家找到了航海中?...

Title: 公务员之常识大全- 找工作- 小木虫- 学术科研第一站
Snippet: 称为“数学之神”的科学家是： 阿基米德 “薛涛笺”产生于哪个朝代？唐 ... 民有、民治、  民享”的纲领性口号是谁提出来的？ 林肯 下列哪位航海家找到了?...

Title: 1000条公务员常识.绝对全
Snippet: 妙应寺白塔. 8. 称为“数学之神”的科学家是： 阿基米德. 9. “薛涛笺”产生于哪个朝代？  唐 .... 被称为太阳王的国王是谁？路易十四. 48. 晋与十六国时期，谁曾建立前燕、后  ?...

Title: 华罗庚_百度百科
Snippet: 三位大名鼎鼎的科学家赴美考察。9月，华罗庚和李政道，朱光亚，唐敖庆等离开上海   ..... 与王元教授合作在近代数论方法应用研究方面获重要成果，被称为“华-王方法”。

Title: 公务员考试大全
Snippet: 而建？尼伯尔 称为“数学之神”的科学家是：阿基米德 “薛涛笺”产生于哪个朝代？ ...   民有、民治、民享”的纲领性口号是谁提出来的？林肯 下列哪位航海家找到了航海中?...

Title: 336醉西游答题器
Snippet: 是. 13. 火腿中有“南腿”之称的是？ 金华火腿. 14. “六一居士”是谁的别号？ 欧阳修.   15. “隔着门缝看人” .... 称为“数学之神”的科学家是：. 阿基米德. 72. “薛涛笺”产生于?...

Title: 1000条公务员常识
Snippet: 称为“数学之神”的科学家是： 阿基米德. “薛涛笺”产生于哪个朝代？唐 ..... 飞鸟尽，良  弓藏，狡兔死，走狗烹”是谁最先说的？范蠡. 汉朝建立后的第一个淮南王是：英布.

Title: 1358条公务员常识(绝对全)_百度文库
Snippet: 以下哪座塔是元大都保留至今的重要标志，也是我国现存最早最大的一座藏式佛塔。  妙应寺白塔8. 称为“数学之神”的科学家是： 阿基米德9. “薛涛笺”产生于哪个朝代？

Title: 最全1000条公务员常识(人人必背)
Snippet: 哥本哈根被称为“老人国”的星系是哪一星系？ ... 上以下哪座塔是元大都保留至今的  重要标志，也是我称为“数学之神”的科学家是： 阿基米德“薛涛笺”产生于哪个朝代？

Title: 公务员常识汇总++最新公务员考试常识900题(推荐)_百度文库
Snippet: 以下哪座塔是元大都保留至今的重要标志，也是我国现存最早最大的一座藏式佛塔。  妙应寺白塔8. 称为“数学之神”的科学家是： 阿基米德9. “薛涛笺”产生于哪个朝代？


?. “初出茅庐”中茅庐的本意指谁的住处

Title: 忘仙最新题库答案字母C到D篇_忘仙ol琵琶网官网
Snippet: 2013年5月25日 ... 传说中文字是谁发明的? 答：仓颉. 吃海鲜最好不要喝什么 ?答：啤酒. 初出茅庐"中的"  茅庐"本意是指谁的的住处? 答：诸葛亮. 川贝母属于? 答：野生药?...

Title: 绝代双骄答题器
Snippet: 问题 提醒：答题可以开启宝箱哦~！ 正确答案. （）

Title: 快玩绝代双骄答题器
Snippet: 问题, 答案. （）

Title: 多玩原创绝代双骄科举答题器- 多玩网页游戏webgame门户- http ...
Snippet: 初出茅庐”中的“茅庐”本意是指谁的的住处？ 诸葛亮. “初唐四杰”中有：, 王勃. “杵臼交”  多用来指不计身份而结交的朋友。这里的“杵臼”在古代是用来做?...

Title: 语文基础训练
Snippet: 能算是脑袋吗！”问：安徒生答话的言外之意是讽刺对方什么？（ ）A．思想苍白 B．  长相不好 C．说话粗俗 D． 生活奢侈. 7、“初出茅庐”中的“茅庐”本意是指谁的的住处？

Title: 国家公务员考试行测常识判断大全40000题及答案（4）
Snippet: 2013年8月12日 ... 初出茅庐”中的“茅庐”本意是指谁的的住处？->诸葛亮. 下列鱼中，对水中的氧气含量  要求最高的是：->海水热带鱼. 大汶口文化遗址在我国的：->山东.

Title: 语文(文学)类智力竞赛题荟萃
Snippet: 14、“初出茅庐”中的“茅庐”本意是指谁的的住处? A、刘备B、诸葛亮C、司马光D、  司马迁(B). 15、李清照的《如梦令》里的“绿肥红瘦”是描写什么季节的景象? A、晚春B  、?...

Title: 独孤求败答题器_52pk独孤求败推荐专题_dgqb.52pk.com
Snippet: 诸葛亮“初出茅庐”中的“茅庐”本意是指谁的住处？ 司马迁“史圣”指的是谁？ 武则天  中国第一个女皇帝是？ 谁家新燕啄春泥古诗名句“几处早莺争暖树”的下句是？

Title: QQ御剑天涯每日答题答案攻略详解（三） - 第一应用
Snippet: 初出茅庐”中的茅庐本意是指谁的住处：诸葛亮. 阿诗玛是我国哪个民族塑造的艺术 ...   下列人士中谁不是“西汉两司马”之一：司马光. 被称为“诗史”的是：杜甫. 本篇：QQ御?...

Title: 行测题库：2013年安徽公务员考试行测常识(421-440） - 行测题库,安徽 ...
Snippet: 2013年4月8日 ... 初出茅庐”中的“茅庐”本意是指谁的的住处? 答;诸葛亮. 422.出纳填支票时将收款人  名称写错，则：. 答;这张支票作废. 423.除法律另有规定或合同另有?...


?. 金庸原名是什么

Title: 金庸_百度百科
Snippet: 金庸（1924年3月10日－），原名查良镛，浙江海宁人，是知名的武侠小说作家、新闻  学家、企业家、政治评论家、社会活动家，中国作家协会名誉副主席，《中华人民?...

Title: 金庸原名是什么？在北大获得什么博士学位？简历介绍_新闻大放送 ...
Snippet: 2013年6月5日 ... 北大中文系原系主任陈平原教授昨天向记者证实,金庸先生这几年确实在北大攻读  博士学位，导师是中央文史馆馆长、北大国学研究院院长、北大中文?...

Title: 金庸原名叫什么？ _文艺人物_文艺作品_影视_天涯问答
Snippet: 金庸，原名查良镛，1924年出生于浙江海宁的名门望族，家学渊源，祖上有“一门七  进士，叔侄五翰林”的荣耀。他自幼酷爱读书，并且笔耕不辍，是一名成功的报人、社会  ?...

Title: 侠客又变成金庸原名了？_萌江湖_18183手机游戏论坛_bbs.18183.com
Snippet: 5 days ago ... [综合讨论] 侠客又变成金庸原名了？ [复制链接] .... 你们是什么服的？到底是改成乱  起八糟名还是改回来了、我们app静等前辈答案啊！

Title: 金庸- 维基百科，自由的百科全书
Snippet: 金庸，原名查良鏞，大紫荊勳賢，OBE（Louis Cha Leung-yung，1924年3月10 ..... 明  清之交的名人查继佐是金庸先生的祖先之一，此人在《聊斋志异》与《觚胜雪莲》中有?...

Title: 金庸获北大博士挑战了谁金庸年龄身高原名查良镛(图)-搜狐滚动
Snippet: 2013年6月7日 ... 金庸获北大博士挑战了谁金庸年龄身高原名查良镛金庸笔下是武侠梦，点燃太 ...   皇位制度》，那么他在北大拿古代文学博士学位，论文写的是什么？

Title: 金庸在北大攻读博士被证实曾获港大剑桥等名誉博士- 新华教育- 新华网
Snippet: 2013年6月5日 ... 记者昨天从北大得到证实，金庸先生确实从2009年秋季学期开始在北大攻读 ... 张  北京大学博士研究生毕业证书的照片，而证书的主人正是查良镛（金庸原名）。 ... 继承  皇位制度》，那么他在北大拿古代文学博士学位，论文写的是什么？

Title: 曝光金庸先生北大博士毕业证_中国网教育|中国网
Snippet: 2013年6月7日... 大学博士研究生毕业证书的照片，而证书的主人正是查良镛（金庸原名）。 ... 继承  皇位制度》，那么他在北大拿古代文学博士学位，论文写的是什么？

Title: 金庸北大读博士获证实 网友好奇其如何修满学分--文史--人民网
Snippet: 2013年6月6日... 大学博士研究生毕业证书的照片，而证书的主人正是查良镛(金庸原名)。 ... 继承  皇位制度》，那么他在北大拿古代文学博士学位，论文写的是什么？

Title: 89岁金庸真在北大读博士--24小时滚动回顾-人民网
Snippet: 2013年6月6日 ... 金庸所获部分学术头衔□名誉博士香港大学1986年剑桥大学2005年苏州大学2007  年台湾 ... 了一张北京大学博士研究生毕业证书的照片，而证书的主人正是查良镛（  金庸原名）。 ... 最后，金庸先生在北大拿博士学位，论文写的是什么？


?. 第一个获得国际权威的杰西·欧文斯奖的中国人是谁

Title: 王军霞_百度百科
Snippet: 身为大连人的王军霞，1993年曾获得世界田径锦标赛3000米冠军，1996年亚特兰大  奥运会上收获5000米冠军、10000米亚军。她是中国第一个欧文斯奖获得者，被誉?...

Title: 王军霞：身披国旗享受欢呼成就永恒经典画面- 2008年第29届奥运会 ...
Snippet: 2006年12月25日 ... 王军霞，一个传奇的名字，中国田径史乃至体育史一个里程碑式的人物。 ... 第一个  获得国际权威田径大奖———杰西·欧文斯奖的中国人、亚洲人。

Title: 1936年柏林奥运会_百度百科
Snippet: 第11届夏季奥林匹克运动会即1936年柏林奥运会。1934年，在国际奥委会雅典会议  上决定，恢复部分古代奥运会旧制。规定运动会期间，从开幕日期至闭幕式止，?...

Title: 1.39版轻松对付奥运知识考官：问道-17173网络游戏专区
Snippet: 2008年6月8日 ... 第十一届柏林奥林匹克运动会上,美国黑人选手_______总共获得了4枚金牌,轰动了  世界体坛。杰西·欧文斯 15.国际奥委会要求,列入夏季奥运会比赛?...

Title: 胡安·安东尼奥·萨马兰奇_百度百科
Snippet: 胡安·安东尼奥·萨马兰奇（Juan Antonio Samaranch，1920.7.17－2010.4.21）侯爵，  西班牙人，国际奥委会终身名誉主席。他长期关心和支持中国的体育事业，?...

Title: 奥运知识竞猜试题和答案
Snippet: 6、最先出现在奥运会赛场上的亚洲人是谁？C. A、日本人嘉纳治五朗 B、中国人  刘长春 C、印度人诺·普理查德. 7、第一个主办夏季奥运会的亚洲城市是？A. A、日本  ?...

Title: 王军霞：中国第一位获奥运会长跑金牌的运动员_体育频道_新华网
Snippet: 2008年4月29日 ... 王军霞是中国优秀的长跑运动员，她以骄人的战绩赢得“东方神鹿”的 ... 图为1994年2  月1日，获得第14届杰西·欧文斯国际奖的王军霞与欧文斯遗孀露?...

Title: 武魂科举答题器：题目答案无碍自助查询_武魂官网综合攻略- 叶子猪武 ...
Snippet: 2013年4月20日 ... 叶子猪武魂官网综合攻略中的武魂科举答题器：题目答案无碍自助查询为广大武魂  玩家介绍了还在找武魂科举答题器？还在为科举题目答案而烦恼？

Title: 王军霞入选首批田联名人堂与巨星欧文斯等比肩_网易体育
Snippet: 2012年3月9日 ... 国际田联成立100周年之际，国际田联将首次设立名人堂，首批入选名人堂的有过往  的12位田坛巨星，中国女子中长跑名将王军霞有幸入选。

Title: 奥运知识问答- 疯狂的兔子的日志- 网易博客
Snippet: 1894年6月巴黎国际会议上通过了第一部由顾拜旦倡议和制定的奥林匹克章程。它  涉及奥林匹克运动的 ..... 第一个获欧文斯奖的中国人是谁？ 王军霞。 26．世界乒坛?...


?. 电视剧《新白娘子传奇》的主演叶童原名是什么

Title: 叶童_百度百科
Snippet: 叶童（Cecilia Yip），原名李思思，出生于香港，是香港电影及电视剧演员。 ... 电视  长篇连续剧集《新白娘子传奇》中的女版许仙则让更多内地观众认识了她，成功打开了  ?...

Title: 叶童- 维基百科，自由的百科全书
Snippet: 葉童（英文名：Cecilia Yip，1963年3月8日－），原名李思思，出生於香港，是香港電影  及電視劇演員。因在台湾电视公司《新白娘子传奇》一剧中女扮男装出演许仙而在?...

Title: 叶童_互动百科
Snippet: 原名李思思，出生于香港，是香港电影及电视剧演员。初出道即以《烈火 ... 叶童走近  万千观众的是她在《倚天屠龙记》和《新白娘子传奇》中的出色演出。而在这之前她就?...

Title: 叶童个人资料_叶童的反串世界_叶童三级_叶童图片_来看娱乐频道
Snippet: 2013年7月25日 ... 叶童个人资料叶童（Cecilia Yip），原名李思思，出生于香港，是香港电影及电视剧  演员。初出道即以《烈火青春》内的大胆豪放充满美感的演出而获提名?...

Title: 叶童是什么星座，叶童个人资料- 360星座网
Snippet: 2012年7月7日 ... 叶童是什么星座星座：双鱼座叶童个人资料叶童（Cecilia Yip ），原名李思思，出生于  香港，是香港电影及电视剧演员。初出道即以《烈火青春》内的大胆?...

Title: 叶童(明星) -奇谈
Snippet: 叶童（Cecilia Yip），原名李思思，出生于香港，是香港电影及电视剧演员。初出道 ...   电视长篇连续剧集《新白娘子传奇》中的女版许仙则让更多内地观众认识了她。叶童?...

Title: 揭93版《新白娘子传奇》主演们之生存现状--一床情书，意淫天下 ...
Snippet: 2013年4月18日 ... 20年后，93年版《新白娘子传奇》的三位主演赵雅芝（饰白娘子）、陈美琪（饰小青）、  叶童（饰许仙）在2013年江苏卫视的蛇年春晚重聚，现场三人唱起起?...

Title: 叶童个人资料及老公图片_婚前测试_奇丽女性网
Snippet: 2012年8月27日 ... [导读] 叶童,是香港著名的演员,因出演《新白娘子传奇》许仙一角,深受观众 ... 叶童（  Cecilia Yip），原名李思思，出生于香港，是香港影戏及电视剧演员。

Title: 叶童演过的电视剧叶童演过的电影叶童个人资料-娱乐频道-时尚女性网
Snippet: 2013年8月11日 ... 叶童，原名李思思，出生于香港，是香港影戏及电视剧演员。 ... 电视长篇持续剧集《新  白娘子传奇》中的女版许仙则让更多内陆观众熟悉了她，乐成打开?...

Title: 3月8日——叶童
Snippet: 2012年3月8日 ... 叶童（Cecilia Yip），原名李思思，出生于香港，是香港电影及电视剧演员。 ... 1992年  ，她与赵雅芝主演《新白娘子传奇》，反串许仙，风靡两岸三地。


?. 电影《英雄》的编剧是谁

Title: 《英雄》编剧新浪访谈：影片具有一种气质(图)
Snippet: 2002年12月24日 ... 今天作客我们新浪嘉宾聊天室的是《英雄》的编剧王斌和李冯，两位好。《英雄》自从12  月20 .... 网友：你们觉得这部电影中的英雄是谁？ 王斌：我觉得都?...

Title: 李冯_百度百科
Snippet: C、参与制作的电影. 《英雄》(2002) ——编剧. 《十面埋伏》(2004) ——编剧. 《霍元甲》   (2006) ——编剧. 《东奔西游》(2010)——导演、编剧. D、参与制作的动画片.

Title: 《活着》——《在细雨中呼喊》后的余华与《英雄》前的张艺谋(活着影评)
Snippet: 电影《活着》，1994年出品，制片人：邱复生；编剧：余华、芦苇；剧本定稿：芦苇（盗版碟  字幕 ... 也许这才是电影无法在大陆公开放映的关键所在，而沉于哲理的小说，终于?...

Title: 第22届香港电影金像奖_百度百科
Snippet: 基本简介第22届香港电影金像奖颁奖典礼于2003年4月6日晚8:30在香港文化中心  举行。《无间道》获得了包括最佳影片、最佳导演、最佳编剧和最佳男主角几个重头奖  ?...

Title: 《英雄》[电影]_互动百科
Snippet: 在《卧虎藏龙》之后，华语电影的武侠传统重新被发现，而这波武侠浪潮的特殊在于，  一些艺术片大师也投身其中。张艺谋的《英雄》是其中迄今最成功的一部。超过两亿?...

Title: 银翼杀手续集进展"绿灯侠"编剧望重写剧本– Mtime时光网
Snippet: 2013年6月1日 ... 迈克尔·格林曾担任美剧《超人前传》、《英雄》、电影《绿灯侠》的编剧，是科幻题材的  能手。除《银翼杀手》续集外，迈克尔还有望执笔电影版《闪电侠》。

Title: 专访美剧《英雄》海地人：超能力贵在服务现实生活_娱乐频道_凤凰网
Snippet: 2013年1月12日 ... 他的中国老师，正是最近热映电影《一代宗师》的编剧以及武术指导徐浩峰， ... 对于两  者之间的差别，吉米认为商业制作，尤其是《英雄》为他赢得了?...

Title: 《Heroes》罗生门里的超能英雄– 《英雄》影评
Snippet: 2013年3月6日 ... 作为剧集的他，无疑是要更加具有代表性，编剧利用剧集独有的权利，在说故事的  同时，把这些超能者的超能力的来源也解释出来，这也是剧集与电影?...

Title: 73年73人：著名电影编剧作家（王斌）-香港成报网
Snippet: 2012年12月27日 ... 访谈人物：王斌（著名作家，编剧，张艺谋文学策划。电影《活着》、《霍元甲》、《有话  好好说》、《千里走单骑》、《英雄》、《十面埋伏》、《满城尽带黄金甲》均?...

Title: 陈凯歌：《英雄》这部电影很有问题_陈凯歌吧_百度贴吧
Snippet: 说起他最近拍摄的影片，说实在的，我不喜欢《英雄》这部片子。我看这个电影很有  问题。这部片子是空的，我不喜欢它的主题。我自己也拍过“刺秦王”这个题材，可是  我们?...


?. 谁是第一个中国国家总理

Title: 中华人民共和国国务院副总理- 维基百科，自由的百科全书
Snippet: 中华人民共和国国务院副总理是中华人民共和国国务院的重要组成人员，也是国务院  常务会议 ... 总理：周恩来（1949年10月1日中央人民政府委员会第一次会议决定）；.

Title: 新中国成立以来的历届总理是谁？
Snippet: 2011年1月10日 ... 新中国自1954年颁布第一部社会主义宪法以来的国家总理名单：. 第一届国务院总理  ：周恩来（1954年9月-1959年4月）. 第二届国务院总理：?...

Title: 中华人民共和国国务院总理- 维基百科，自由的百科全书
Snippet: 中华人民共和国国务院总理是中华人民共和国国务院（1954年行宪后的中央人民 ...   在中华人民共和国公务员体制中，国务院总理属於行政级别最高的第一级，为国家?...

Title: 揭秘：谁是李克强的政治带路人？ - 阿波罗新闻网
Snippet: 2012年8月6日 ... 外界普遍认为，李克强是接任温家宝成为下一任中共国务院总理呼声最高的 ... 法官  丹宁勋爵的名著《法律的正常程序》一版再版，李克强是第一译者。

Title: 新华国际时评：中国总理首访四个关键字- 高层动态- 新华网
Snippet: 2013年5月29日 ... ５月１９日至２７日，中国国务院总理李克强对印度、巴基斯坦、瑞士和德国进行正式  访问。这是李克强就任 ... 第一个关键字是互信的“信”。印度是李克强?...

Title: 两会常识：国家主席能管总理吗？-搜狐评论
Snippet: 其实，国家主席与国务院总理的属性是不一样的：国家主席本身就是一个国家机构，  国务院总理却是一个国家机构里面的一个人，是国务院这个国家机构的首脑，是其?...

Title: 李克强在瑞士《新苏黎世报》发表署名文章- 高层动态- 新华网
Snippet: 2013年5月23日 ... 瑞士是我就任中国国务院总理后出访的第一个欧洲国家。在中国文化 ... 这几件都是  中国对外开放具有标志性的大事，也都与瑞士有关。 其一是推动中?...

Title: 瑞士驻华大使杜哲巍谈中瑞关系_中国访谈_中国网
Snippet: 2013年7月5日 ... 简介：瑞士是最早承认新中国的西方国家之一，也是李克强就任国务院总理后出访的  第一个欧洲国家，瑞士驻华大使杜哲巍先生，就李克强总理访问?...

Title: "用改革最大红利让广大人民受益"--记中国国务院总理李克强- 2013 ...
Snippet: 2013年3月17日 ... 新华网北京３月１６日电３月１５日，５７岁的李克强就任国务院总理。此时的中国已成为  全球第二大经济体。李克强是第一位出生在新中国、并同时拥有?...

Title: 关注李克强外交首秀：中国总理首访四个关键字--理论--人民网
Snippet: 2013年5月30日 ... 盘点此访，四个关键字呼之欲出。 5月20日，国务院总理李克强在新德里与印度总理  辛格举行会谈。新华社记者马占成摄. 第一个关键字是互信的“信”。


?. 《洛神赋图》是谁的作品

Title: 《洛神赋图》的作者是谁？_百度知道
Snippet: 《洛神赋图》作者顾恺之，该作为其观三国曹魏时建安七子之一、曹操第三子曹植所写  《洛神赋》这篇著名文学作品后有感而画的。传说曹植少时曾与上蔡（今?...

Title: 洛神赋图_百度百科
Snippet: 原《洛神赋图》卷，东晋著名画家顾恺之绘制(宋摹)，绢本，设色，纵27.1cm， .... 他  传世的唯一一件作品是《女史箴图》长卷，是根据西晋诗人张华的赋创作的，一共九段  ，?...

Title: 《洛神赋图》是谁的作品？？_百度知道
Snippet: 顾恺之传世之作《洛阳赋图》为其观三国曹魏时建安著名文人、曹操第三子曹植所写《  洛神赋》这篇著名文学作品后有感而画的。传说曹植少时曾与上蔡（今?...

Title: 洛神赋_百度百科
Snippet: 民间传说: 作品寓意: 作者简介: 书画作品. 王献之《 ...... 顾恺之《洛神赋图》卷中勾勒添  色的人马画技法意味着人马画已具备了独立成为一种画科的艺术条件。 《洛神赋》?...

Title: 《洛神赋图》_互动百科
Snippet: 所传顾的另一作品《<洛神赋>图》，乃宋人所作。 他曾被当时人称为“才绝、画绝、痴绝  ”。 顾恺之的绘画在当时享有极高的声誉。谢安曾惊叹他的艺术是“苍生以来未之有?...

Title: 曹植是否恋嫂?《洛神赋》中神秘女子是谁(图)--文化频道_中华网
Snippet: 2010年6月1日 ... 曹植的作品中，除了“七步诗”，最有名的就是《洛神赋》了，文中曹植这样描述洛神的 ...   赋》，画了流传千古的名画《洛神赋图》，其中最感人的一段描绘是曹植与洛神相逢， ...   那么曹植所描写的“洛神”和顾恺之画中的“洛神”到底是谁呢？

Title: 《洛神赋》_互动百科
Snippet: 目录. [隐藏 ]. 1 简介: 2 简介: 3 原文: 4 译文: 5 鉴赏: 6 特点: 7 产生苦闷之情原因: 8   艺术价值: 9 曹植简介: 10 书法作品: 11 书画版本补遗: 12 《洛神赋图》. 12.1 作者?...

Title: 洛神赋- 维基百科，自由的百科全书
Snippet: 两幅宋朝人临摹的《洛神賦圖》，是根据曹植的《洛神賦》画的，画中曹植和随从在岸上   .... 不論自況與否，這些描寫应该是有人物原型的，从作品结尾所透露出的作者对?...

Title: 《洛神赋图》的作品及对作品的赏析- 三国文史- 三国在线
Snippet: 2011年12月29日 ... 【作品欣赏】。 ... 杨修之死是因为比曹操更聪明吗 2-22; 谁是三国中最重亲情的人 2-  18; 曹操的杀人与猜疑 2-16; 三国时期的王位更替简述（魏篇） 2-6.

Title: 名画解析：顾恺之《洛神赋图》 _凯风网
Snippet: 2013年8月8日 ... 原《洛神赋图》卷，东晋著名画家顾恺之绘制(宋摹)，绢本，设色，纵27.1cm，横572.8  cm ... 此幅作品是根据曹植《洛神赋》中场景所作的一长卷连环画。


?. 诗仙是谁

Title: 诗佛是谁，诗魔是谁，诗仙是谁，诗圣是谁
Snippet: 2012年4月7日 ... 因着执拗的家国忧思与家世的诗学传统，杜诗有了它深沉积郁的内涵与精警盘曲的  语言组织，且老而弥坚，转转出新，这便是他的夫子自道——沉郁?...

Title: 诗仙、诗圣、诗鬼分别指谁？_百度知道
Snippet: 诗仙”指李白李白(701-762)，字太白，盛唐最杰出的诗人，也是中国文学史上继屈原  之后又一伟大的浪漫主义诗人，素有“诗仙”之称。他的诗今存900多首，如《?...

Title: “诗仙”、“诗圣”都是谁？
Snippet: 2012年3月8日 ... 诗仙”、“诗圣”都是谁？ 中国是个诗的国度，唐朝时期诗歌鼎盛，曾经涌现出了许多  伟大的诗人。这其中，最负盛名的当属“诗仙”李白和“诗圣”杜甫。

Title: 诗鬼是谁？
Snippet: 诗鬼是谁？我一下子愣住了，面对一双双渴望的眼睛，我诚实地说：“老师还真不知道  ，有人知道吗？”孩子们茫然地摇头，有人说:“我知道诗仙是李白，诗圣是杜甫，可是?...

Title: “诗仙”、“诗圣”都是谁？--相关文章
Snippet: 诗仙”、“诗圣”都是谁？” 的更多相关文章. 青年李白，暮年杜甫怠者. 青年李白，暮年  杜甫。杜甫（712－770），字子美，号少陵野老，今年恰逢杜甫诞辰1300周年，最近他  ?...

Title: 谁是诗仙，诗圣，诗鬼，诗佛？ - Tansir - 歪酷YCOOL.COM
Snippet: 2007年5月21日 ... 谁是诗仙，诗圣，诗鬼，诗佛？ 诗仙”指李白，“诗圣”指杜甫，“诗佛”指王维，“诗鬼”指李  贺。这些称谓都是后世人们所起。 李白(701-762)，字太白，盛唐?...

Title: 古代诗人的称号诗仙诗鬼诗神诗奴诗圣-学习网
Snippet: 5、诗仙--李白诗想象丰富奇特，风格雄浑奔放，色彩绚丽，语言清新自然，被誉为“诗  仙”。 6、诗圣--杜甫其诗紧密结合 ... 上一篇：诗仙.诗圣.诗佛.诗魔.诗鬼都指的是谁？

Title: 诗仙
Snippet: 李白（701年－762年），汉族，字太白，号青莲居士，唐朝浪漫主义诗人，剑南道绵州  昌隆县（今四川江油青莲乡）人，被后人誉为“诗仙”。祖籍陇西成纪（今甘肃秦安县），?...

Title: 诗仙是谁诗圣是谁_教育_三联
Snippet: 2013年1月15日 ... 唐诗，是我国古典诗歌发展的高峰。浪漫主义与现实主义唐诗是中国古典诗歌的高峰  ，而盛唐诗则是这高峰的顶点。在唐朝这段期间，涌现出了不少?...

Title: 课间无聊，玩提问。诗仙是谁？ 答：李白。诗圣是谁？ 答：杜甫…_喋血 ...
Snippet: 2012年9月26日 ... 课间无聊，玩提问。诗仙是谁？ 答：李白。诗圣是谁？ 答：杜甫。诗鬼呢？答：李贺。那  诗王呢？众人默然……旁边一过路的脱口而出：润之。 回复.


?. 岳不群的女儿叫什么名字

Title: 岳不群_百度百科
Snippet: 岳不群是金庸小说《笑傲江湖》中的一个人物，华山派掌门，号称君子剑，乃当今正教  中 ... 他“虽然名字叫作'不群'，却十分喜爱朋友，来宾中许多藉藉无名，或是声名不甚?...

Title: 第三十三回比剑(5)_金庸·笑傲江湖_梦远书城
Snippet: 玉音子心中一凛：“岳不群居然叫女儿用泰山剑法跟我过招。 .... 以及魔教诸长老破解  各家剑法的法门，虽于所刻招数记得颇熟，但这些招数叫作什么名字，却全然不知。

Title: 宁中则_百度百科
Snippet: 金庸武侠小说《笑傲江湖》中的人物。出嫁前江湖人称“宁女侠”，出嫁后多称“岳夫人”。  颇具美貌，为人正派，慷慨大义，不为权势所逼，可惜嫁给了全书第一伪君子岳不群?...

Title: 第二十回面壁思过
Snippet: 岳不群点头道：“我原不信另有什么辟邪剑谱，否则的话，余沧海就不是你父亲的 ...   只有岳灵珊是例外，她是岳不群的女儿，无法列入门徒之序，只好按年纪称呼，比她大  ?...

Title: 林平之_百度百科
Snippet: 身负血海深仇的林平之先后投奔木高峰和岳不群，却被两人利用，苦闷之中性格逐渐  阴暗残忍。在岳不群门下，林平之为岳灵珊所爱慕，但是林平之却为了掌握《辟邪剑?...

Title: 一代宗师-文武双全题目答案
Snippet: 2012年8月1日 ... 128, 《笑傲江湖》中，江南梅庄二庄主黑白子所练的纯阴功夫叫什么, 玄天指. 129, 岳  不群的住处叫什么, 有所不为轩. 130, 令狐冲改扮的军官名叫什么?...

Title: 金庸笔下十大衣冠禽兽完全排行榜
Snippet: 岳不群：天字第一号的伪君子，没得说。 2. 陈家洛：把自己 ... 顺便说一句，倚天里面的  少林寺很不光彩，那三个渡字辈的，还有什么心禅堂七老，好像都不是什么善类。 5.

Title: 从笑傲江湖说起，818武侠中的商战、阴谋、阳谋、刀光剑影及其他_仗 ...
Snippet: 2012年9月12日 ... 所以岳不群不能等死，宁可自身残缺点什么，也要至少保命先。 .... 所以我们来考察岳  不群把女儿嫁给林平之这段细节能够揭示其哪些性格特征。

Title: 穿越杨莲亭正文第四十一章以逸待劳- 八一中文网
Snippet: 一秒记住【八一中文网】www.81zw.com，为您提供精彩小说阅读。 此时，五岳剑派众  弟子正在捡柴挖灶，埋锅做饭，炊烟袅袅飘扬在夜幕之中。 岳不群很开心，这俩年来?...

Title: 徒弟岳不群砸挂郭德纲—在线播放—优酷网，视频高清在线观看
Snippet: 播放:19.7万. 转发. 表情. 全部评论(95). 第1-30/95条. 上一页. 下一页. 1. 2. 3. 4. 彼岸  琳雪. 哈哈=v=好玩好玩~~~~看徒弟们是如何损~~~. 回复. 转发. 8个月前来自新浪?...


?. 我国明代“七下西洋”的航海家是谁

Title: 郑和下西洋_百度百科
Snippet: 郑和下西洋是指明朝初期郑和奉命出使7次下西洋的航海活动。郑和下西洋时间之长  、规模之大、范围之广都是空前的。它不仅在航海活动上达到了当时世界航海事业的  ?...

Title: 郑和下西洋- 维基百科，自由的百科全书
Snippet: 明代故事《三寶太監西洋記通俗演義》和明代雜劇《奉天命三保下西洋》將他的旅行 ...   鄭和是世界大航海時代的先驅，鄭和下西洋是當代航海事業的頂峰，後世幾百年中，  ?...

Title: 古代史- 一站到底百科
Snippet: ... 谁的住处？诸葛亮…[详细] · 武则天是中国历史上唯一的女皇帝，她改国号 ... 行家：  霰雪日锋时间：2012年08月13日 我国明代“七下西洋”的航海家是谁？郑和…[详细]?...

Title: 鄭和- 维基百科，自由的百科全书
Snippet: 鄭和（1371年－1433年），原姓馬名和，小名三宝，又作三保，雲南昆陽（今晉寧昆阳  街道）寶山鄉知代村人。中國明代航海家、外交家、宦官。穆斯林太監鄭和的一生，是?...

Title: 《一站到底》题库及答案（20120302期）
Snippet: 10 在我国可兑换的国际通用外币中，最值钱的是哪个币种？英镑. 11.我国明代“七下  西洋”的航海家是谁？郑和. 12.解放战争时期著名的“三大战役”中第一个打响的是?...

Title: 俄国航海家_搜索_互动百科
Snippet: 的人? 谁是中国秦代伟大的航海家? 徐福在金立山找到长生不老药...? 世界上第一个  女海盗是谁? 谁是明代七下西洋的伟大航海家...的航海家是谁? 是谁发现了好望角?

Title: 七下西洋的郑和是太监吗？ - 太监百科
Snippet: 2011年6月1日 ... 郑和（1371年- 1433年），原名马三宝，回族人，中国明代航海家、外交家、太监。郑和  是中国历史上最杰出的航海家。

Title: 政史组（51—62号教案）
Snippet: 1、郑和是我国也是世界历史上的伟大航海家，郑和下西洋与是世界航海史上的壮举，   ... 明前期，是当时世界上最发达的国家之一，郑和七下西洋，同亚非各国的经济和?...

Title: 一战到底_百度文库
Snippet: 姜太公10 在我国可兑换的国际通用外币中，最值钱的是哪个币种?英镑11.我国明代“  七下西洋”的航海家是谁?郑和12.解放战争时期著名的“三大战役”中第一个打响的?...

Title: 领先世界航海史的郑和七下西洋- 新华科技- 新华网
Snippet: 2013年7月11日 ... 中国人千百年来海洋文明发现的积累，明朝皇帝和政府的全力支持，更有中国人航海  智慧的结晶，所有这些都凝聚在一个名叫郑和的中国人身上，并?...


?. 曹雪芹的《红楼梦》中，葬花的人是谁

Title: 葬花吟_百度百科
Snippet: 《葬花吟》是清代伟大文学家曹雪芹的小说《红楼梦》第二十七回《滴翠亭杨妃戏彩蝶埋  香冢飞燕泣残红》之中林黛玉所吟诵 .... 奴今葬花人笑痴，他年葬奴（我）知是谁⑥？

Title: 红楼梦- 维基百科，自由的百科全书
Snippet: 自胡适作红楼梦考证以来，一般认为曹雪芹以其家族的命运投射在《红楼梦》一书。 ....   宝黛在春季结束时第二次葬花，林黛玉作成葬花词一首。 忽闻与贾府素无往来的?...

Title: 会员文献
Snippet: 在《红楼梦》中曹雪芹所用的是虚贬实扬的手法，虽说林黛玉对人刻薄，其实在曹雪芹  又从其他的地方从另个 ... 我最爱的是最后几句“侬今葬花人笑痴，他年葬侬知是谁。

Title: 《紅樓夢》—葬花吟
Snippet: 儂今葬花人笑癡，他年葬儂知是誰? 試看春殘 ... 《葬花吟》是林黛玉感歎身世遭遇的  代表作，也是作者曹雪芹藉以塑造這一藝術形象，表現其性格特性的重要作品。它和《  ?...

Title: 《葬花吟》在红楼梦中，是谁唱的_爱问知识人
Snippet: 《葬花吟》在红楼梦中，是谁唱的红楼梦葬花吟《葬花吟》在红楼梦中，是谁 ... 《葬花吟》  是曹雪芹创作的章回小说《红楼梦》女主人公林黛玉所吟诵的一首?...

Title: 曹雪芹
Snippet: 红学争鸣：红楼梦作者究竟是谁？曹雪芹是哥德巴赫猜想？ （文/谢志坚）程伟元认为：  “《红楼梦》小说本名《石头记》，作者相传不一，究未知出自何人，惟书内记雪芹曹?...

Title: 《红楼梦》读后感
Snippet: ... 光环，一边是心驰神往的自由之身。曹雪芹笔下的《红楼梦》为我们展现了这场无声  的较量。 ... 侬今葬花人笑痴，他年葬侬知是谁？试看春残花渐落，便是红颜老死时。

Title: 红学
Snippet: 红学争鸣：红楼梦作者究竟是谁？曹雪芹是哥德巴赫猜想？ （文/谢志坚）程伟元认为：  “《红楼梦》小说本名《石头记》，作者相传不一，究未知出自何人，惟书内记雪芹曹?...

Title: 【红学家周汝昌】曹雪芹《红楼梦》南明背景考证
Snippet: 红学家周汝昌：曹雪芹的《红楼梦》有南明背景。本人研究《红楼梦》多年，据本人看来，  要想研究《红楼梦》，应怀着“海纳百川，有容乃大”的精神，不拘泥于一隅。《红楼梦》?...

Title: 曹雪芹葬花吟--紅樓夢詩詞(林黛玉)
Snippet: 曹雪芹葬花吟--紅樓夢詩詞(林黛玉). 清曹雪芹. 花謝花飛花滿天，紅消香斷有誰憐？   游絲軟系飄春榭，落絮 ... 儂今葬花人笑痴，他年葬儂知是誰？ 試看春殘花漸落，便?...


?. 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字

Title: 金毛狮王_百度百科
Snippet: 谢逊，金庸小说倚天屠龙记的人物，是明教法王，也是金庸笔下最威猛的人物。 ...   倪匡先生称金毛狮王谢逊是《倚天屠龙记》中最令人难忘的男子，正可谓英雄所见略同  。

Title: 小说- 一站到底百科
Snippet: 金庸小说《倚天屠龙记》中，金毛狮王叫什么. 行家：霰雪日锋时间：2012年08月13日   金庸小说《倚天屠龙记》中，金毛狮王叫什么名字？谢逊…[详细] · 吴承恩小说《西游?...

Title: 金毛狮王_百度百科
Snippet: 金毛狮王”一词最早是指香港作家金庸的武侠小说《倚天屠龙记》中明教四大法王 ... 人  难忘的男子自然是金毛狮王谢逊，而真正配得上屠龙宝刀的人，也只有谢逊一人。

Title: 《倚天屠龙记》简介- 金庸百科
Snippet: 2012年2月14日 ... 在明教之中张无忌武功最高，此外还有明教四大法王：金毛狮王、青翼蝠 ... 之雕）而在  《倚天屠龙记》中却并没有将“雕”列入书名，小说里亦没有雕影。

Title: 成昆_百度百科
Snippet: 成昆是金庸小说《倚天屠龙记》中的人物，外号混元霹雳手， ... 是金毛狮王谢逊的授业  恩师和不共戴天之仇人，亦是「倚天屠龙记」中后段最大的奸角和最不得天命、结局?...

Title: 新修版《倚天屠龙记》改动明细(评论: 金庸作品集)
Snippet: 不记得《天龙》中的少林僧有没有类似的说法了，那时候时间更短。这些人 .... 新修版  改为说殷素素和白龟寿等都知道金毛狮王的来历，而那舵主也因为不再需要他回答

Title: 张无忌- 维基百科，自由的百科全书
Snippet: 張無忌是金庸小说射鵰三部曲的第三部《倚天屠龙记》的男主角，為金庸小說中武功最   ... 他的雙親剛相識不久，便互生情愫，王盤山一役後被「金毛狮王」谢逊脅持，其間?...

Title: 冰火岛- 搜搜百科
Snippet: 又因为其丰富的地热资源，所以被称做“冰火岛”。 此名出自金庸武侠小说《倚天  屠龙记》。武当派张三丰弟子张翠山与白眉鹰王之女殷素素被金毛狮王谢逊抓做人质  带到?...

Title: 《一站到底》题库及答案（20120302期）
Snippet: 吴承恩小说《西游记》当中，唐僧在哪条河收了沙和尚做徒弟？流沙河. 10. 金庸小说《  倚天屠龙记》中，金毛狮王叫什么名字？谢逊. 11. 2004 年雅典奥运会中，获奖?...

Title: 金庸小说人物评论(转载) – 【人人分享-人人网】
Snippet: 金庸小说人物评论之谢逊 “武林至尊，宝刀屠龙，号令天下，莫敢不从”——《倚天  屠龙记》里最令人难忘的男子自然是金毛狮王谢逊，而真正配得上屠龙宝刀的人，也  只有?...


?. 第一位扮演邦女郎的亚洲女星是谁

Title: 杨紫琼_百度百科
Snippet: 一位慈祥的老医生为她详细检查后，与她天南地北的闲聊，问她除了舞蹈之外，还有   .... 的莫过于杨紫琼扮演的邦女郎，她是一位闪光着东方魅力的女侠，是007系列里第  一个 ... 力的女郎，更是打出了国际知名度，也因此奠定了亚洲首席动作女星的地位。

Title: 23任邦女郎哪个最出镜杨紫琼堪称"亚洲典范"_新闻中心_中国网
Snippet: 2013年1月20日 ... 从第一位邦女郎现身起至今，已有23任邦女郎。 ... 扮演Kissy的浜美枝颇有来头，她  是第一个登上PLAYBOY的亚洲人，号称日本的碧姬·芭铎。 ... 但来自于香港的老牌  武打女星杨紫琼在本片中所塑造的那个精明干练的中国特工堪称?...

Title: 红颜不老性感流传007系列历任邦女郎盘点-文娱万象-生活-嘉人网 ...
Snippet: 2012年10月26日 ... 除了继续欣赏丹尼尔·克雷格耍狠扮酷，一黑一白两位邦女郎的品质如何也 ... 扮演  Kissy的滨美枝是日本性感女星，在本国已经名气很大，是第一个登?...

Title: 23任邦女郎哪個最出鏡楊紫瓊堪稱"亞洲典範"
Snippet: 2013年1月21日 ... 從第一位邦女郎現身起至今，已有23任邦女郎。 ... 扮演Kissy的美枝頗有來頭，她是  第一個登上PLAYBOY的亞洲人，號稱日本的碧姬·芭鐸。 ... 但來自於香港的老牌武打  女星楊紫瓊在本片中所塑造的那個精明幹練的中國特工堪稱首位?...

Title: 007邦女郎华裔女星5选1 知情人:文化差异都没戏_雅虎海外
Snippet: 2011年10月14日 ... 影评人谭飞认为，5位女星谁都有“中标”的可能，“中西方的审美标准向来不一样，在  我们 ... 但也有消息表示，新一集的邦德故事会出现两位邦女郎：一名英国女特工与一  位亚洲女子，玛尔洛饰演的 ... 那神秘的亚裔邦女郎究竟会是谁？ ... 至于是否会起用  其他亚洲国家的女星来扮演这位“亚裔邦女郎”，这位知情人士表示，?...

Title: 红颜不老性感流传007系列历任邦女郎盘点-星闻-明星-嘉人网- Marie ...
Snippet: 2012年10月8日 ... 除了继续欣赏丹尼尔·克雷格耍狠扮酷，一黑一白两位邦女郎的品质如何也 ... 扮演  Kissy的滨美枝是日本性感女星，在本国已经名气很大，是第一个登?...

Title: 007向亚洲说hello _金鹰电影
Snippet: 2008年11月3日 ... 浜美枝007启用亚洲演员，打开亚洲市场面对亚洲庞大的电影票房市场，亚洲 ... 在《  雷霆谷》中007启用日本女星MieHama(浜美枝)，邦德与两位美丽的日本 ... 这位第五  任邦女郎，扮演Kissy的Mie Hama(浜美枝)颇有来头，她是第一个登?...

Title: 你所不知道的邦女郎野史！_女性_腾讯网
Snippet: 2011年8月17日 ... 第一位亚洲邦女郎就是鼎鼎大名的打女杨紫琼。作为一代功夫女星，据传当年在《  明日帝国》里的片酬高过李连杰和周星驰，直追成龙。虽然整部片子?...

Title: 第23集《007》邦女郎终敲定贝纳尼丝·玛尔洛资料曝光- 娱乐- 国际在线
Snippet: 2011年10月11日 ... 之前，第23集《007》曾放出消息说，影片将有两位邦女郎出现，一位是英国女 ... 尤其  是亚洲邦女郎的扮演者引起了人们的广泛关注，如今玛尔洛的 ... v 007系列将迎来  新任邦女郎亚裔女星有望参演《邦德23》 2011-08-22 ... (1) 这是谁？

Title: 数字飙榜：盘点007系列中的十大邦女郎- 好看· 分享· 推荐· 瓜小影
Snippet: 2013年5月5日 ... 这位年仅25岁的法国女星，被影评家描述为绝色佳人。 ... 在《皇家赌场》中，她所扮演  的是一位秘密特务，负责为邦德准备赌注，并暗中监视他的一举一动。 .... 的功夫开始  得到展示，这位闪耀着东方魅力的女侠，是007系列里第一个真正中国版的邦德女郎  。 ... 不但打出了知名度，也因此奠定了亚洲首席动作女星的地位。


?. 创办“精武门”的中国清末爱国武术家是谁

Title: 霍元甲_百度百科
Snippet: 霍元甲，清末著名爱国武术家，他的武艺出众，又执仗正义，继承家传“迷踪拳”绝技，   ... 1910年6月1日，霍元甲在农劲荪等人帮助下，在上海创办了“中国精武体操会”(后?...

Title: 历史- 一站到底百科
Snippet: 行家：霰雪日锋时间：2012年08月13日 马可波罗是在哪个朝代来到中国的？元朝…[  详细] · 创办“精武门”的中国清末爱国武术家是谁？ 行家：霰雪日锋时间：2012年08?...

Title: 霍元甲(清末著名爱国武术家) - 搜搜百科
Snippet: 霍元甲，清末著名爱国武术家，他的武艺出众，又执仗正义，继承家传“迷踪拳”绝技，   ... 劲荪等武术界同仁协助下，在上海创办了“中国精武体操会”（后改名精武体育会）。

Title: 《一站到底》题库及答案（20120302期）
Snippet: 有“铁榔头”一称的前中国排球女运动员是谁？郎平. 2. 创办“精武门”的中国清末爱国  武术家是谁？霍元甲. 3. “有一个老人在中国的南海边画了一个圈”是哪首歌的歌词？

Title: 《一站到底》最新最全题库_百度文库
Snippet: 有“铁榔头”一称的前中国排球女运动员是谁？郎平2. 创办“精武门”的中国清末爱国  武术家是谁？霍元甲3. “有一个老人在中国的南海边画了一个圈”是哪首歌的歌词？

Title: 盖世大侠霍元甲生平-中华武术-文化中国-家国网
Snippet: 2013年5月7日 ... 霍元甲是清末著名爱国武术家，他武艺出众，又敢于执仗正义，继承家传“迷踪 ... 后到  上海办“精武体育会”（精武门），为发扬中华武术作出了巨大贡献。

Title: 霍元甲：为中华精武门 燕赵之子 今视界
Snippet: 2013年3月18日 ... 霍元甲，清末著名爱国武术家，他的武艺出众，又执仗正义，继承家传“迷 ... 劲荪介绍  来上海，接受由陈公哲、陈铁生所创办“精武体操会”中主教武术。

Title: 一战到底题库02
Snippet: 西班牙74、有“铁榔头”一称的前中国排球女运动员是谁？郎平75、创办“精武门”的  中国清末爱国武术家是谁？霍元甲76、“有一个老人在中国的南海边画了一个圈”是哪  ?...

Title: 武林外传之中外武术比武-红豆社区
Snippet: 泰森昨日凌晨开通新浪微博后，即公然问网友全中国谁人最能打？ ... 家传迷踪艺  绝技(即秘宗拳,亦称燕青拳),是我国清末著名爱国武术家，武艺出众，?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 有“铁榔头”一称的前中国排球女运动员是谁？ 郎平. 创办“精武门”的中国清末爱国  武术家是谁？ 霍元甲. “有一个老人在中国的南海边画了一个圈”是哪?...


?. 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁

Title: 北京欢迎你_百度百科
Snippet: 《北京欢迎你》是2008年北京奥运会征集评选活动组委会、中国移动通信有限公司、  北京市文物局再度携手合作创作的奥运歌曲。歌曲由海内外百名歌星激情演绎，几乎  ?...

Title: 《北京欢迎你》_互动百科
Snippet: 《北京欢迎你》是北京2008年奥运会征集评选活动组委会、中国移动通信有限公司、  北京市文物局再度携手合作创作的奥运歌曲。歌曲由海内外百名歌星激情演绎，几乎  ?...

Title: 北京欢迎您_百度百科
Snippet: 奥运期间歌曲，正确歌名为《北京欢迎你》是北京2008年奥运会征集评选活动组委会、  中国移动通信有限公司、北京市文物局再度携手合作创作的奥运歌曲。歌曲由海?...

Title: 《一站到底》题库及答案（20120302期）
Snippet: 电影《泰坦尼克号》的主题曲叫做？我心永恒. 8. 由百位明星共同演唱的奥运歌曲《  北京欢迎你》的曲作者是谁？小柯. 第十轮：. 1. 我们通常所说“煤气中毒”是由于煤气  中?...

Title: 《一站到底》最新最全题库_百度文库
Snippet: 电影《泰坦尼克号》的主题曲叫做？我心永恒8. 由百位明星共同演唱的奥运歌曲《北京  欢迎你》的曲作者是谁？小柯第十轮： 1. 我们通常所说“煤气中毒”是由于煤气中哪?...

Title: 一战到底题库，来看看你的知识储量有多大！_中国HR劳斯莱斯俱乐部 ...
Snippet: 2013年4月15日 ... 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁？...........................小柯.   第十轮：. 1. 我们通常所说“煤气中毒”是由于煤气中哪种气体吸入?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 电影《泰坦尼克号》的主题曲叫做？ 我心永恒. 由百位明星共同演唱的奥运歌曲《北京  欢迎你》的曲作者是谁？ 小柯. 我们通常所说“煤气中毒”是由于?...

Title: 《北京祝福你》MV首发百名明星献唱_影音娱乐_新浪网
Snippet: 2012年7月13日 ... 歌会现场，百位明星先后演唱了近四十首经典歌曲，奥运歌曲《北京欢迎你》等再次唱  响，带领观众从北京穿越到伦敦，在歌声中回忆那些激动人心的?...

Title: 一战到底题库02
Snippet: 火箭86、 格林童话《灰姑娘》中，灰姑娘参加舞会时所做的车是由哪种植物变成的？  南瓜87、由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁？小柯88、?...

Title: 百位明星献唱《北京欢迎你》 林志玲只唱半句歌-搜狐娱乐
Snippet: 2008年8月7日 ... 由百名明星合唱的奥运倒计时一百天主题歌《北京欢迎你》在短短三个月里红遍神州  大地，目前这首歌已经成为全国各地KTV点唱率最高的歌曲。


?. 以“莫须有”罪名毒害了名将岳飞的奸臣是谁

Title: 20120309 《一站到底》第二期
Snippet: 2013年2月17日 ... 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦桧 著名的“特洛伊之战”传说起因是  双方为了争夺一个美女，请问这位美女叫什么？海伦 有史以来第一?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？ 秦桧. 著名的“特洛伊之战”传说起因是  双方为了争夺一个美女，请问这位美女叫什么？ 海伦. 有史以来第?...

Title: 一战到底最全题库– 【人人分享-人人网】
Snippet: 包拯以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦桧著名的“特洛伊之战”传说起因  是双方为了争夺一个美女，请问这位美女叫什么？海伦 有史以来第一个活着亲眼看?...

Title: 一战到底题库，来看看你的知识储量有多大！_中国HR劳斯莱斯俱乐部 ...
Snippet: 2013年4月15日 ... 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？..................秦侩. 14.著名的“特洛伊之战  ”传说起因是双方为了争夺一个美女，请问这位美女叫什么？

Title: 一战到底题库02
Snippet: 包拯124、以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦桧125、著名的“特洛伊之  战”传说起因是双方为了争夺一个美女，请问这位美女叫什么？海伦126、有史以来第  ?...

Title: 岳墓栖霞_百度百科
Snippet: 秦桧秉承赵构的旨意，在1142年1月以莫须有的罪名杀害了岳飞父子。 ..... 洗靖康之  耻迎徽、钦二帝回来，就有秦桧这样的奸臣投其所好，为虎作伥，杀害抗金名将岳飞。

Title: 一战到底– 【人人分享-人人网】
Snippet: 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦侩14.著名的“特洛伊之战”传说起因  是双方为了争夺一个美女，请问这位美女叫什么？海伦15.有史以来第一个活着亲眼  ?...

Title: “农民小康之家”读书活动知识竞赛题库
Snippet: 2013年2月5日 ... 159、以“莫须有”罪名毒害了名将岳飞的奸臣是谁？ 答：秦侩 160、清朝道光年间，在  虎门销禁鸦片的民族英雄是谁？ 答：林则徐 161、相传使董卓、?...

Title: 百姓大舞台有奖竞答题库及答案[复制链接]
Snippet: 2013年6月8日 ... 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦侩 14.著名的“特洛伊之战”传说起因  是双方为了争夺一个美女，请问这位美女叫什么？海伦 15.

Title: 秦始皇兵马俑是在我国的哪个省发掘的_世界杯资讯网_南非世界杯_ ...
Snippet: 4 days ago ... 以“莫须有”罪名毒害了名将岳飞的奸臣是谁？秦侩. 12.传说中“狸猫换太子”一案是被  哪位官员查明平反的？包拯. 11.用弹弓控制小鸟来打击建筑物和?...


?. 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁

Title: 周慧敏_百度百科
Snippet: 被称为“玉女”掌门人，1967年11月10日生于香港，籍贯广东中山，是1980年代至90  年代 .... 第一代玉女掌门人”周慧敏的笑脸与声音让人难以忘记，她曾经集万千宠爱于  ?...

Title: 【一站到底】题库及答案（20120309期）
Snippet: 2013年6月7日 ... IBM 7,被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁？周慧敏 8.1987年  徐克导演拍的《倩女幽魂》中饰演宁采臣的男主角是谁？张国荣.

Title: 女神、玉女命运颠沛流离 周慧敏李若彤各有各命--内蒙古频道--人民网
Snippet: 2013年8月5日 ... 另一方面，这几位女神的回归，也让人们关心起那些曾经红极一时的港星们如今的  生活——被誉为香港三代玉女掌门人的周慧敏、杨采妮、梁咏琪?...

Title: 女神、玉女命运颠沛流离周慧敏李若彤各有各命-新华网
Snippet: 2013年8月5日 ... 另一方面，这几位女神的回归，也让人们关心起那些曾经红极一时的港星们如今的  生活——被誉为香港三代玉女掌门人的周慧敏、杨采妮、梁咏琪?...

Title: 周慧敏_标签_网易女人
Snippet: 林青霞周慧敏陈红张曼玉80年代女星清纯封面照 .... 近日，长春国贸爆料，称曾被誉  为玉女掌门人的周慧敏早年与一位日本男子有过一段异国恋，当时倪震移情于?...

Title: 周慧敏最美好~ 南方人物周刊南方人物周刊
Snippet: 2012年4月22日 ... 周慧敏1990年代香港著名歌手、演员，形象清纯，被称为“一代玉女掌门人”。代表作：  电视剧《大时代》、专辑《流言》。1997年宣布淡出娱乐圈，2006年?...

Title: 周慧敏资料，周慧敏介绍，周慧敏图片，周慧敏新闻- 第1页- 铁血网
Snippet: 周慧敏，被称为“玉女”掌门人，生于香港，籍贯广东中山，是1990年代于香港乐坛当红   ... 周慧敏对爱情的忠贞惨被倪震欺骗作为一代“玉女派掌门人”，周慧敏用其清纯的?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... IBM. 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁？ 周慧敏. 1987年徐  克导演拍的《倩女幽魂》中饰演宁采臣的男主角是谁？ 张国荣.

Title: 一战到底– 【人人分享-人人网】
Snippet: 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁？周慧敏8.1987年徐克  导演拍的《倩女幽魂》中饰演宁采臣的男主角是谁？张国荣第六轮1.我国一般查询  电话?...

Title: 一战到底题库02
Snippet: IBM 133、被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁？周慧敏134、  1987年徐克导演拍的《倩女幽魂》中饰演宁采臣的男主角是谁？张国荣135、我国?...


?. 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁

Title: 小燕子_百度百科
Snippet: 古装电视剧《还珠格格》中的女主角之一，第一部（1998年）、第二部（1999年）由赵薇  饰演；第三部（2003年）由黄奕饰演；新版（2011年）由李晟饰演。小燕子性格活泼，是  ?...

Title: 20120309 《一站到底》第二期
Snippet: 2013年2月17日 ... 我国农历中有多少个节气？24 在十二生肖中排列顺序第一的是什么动物？老鼠 97  年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁？

Title: 赵薇郑爽鬼鬼那些曾经青春逼人的少男少女（全文）_网易女人
Snippet: 2013年6月25日 ... 赵薇。中国知名度最高及最具影响力的影视女演员、流行音乐女歌手。任职中国电影  表演艺术学会副会长等多个影视专业及公益组织。四大花旦中?...

Title: 小燕子姐姐_百度百科
Snippet: 古装电视剧《还珠格格》中的女主角之一，第一部（1998年）、第二部（1999年）由赵薇  饰演；第三部（2003年）由黄奕饰演；新版（2011年）由李晟饰演。小燕子性格活泼，是  ?...

Title: 赵薇_互动百科
Snippet: 98年凭《还珠格格》红遍亚洲，99年主演《少林足球》《夕阳天使》05年凭《情人结》获 .....   年饰演：岳清儿身份：侠女《还珠格格》1997年饰演：小燕子/还珠格格身份：走江湖?...

Title: 赵薇_百度百科
Snippet: 赵薇（Vicki Zhao），中国知名度最高及最具影响力的影视女演员、歌手，国际影星。  任职中国电影表演艺术学会副会长等多个影视专业及公益组织。四大花旦中唯一获得  ?...

Title: 郑爽赵薇杨幂刘诗诗刘恺威揭明星"一剧成名"史(组图)-娱乐八卦 ...
Snippet: 赵薇亦凭借出演小燕子一角一举成名，一跃成为亚洲最热门的偶像明星。 ... 林心如，  1998年饰演琼瑶剧《还珠格格》中的女主角紫薇一炮而红，受到?...

Title: 刘诗诗杨幂赵薇张杰郑爽盘点娱乐圈一炮红的明星_网易娱乐
Snippet: 2013年4月23日 ... 赵薇亦凭借出演小燕子一角一举成名，一跃成为亚洲最热门的偶像明星。 ... 林心如，  1998年饰演琼瑶剧《还珠格格》中的女主角紫薇一炮而红，受到?...

Title: 赵薇杨幂刘诗诗揭明星"一剧成名"史(组图)(图1)[图集] - 互动中国
Snippet: 赵薇亦凭借出演小燕子一角一举成名，一跃成为亚洲最热门的偶像明星。 ... 林心如，  1998年饰演琼瑶剧《还珠格格》中的女主角紫薇一炮而红，受到?...

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁？ 赵薇. “接下来，  就是见证奇迹的时刻了”是哪一位著名魔术师的标志性口号？ 刘谦.


?. 《西雅图不眠夜》的女主角是谁

Title: 西雅图夜未眠_百度百科
Snippet: 巴尔的摩的一位女记者安妮与男朋友沃尔特订婚，她决定去华盛顿和男友一起过圣诞  节。 .... 此外，由于电影中的女主角非常喜欢看电影《金玉盟》，而间接导致《金玉盟》的  录像带卖出了200 .... 2013 Baidu 使用百度前必读 | 百科协议 | 百度百科合作平台?...

Title: 西雅图不眠夜吧_百度贴吧
Snippet: 3. 求《西雅图不眠夜》中女主角哼唱的歌 · cjlovezfy. 《西雅图不眠夜》中女主角哼唱了  一首收音机里的圣诞歌曲，求英雄们告诉我歌名，小弟找了半天也找不到啊。

Title: 《西雅图夜未眠》_互动百科
Snippet: 梅格·瑞恩（Ryan, Meg）毕业于纽约大学新闻系，曾以《当哈利碰上莎莉》及《西雅图夜  未眠》获金球奖最佳女主角提名，并曾当选People杂志全球最漂亮的50位名人。

Title: 豆瓣君我错了。。。。。鼓励为主吧。。。。。。。。 (北京遇上西雅图影评)
Snippet: 2013年3月22日 ... 在《北京遇上西雅图》中，电影《西雅图不眠夜》倒并不是一个简单的噱头，影片贯穿 ...   汤唯饰演的女主角佳佳，基本演出了北京姑娘略带凶悍刁蛮却又温柔似水的热心劲，   只 ..... 2013-03-25 02:12:24 猜猜是谁 (我喜欢经典，喜欢创新).

Title: 西雅图不眠夜(Sleepless in Seattle) - 高清影院| 在线观看| 电影预告片 ...
Snippet: 时间已经是一年半以后。巴尔的摩的 ... 安妮告诉自己她爱着的是沃尔特，可奇怪的是  她又很关心那个“西雅图未眠人”。 山姆在同事 .... 共364人对《西雅图不眠夜》评分?...

Title: 西雅图夜未眠Sleepless in Seattle(1993)
Snippet: 电影中，男主角山姆与朋友谈到该片时甚至叫它“娘儿们电影”（Chick movie）。此外，  由于电影中的女主角非常喜欢看电影《金玉盟》，而间接导致《金玉盟》的录像带卖出?...

Title: 微博上看见有个微电影，讲男女主角在游戏上认识相爱的，叫什么名字_ ...
Snippet: 微博上看见有个微电影，讲男女主角在游戏上认识相爱的，叫什么名字. 0分 ... 想问  一下《西雅图不眠夜》里女主角看了很感 ... 男女主角是谁. 隆鼻不用?...

Title: 国际在线《北京遇上西雅图》观影报告：爱情的奇妙化学反应- 娱乐- 国际 ...
Snippet: 2013年3月22日 ... 观影团中的泰国朋友陈博文告诉记者：“没有想到中国的电影这么出色，男、女主角的  表演都非常到位。 ... 影片《西雅图不眠夜》的关系，影片中的很多桥段融入了《西雅图  不眠夜》的元素，这种巧妙的致敬和谐、效果出众。 .... (1) 这是谁？

Title: 正常国产片缘何成为稀缺品--上海频道--人民网
Snippet: 2013年3月25日 ... 王方以女主角文佳佳带着男主角弗兰克的女儿去看电影《西雅图不眠夜》为例：导演所  选《西雅图不眠夜》中的最后一个片段，本来很有意味；之后镜头?...

Title: 北京遇上西雅图：借《西雅图不眠夜》的名气向《金玉盟》致敬_蓓蓓_新浪 ...
Snippet: 2013年3月24日 ... 如果说《西雅图不眠夜》是在向《金玉盟》致敬，那么之前我认为导演就是在用《北京爱  上西雅图》再向《西雅图不眠夜》致敬。但当我在3天时间内在?...


?. 清朝道光年间，在虎门销禁鸦片的民族英雄是谁

Title: 虎门销烟_百度百科
Snippet: 虎门销烟（1839年6月）是指中国清朝政府委任钦差大臣林则徐在广东虎门集中 ... 更  为严重的是鸦片的泛滥极大地摧残了吸食者的身心健康，如任其发展下去，必将使?...

Title: 小学生科普知识_百度文库
Snippet: 北冰洋9、清朝道光年间，在虎门销禁鸦片的民族英雄是谁？（林则徐） ？（林则、清朝  道光年间，在虎门销禁鸦片的民族英雄是谁？（林则徐10、“出污泥而不染说的是哪?...

Title: 林则徐_百度百科
Snippet: 是清朝后期政治家、思想家和诗人，是中华民族抵御外辱过程中伟大的民族英雄，其  主要功绩是虎门销烟。官至一品，曾任江苏巡抚、两广总督、湖广总督、陕甘总督和?...

Title: 【一站到底】题库及答案（20120309期）
Snippet: 2013年6月7日 ... 8.相传使董卓、吕布反目成仇的古代美女是谁？貂蝉 9.清朝道光年间，在虎门销禁  鸦片的民族英雄是谁？林则徐 10.十二世纪十大画家之一，以画虾?...

Title: 小学生科普知识-中国?钟山信息网
Snippet: 2012年7月13日 ... 8、地球上有四大洋，位于地球最北部的是什么大洋？（北冰洋）. 9、清朝道光年间，在  虎门销禁鸦片的民族英雄是谁？（林则徐）. 10、“出污泥而不染”说?...

Title: 小学生科普知识--wangzhijie1973的blog
Snippet: 2012年3月30日 ... 8、地球上有四大洋，位于地球最北部的是什么大洋？（北冰洋）. 9、清朝道光年间，在  虎门销禁鸦片的民族英雄是谁？（林则徐）. 10、“出污泥而不染”说?...

Title: 大话水浒会试殿试答案查询_大话水浒_网络游戏专区_腾讯游戏频道
Snippet: 古书中男子手里常握有“三尺”，请问它指什么？ 剑. 清朝道光年间，在虎门销禁鸦片  的民族英雄是谁？ 林则徐. 在月球上同时抛出一根羽毛和一个铁球，那个会先落地？

Title: 神仙道一战到底答案一战到底题库大全- 265G神仙道
Snippet: 2013年4月23日 ... 相传使董卓、吕布反目成仇的古代美女是谁？ 貂蝉. 清朝道光年间，在虎门销禁鸦片  的民族英雄是谁？ 林则徐. 十二世纪十大画家之一，以画虾技术?...

Title: 林则徐- 维基百科，自由的百科全书
Snippet: 虎門銷煙使中英关系陷入极度紧张状态，成为第一次鴉片戰爭的导火索。 ... 12.1   禁煙及鴉片戰爭; 12.2 對西學的研究和包容; 12.3 少數民族政策; 12.4 後人的評價.

Title: 一战到底题库02
Snippet: 重庆169、相传使董卓、吕布反目成仇的古代美女是谁？貂蝉170、清朝道光年间，在  虎门销禁鸦片的民族英雄是谁？林则徐171、十二世纪十大画家之一，以画虾技术?...


?. 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁

Title: 李小龙是佛山人你知道吗？ - 佛山百科
Snippet: 2012年3月20日 ... 李小龙，原名李振藩，乳名细凤，为美籍华人，祖籍中国广东省佛山市顺德区均安镇，  身高173厘米，体重64公斤。他是一位武术技击家、武术哲学家、?...

Title: 李小龙的跑步训练：距离2到6英里倒跑训练平衡-搜狐体育
Snippet: 2013年7月24日... 1973 07.20)，一代武术宗师、UFC起源者、MMA之父、功夫影帝、功夫电影的开创  者、截拳道创始人、中国功夫首位推广者、好莱坞首位华人演员。

Title: 李小龙_百度百科
Snippet: 者截拳道创始人、中国功夫首位推广者、好莱坞首位华人演员。 ..... 李小龙截拳道  海报截拳道是李小龙所创立的融合世界各种武术精华的全方位自由搏击术。“截拳道”  ?...

Title: 无敌的斗士，精神的膜拜者– 【人人分享-人人网】
Snippet: 他是一位武术技击家、武术哲学家、全球范围内具有影响力的著名华人武打电影演员  、 世界武道改革先驱者， UFC 起源者， MMA 之父， 截拳道武道哲学的创立人。

Title: 我是李小龙_百度百科
Snippet: 《我是李小龙》，2012最新李小龙纪录片，李小龙女儿担任制片人，长达一个半小时。   ... 截拳道和概念截拳道)的创始人、中国功夫首位推广者、好莱坞首位华人演员。

Title: 于承惠：从《少林寺》走来--相关文章
Snippet: 功夫。少林派拳术有罗汉拳、小洪拳、大洪拳、老洪拳、少林五拳、五战拳、昭阳拳、  连环拳、功力拳、潭腿、柔拳、六合拳、圆功拳、内功拳、太祖长拳、炮拳、地躺拳、?...


?. 电影《白毛女》中，抢走喜儿的地主叫什么名字

Title: 电影- 一站到底百科
Snippet: 山口百惠…[详细] · 电影《白毛女》中，抢走喜儿的地主叫什么名. 行家：霰雪日锋时间：  2012年08月14日 电影《白毛女》中，抢走喜儿的地主叫什么名字？黄世仁…[详细].

Title: 白毛女_百度百科
Snippet: 喜儿是《白毛女》的主人公，也是全剧所着力塑造的反抗的农民形象。 ... 主要情节是：  恶霸地主黄世仁逼死了善良老实的佃户杨白劳，抢走了他的女儿喜儿并奸污了她，?...

Title: 《一站到底》题库及答案（20120316期）
Snippet: 蝌蚪靠什么呼吸？腮 10.用来测量钻石重量单位是？克拉 11.电影《白毛女》中，抢走  喜儿的地主叫什么名字？黄世仁 12.1984 年，日本连续剧《血疑》中大岛幸子的扮演?...

Title: 革命的虚构：歌剧《白毛女》幕后- 纽约时报中文网国际纵览
Snippet: 2012年7月4日 ... 2011年在上海城市剧院上演的《白毛女》芭蕾舞剧。 白毛仙姑的故事有好多版本，  大多没有革命内容。有说地主一直无子，喜儿作为三姨太被娶进门后?...

Title: 《白毛女》[歌剧]_互动百科
Snippet: 白毛女”是“《白毛女》[歌剧]”的同义词，《白毛女》[歌剧]-《白毛女》是在毛泽东《在延安  文艺座谈会上的讲话》的精神指引下诞生的大型新歌剧。1945年由延安鲁迅艺术学院  ?...

Title: 47) 张春桥姚文元对上海舞蹈学校部分师生的讲话
Snippet: 传说《白毛女》最初不是人民创造的，而是地主阶级创造的，当时要搞减租减息，地主   ... 最后喜儿同大春分手了，电影结束在劳动上，这是小农经济的劳动，让喜儿去参军  ?...

Title: “地主”黄世仁南霸天周扒皮均为假典型_评论_腾讯网
Snippet: 2013年5月7日 ... 那么，历史上真实的刘文彩究竟是什么样的人呢？根据《刘文彩 ... 黄世仁是《白毛女》  中的恶霸地主，他一心想霸占佃户杨白劳的女儿喜儿。除夕之夜，?...

Title: 【2012年7月上国史】谁制造了《白毛女》红色经典--《文史参考》杂志官方 ...
Snippet: 2012年7月5日 ... 芭蕾舞界素有南“白”(《白毛女》)北“红”(《红色娘子军》)的美誉。上海芭蕾舞剧团的当家  戏《白毛女》，2012年6月初在北大的首演开启该院团在全国高校?...

Title: 史洪愿：“恶霸地主”刘文彩的真实面貌| 中共谎言| 白求恩| 大纪元
Snippet: 3 days ago ... 当年报纸上连篇累牍“铁证如山”的刘文彩的罪恶事实，电影一遍又一遍 .... 黄世仁是《  白毛女》中的恶霸地主，他一心想霸占佃户杨白劳的女儿喜儿。

Title: 黄世仁- 搜搜百科
Snippet: 黄世仁，电影《白毛女》中的一个主要反派角色，是新中国银幕上第一个地主 ... 基本上  女人在结婚前不会见到他的丈夫是什么样子的，不知道他是什么脾气，是什么?...


?. 《封神演义》中，哪吒的父亲托塔李天王名叫什么

Title: 李靖(神话人物) - 维基百科，自由的百科全书
Snippet: 本文介紹的是是中國神話中，又稱「托塔李天王」的神話人物。 ... 在中國神話中，李靖  又稱托塔李天王，是著名的道教護法神，也是中壇元帥哪吒的父親，協助武王克殷?...

Title: 小说- 一站到底百科
Snippet: 《西游记》中二郎神身边的神犬名叫什么？哮天犬…[详细] · 《封神演义》中，哪吒的  父亲托塔李天王名叫. 行家：霰雪日锋时间：2012年08月14日 《封神演义》中，哪吒的  ?...

Title: 哪吒- 维基百科，自由的百科全书
Snippet: 在很多故事中，李靖被稱為「托塔李天王」，哪吒則被稱為哪吒三 ... 但是幫助哪吒蓮花  化身者不是《封神演義》提到的太乙真人，而是如來?...

Title: 托塔天王_百度百科
Snippet: 在中国神话中，李靖又称托塔李天王，是著名的道教护法神，也. 李总兵. 是中坛元帅  哪吒的父亲，协助武王克殷有功，后位列仙班。在古典小说《封神演义》、《西游记》中?...

Title: 哪吒的父亲是李靖，既然哪吒是出生于唐朝，可为什么《封神演义》里 ...
Snippet: 哪吒的父亲是李靖，但这个李靖是古典神话小说《封神演义》《西游记》中人物，家住陈  塘关，有三子一女：金吒、木 ... 因为右手中常托玲珑宝塔，又被称为“托塔李天王”。

Title: 《封神演义》中哪吒的来历- 神魔小说天下神话网
Snippet: 唯有哪吒，人们只说“哪吒”，而不说“李哪吒”。有些人甚至只知道他的名字而不知道他  姓李。这说明他的名字独立性很强，姓氏是后加的，因而显得很不?...

Title: 《一站到底》题库及答案（20120316期）
Snippet: 刘邦、项羽 5.一站到底的题库网站是多少？ www.yizhandd.com 5.《封神演义》中，哪  吒的父亲托塔李天王名叫什么？李靖 6.《西游记》中二郎神身边的神犬名叫什么？

Title: 京剧脸谱——我喜欢的一门拓展课- 戏剧脸谱- 上海市辽阳中学
Snippet: 2013年5月15日 ... 我知道了京剧中张飞、黄盖、窦尔敦、孙悟空等的脸是什么样的；还知道 ... 在《封神  演义》中，托塔李天王名为李靖，是哪吒的父亲，陈塘关总兵，因哪吒?...

Title: 《西游记》中的托塔天王李靖-乐云-搜狐博客
Snippet: 2012年4月15日 ... 托塔李天王在《西游记》中登场的次数不多，主要有三次：一次是悟空因嫌 ... 镇妖降魔  ，不过小说中李天王主要是用它来对付自己的第三个儿子哪吒。

Title: 托塔李天王的真相微端《朝歌》神魔世界生存逻辑- 178最新网游
Snippet: 2012年6月7日 ... 托塔李天王原是商朝〈陈塘关〉的总兵，在纣王底下也是有势力的一名大将 ... 在封神  演义故事中，李靖作为哪吒的父亲很多时候是一个小丑或是反角的?...


?. 中央电视台著名节目《实话实说》的第一任主持人是谁

Title: 崔永元_百度百科
Snippet: 《小崔说事》、《小崔说立波秀》、《实话实说》、《谢天谢地，你来啦》等节目主持人、  纪录片《 ... 走出抑郁症阴影的崔永元曾在接受央视《人物》栏目专访时，自曝几年前得  重度?...

Title: 六十位央视美女主播写真集
Snippet: 和晶，女，新疆人。曾在上海电视台《智力大冲浪》做了三年主持人,之后去攻读了  研究生，2002年进入中国中央电视台开始主持《实话实说》，是中央电视台优秀的节目  ?...

Title: 盘点嫁给富豪的十大美女主播（图）—代军哥哥的博客—强国博客 ...
Snippet: 2013年6月3日 ... 张蕾是中央电视台节目主持人，毕业于中国传媒大学播音与主持专业。 ... 主持风格和  甜美可人的外表被誉为“央视新锐女主播第一人”。2月21日，网友?...

Title: 崔永元：我认为实话是我们最宝贵的东西-新华时政-新华网
Snippet: 2013年7月26日 ... 崔永元，中央电视台著名主持人。1996年以《实话实说》主持人 ... 第一次见小崔，是我  受节目组之邀参加他的《实话实说——在北京打工的日子》节目。

Title: 中央电视台著名节目《实话实说》的第一任主- 一站到底百科
Snippet: 2012年8月14日 ... 中央电视台著名节目《实话实说》的第一任主持人是谁？崔永元. 中央电视台著名节目  《实话实说》的第一任主持人是谁？崔永元. 上一篇：传说中的女娲?...

Title: 实话实说
Snippet: 实话实说CCTV.com. 新闻首页央视网首页网站导航. 实话实说首页视频专区视频  新闻中心. 最新视频. 点击观看. 《实话实说》的话告别作深情谢幕. 感谢每一位曾在《?...

Title: 梦之星
Snippet: 2013年8月9日 ... 刘 洋：中央电视台《实话实说》编导组组长、《奋斗》栏目总导演 ... 胜春：中央电视台  节目主持人，现主持央视《地理中国》、《从我做起》、《奋斗》等?...

Title: 嫁给富豪的十大美女主播_中国排行榜
Snippet: 2013年6月3日 ... 张蕾是中央电视台节目主持人，毕业于中国传媒大学播音与主持专业。 ... 主持风格和  甜美可人的外表被誉为“央视新锐女主播第一人”。2月21日，网友?...

Title: 央视热点聚焦--传媒--人民网
Snippet: 中央电视台主持人库. 4. 央视名嘴王利芬辞职办网站首日拍卖史玉柱3小时. 2 · 1 · 3 ·   4. 《新闻联播》 ... 改制后，各节目组不再从属于原中心，而改为播出所在频道管理。

Title: 崔永元和晶阿忆_看《实话实说》三位主持人-电视TV-搜狐娱乐
Snippet: 《实话实说》是中央电视台新闻评论部于1996年春季推出的一个新栏目，节目形式为  群体现场交谈，通过主持人、嘉宾、观众的共同参与和直接对话…>>详细?...


Question:1990年中国共产党的总书记是谁
ExpectAnswer:江泽民
Question:被火烧死的革命战士是谁
ExpectAnswer:邱少云
Question:请问初唐四杰是哪四位
ExpectAnswer:王勃
Question:中国第一枚奥运会游泳金牌获得者是谁?
ExpectAnswer:庄泳
Question:谁领导中国人民创立了新中国
ExpectAnswer:毛泽东
Question:我国古代历法"十二气历"是谁提出的 
ExpectAnswer:沈括
Question:中国共产党的创始人李大钊是被什么人杀害的
ExpectAnswer:张作霖
Question:谁发现的万有引力定理
ExpectAnswer:牛顿
Question:《白雪公主》的作者是谁
ExpectAnswer:格林兄弟
Question:《黄河大合唱》的作曲者是谁
ExpectAnswer:冼星海
Question:《儒林外史》的作者是谁 
ExpectAnswer:吴敬梓
Question:《宿命》是谁的作品
ExpectAnswer:东野
Question:三国演义中蜀国的五虎大将里被称为常胜将军的是谁
ExpectAnswer:赵子龙
Question:抗美援朝中国人民志愿军司令员是谁
ExpectAnswer:彭德怀
Question:羽毛球界被称为超级丹的运动员是谁
ExpectAnswer:林丹
Question:世界名画《和平鸽》的创作者是谁
ExpectAnswer:毕加索
Question:被称为书圣的古代书法家是哪个
ExpectAnswer:王羲之
Question:清朝太后身边最著名的贴身太监叫什么
ExpectAnswer:李莲英
Question:是谁发明的地震仪
ExpectAnswer:张衡
Question:是谁发明的印刷术
ExpectAnswer:毕升
Question:谁写了著名的诗篇《将进酒》
ExpectAnswer:李白
Question:谁是中国第一任的外交部长
ExpectAnswer:周恩来
Question:谁在香港电影《花样年华》中饰演男主角
ExpectAnswer:梁朝伟
Question:宋朝的开国皇帝是谁
ExpectAnswer:赵匡胤
Question:唐朝的第一个皇帝是谁
ExpectAnswer:李渊
Question:卧龙先生是谁
ExpectAnswer:诸葛亮
Question:射雕英雄传的作者是谁
ExpectAnswer:金庸
Question:已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
ExpectAnswer:费玉清
Question:纸是谁发明的
ExpectAnswer:蔡伦
Question:中国参加奥运会次数最多的运动员是谁
ExpectAnswer:王义夫
Question:作家老舍的原名叫什么
ExpectAnswer:舒庆春
Question:谁粉碎了四人帮
ExpectAnswer:华国锋
Question:徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
ExpectAnswer:林青霞
Question:中国空军第一任总司令是谁
ExpectAnswer:叶挺
Question:中华人民共和国是哪位民主人士提出的
ExpectAnswer:张奚若
Question:《二泉映月》的作者原名是什么 
ExpectAnswer:华彦均
Question:自由落体定律由谁发现
ExpectAnswer:伽利略
Question:最早发现x射线的科学家是谁
ExpectAnswer:伦琴
Question:微软亚洲研究院的院长是谁
ExpectAnswer:洪小文
Question:中国共产党这个名称是谁最早提出的
ExpectAnswer:蔡和森
Question:我国军史上第一位女将军是谁
ExpectAnswer:李贞
Question:现代奥林匹克运动创始人是谁
ExpectAnswer:顾拜旦
Question:文学名著《西游记》是谁的作品
ExpectAnswer:吴承恩
Question:星际航行理论的开创者是哪位科学家
ExpectAnswer:钱学森
Question:中国古代哪一位曾被称为“药王”
ExpectAnswer:孙思邈
Question:谁是微软的首席执行官
ExpectAnswer:鲍尔默
Question:谁死后布了七十二疑冢
ExpectAnswer:曹操
Question:曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
ExpectAnswer:周润发
Question:谁发明了蒸汽机
ExpectAnswer:瓦特
Question:中国古代名医华佗为谁所杀
ExpectAnswer:曹操
Question:谁提出了改革开放
ExpectAnswer:邓小平
Question:APDPlat的发起人是谁？
ExpectAnswer:杨尚川
Question:被称为画圣的古代画家是哪一位
ExpectAnswer:吴道子
Question:被称为酿酒行业的祖师是谁
ExpectAnswer:孔子
Question:被今人誉为"开眼看世界第一人"是谁
ExpectAnswer:林则徐
Question:被列为世界十大文豪之一的中国文学家是哪位
ExpectAnswer:鲁迅
Question:被誉为“钢琴之王”的作曲家是谁
ExpectAnswer:李斯特
Question:被誉为乐圣音乐家的是谁
ExpectAnswer:贝多芬
Question:被誉为中国摇滚的第一人是谁
ExpectAnswer:崔健
Question:跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
ExpectAnswer:蔡依林
Question:“冲冠一怒为红颜“中的红颜是指谁
ExpectAnswer:陈圆圆
Question:草圣指哪位书法家
ExpectAnswer:张旭
Question:查尔斯的第二任妻子是谁
ExpectAnswer:卡米拉
Question:英国王储查尔斯的妻子是谁
ExpectAnswer:卡米拉
Question:查尔斯的妻子是谁
ExpectAnswer:卡米拉
Question:长篇小说《林海雪原》的作者是谁
ExpectAnswer:曲波
Question:1994年谁是土库曼斯坦的总统
ExpectAnswer:尼亚佐夫
Question:《星尘》这首歌是谁写的
ExpectAnswer:马修
Question:《孙子》的作者别名是什么
ExpectAnswer:孙武
Question:“宝带桥”是谁建造的
ExpectAnswer:王仲舒
Question:2008年北京奥运会开幕式和闭幕式的总导演是谁
ExpectAnswer:张艺谋
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
Question:《西厢记》的作者是谁
ExpectAnswer:王实甫
Question:《西厢记》是谁的作品
ExpectAnswer:王实甫
Question:《幸运52》的主持人是谁
ExpectAnswer:李咏
Question:称为“数学之神”的科学家是谁
ExpectAnswer:阿基米德
Question:“初出茅庐”中茅庐的本意指谁的住处
ExpectAnswer:诸葛亮
Question:金庸原名是什么
ExpectAnswer:查良镛
Question:第一个获得国际权威的杰西·欧文斯奖的中国人是谁
ExpectAnswer:王军霞
Question:电视剧《新白娘子传奇》的主演叶童原名是什么
ExpectAnswer:李思思
Question:电影《英雄》的编剧是谁
ExpectAnswer:王斌
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
Question:《洛神赋图》是谁的作品
ExpectAnswer:曹植
Question:诗仙是谁
ExpectAnswer:李白
Question:岳不群的女儿叫什么名字
ExpectAnswer:岳灵珊
Question:我国明代“七下西洋”的航海家是谁
ExpectAnswer:郑和
Question:曹雪芹的《红楼梦》中，葬花的人是谁
ExpectAnswer:林黛玉
Question:金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
ExpectAnswer:谢逊
Question:第一位扮演邦女郎的亚洲女星是谁
ExpectAnswer:杨紫琼
Question:创办“精武门”的中国清末爱国武术家是谁
ExpectAnswer:霍元甲
Question:由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
ExpectAnswer:小柯
Question:以“莫须有”罪名毒害了名将岳飞的奸臣是谁
ExpectAnswer:秦桧
Question:被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
ExpectAnswer:周慧敏
Question:97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
ExpectAnswer:赵薇
Question:《西雅图不眠夜》的女主角是谁
ExpectAnswer:安妮
Question:清朝道光年间，在虎门销禁鸦片的民族英雄是谁
ExpectAnswer:林则徐
Question:一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
ExpectAnswer:李小龙
Question:电影《白毛女》中，抢走喜儿的地主叫什么名字
ExpectAnswer:黄世仁
Question:《封神演义》中，哪吒的父亲托塔李天王名叫什么
ExpectAnswer:李靖
Question:中央电视台著名节目《实话实说》的第一任主持人是谁
ExpectAnswer:崔永元
开始构造问答系统
模型：models/chineseFactored.ser.gz
模式文件目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/questionTypePatterns/
模式匹配策略启用文件：QuestionTypePatternsLevel1_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel2_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel3_true.txt
	模式文件：QuestionTypePatternsLevel1_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel2_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel3_true.txt
	是否允许多匹配：true
问答系统构造完成
使用【模式匹配】的方法判断问题类型： APDPlat的发起人是谁？
问题：APDPlat的发起人是谁？
开始设置默认词典路径
default.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/default.dic
ambiguity.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/ambiguity.dic
开始初始化自定义细分词性配置
自定义词典目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/custom/
忽略空行：
忽略空行：//	_stop	50
忽略空行：#	_stop	50
初始化自定义词数：2882
完成初始化自定义细分词性配置
词和词性序列：apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
词性序列：en/uj/n/v/RW.RWPersonSingle
对问题进行分词：APDPlat的发起人是谁？
分词结果为：apdplat 的 发起人 是 谁
句法树: 
句子依存关系：
	assmod(发起人-3, apdplat-1)
	assm(apdplat-1, 的-2)
	top(是-4, 发起人-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：发起人 是 谁
主谓宾词和词性序列：发起人/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: APDPlat的发起人是谁？ : APDPlat的发起人是谁？ : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: en/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 发起人/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: en/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 发起人/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【APDPlat的发起人是谁？】匹配到多个模式：
序号：1
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : APDPlat的发起人是谁？
	模式 : APDPlat的发起人是谁？
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : APDPlat的发起人是谁？
	模式 : APDPlat的发起人是谁？
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 1：APDPlat的发起人是谁？ 【问题类型：PERSON_NAME】
************************************
************************************
Question APDPlat的发起人是谁？
Question 候选答案：
杨尚川  1.0
作者  0.4125028269506984
创始人  0.3374604803554942
英雄榜  0.28799864530956526
余杰  0.24852716006209694
女孩  0.16743300709411324
ExpectAnswerRank: 1

mrr: 1.0
perfectCount: 1
notPerfectCount: 0
wrongCount: 0
unknownTypeCount: 0
questionCount: 1

MRR：100.0%
回答完美率：100.0%
回答不完美率：0.0%
回答错误率：0.0%
未知类型率：0.0%

执行搜索失败：
java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method) ~[na:1.7.0_45]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182) ~[na:1.7.0_45]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.7.0_45]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.7.0_45]
	at java.net.Socket.connect(Socket.java:579) ~[na:1.7.0_45]
	at java.net.Socket.connect(Socket.java:528) ~[na:1.7.0_45]
	at java.net.Socket.<init>(Socket.java:425) ~[na:1.7.0_45]
	at java.net.Socket.<init>(Socket.java:280) ~[na:1.7.0_45]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) ~[commons-httpclient-3.1.jar:na]
	at org.apdplat.qa.datasource.GoogleDataSource.search(GoogleDataSource.java:228) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.getAndAnswerQuestion(GoogleDataSource.java:196) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.getQuestion(GoogleDataSource.java:82) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.main(GoogleDataSource.java:282) [classes/:na]
结果页 1 没有搜索到结果
Question：APDPlat的发起人是谁？ 搜索到Evidence 0 条
开始构造问答系统
模型：models/chineseFactored.ser.gz
模式文件目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/questionTypePatterns/
模式匹配策略启用文件：QuestionTypePatternsLevel1_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel2_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel3_true.txt
	模式文件：QuestionTypePatternsLevel1_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel2_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel3_true.txt
	是否允许多匹配：true
问答系统构造完成
输入问题然后回车，以exit命令结束问题输入：
Question:高航是谁？
ExpectAnswer:null
没有从数据库中查询到问题：高航是谁？
没有从数据库中查询到问题：APDPlat的创始人是谁？
Question：APDPlat的创始人是谁？ 搜索到Evidence 9 条
将Question：APDPlat的创始人是谁？ 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
?. APDPlat的创始人是谁？

Title: 杨尚川的微博_腾讯微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专... @他 私信 更多 604广播 97收听 342听众 全部广播 相册 关于他 收听/听众 在他...

Title: 杨尚川的微博_微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专家 |北京 海淀区 杨尚川 160 关注 249 粉丝 335 微博 ...

Title: Java应用级产品开发平台APDPlat作者杨尚川专访 - 名家访谈 - IT...
Snippet: APDPlat是Application Product Development Platform的缩写,意为应用级产品开发平台... FineUI创始人三生石上在CSDN发了帖子 CSDN的《2013年度中国优秀开源项目评选》...

Title: 杨尚川_Tencent Weibo
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专... @He Private Messages More 609Posts 98Following 342Followers 全部广播 关于He ...

Title: APDPlat/pom.xml at master · ysc/APDPlat · GitHub
Snippet: <url>https://github.com/ysc/APDPlat</url> <connection>scm:git:git://... <name>杨尚川(框架创始人)</name> <post>yang-shangchuan@qq.com</post>...

Title: 杨尚川的微博_腾讯微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专... 私信 更多 609广播 98收听 345听众 全部广播 相册 关于他 收听/听众 在他的广播...

Title: 杨尚川的微博_腾讯微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专... 私信 更多 609广播 98收听 346听众 全部广播 相册 关于他 收听/听众 在他的...

Title: 杨尚川的微博_微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专家 |浙江 杭州 杨尚川 160 关注 255 粉丝 336 微博 他的主页 微博 个人资料 相册...

Title: 杨尚川的微博_微博
Snippet: 系统架构设计师_系统分析师_APDPlat开源项目创始人_资深Nutch搜索引擎专家 |浙江 杭州 杨尚川 160 关注 252 粉丝 335 微博 他的主页 微博 个人资料 相册...


开始构造问答系统
模型：models/chineseFactored.ser.gz
模式文件目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/questionTypePatterns/
模式匹配策略启用文件：QuestionTypePatternsLevel1_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel2_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel3_true.txt
	模式文件：QuestionTypePatternsLevel1_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel2_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel3_true.txt
	是否允许多匹配：true
问答系统构造完成
从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:1990年中国共产党的总书记是谁:江泽民
Question:1990年中国共产党的总书记是谁
ExpectAnswer:江泽民
没有从数据库中查询到问题：1990年中国共产党的总书记是谁
Question：1990年中国共产党的总书记是谁 搜索到Evidence 9 条
将Question：1990年中国共产党的总书记是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 1990年中国共产党的总书记是谁
问题：1990年中国共产党的总书记是谁
开始设置默认词典路径
default.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/default.dic
ambiguity.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/ambiguity.dic
开始初始化自定义细分词性配置
自定义词典目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/custom/
忽略空行：
忽略空行：//	_stop	50
忽略空行：#	_stop	50
初始化自定义词数：2882
完成初始化自定义细分词性配置
词和词性序列：1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
词性序列：m/nt/uj/nr/v/RW.RWPersonSingle
对问题进行分词：1990年中国共产党的总书记是谁
分词结果为：1990年 中国共产党 的 总书记 是 谁
句法树: 
句子依存关系：
	nn(中国共产党-2, 1990年-1)
	assmod(总书记-4, 中国共产党-2)
	assm(中国共产党-2, 的-3)
	top(是-5, 总书记-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：总书记 是 谁
主谓宾词和词性序列：总书记/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 1990年中国共产党的总书记是谁 : 1990年中国共产党的总书记是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/nt/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 总书记/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: m/nt/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 总书记/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: m/nt/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 总书记/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【1990年中国共产党的总书记是谁】匹配到多个模式：
序号：1
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 1990年中国共产党的总书记是谁
	模式 : 1990年中国共产党的总书记是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1990年中国共产党的总书记是谁
	模式 : 1990年中国共产党的总书记是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 1990年/m 中国共产党/nt 的/uj 总书记/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/nt/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总书记/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 1：1990年中国共产党的总书记是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 1990年中国共产党的总书记是谁
Question 候选答案：
主席  1.0
习近平  0.830545329270008
金日成  0.6724583738162488
江泽民  0.5209251583215186
富平  0.3671841316662223
研究生  0.3664753879726087
博客  0.3370708074813409
卢承德  0.33702288376505585
胡耀邦  0.33697414901586153
赵紫阳  0.33695527703377526
博文  0.3061425758444
李源潮  0.21647502807341204
常委  0.1839576584404104
李鹏  0.18380411287306403
乔石  0.18375760642786773
李瑞环  0.18371646131234215
朱镕基  0.18366844713158778
刘华清  0.1836366989963012
胡锦涛  0.183599058161861
ExpectAnswerRank: 4

mrr: 0.25
perfectCount: 0
notPerfectCount: 1
wrongCount: 0
unknownTypeCount: 0
questionCount: 1

MRR：25.0%
回答完美率：0.0%
回答不完美率：100.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被火烧死的革命战士是谁:邱少云
Question:被火烧死的革命战士是谁
ExpectAnswer:邱少云
没有从数据库中查询到问题：被火烧死的革命战士是谁
Question：被火烧死的革命战士是谁 搜索到Evidence 10 条
将Question：被火烧死的革命战士是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 被火烧死的革命战士是谁
问题：被火烧死的革命战士是谁
词和词性序列：被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle 
词性序列：p/v/v/uj/vn/n/v/RW.RWPersonSingle
对问题进行分词：被火烧死的革命战士是谁
分词结果为：被 火烧 死 的 革命 战士 是 谁
句法树: 
句子依存关系：
	pass(火烧-2, 被-1)
	rcmod(战士-6, 火烧-2)
	rcomp(火烧-2, 死-3)
	cpm(火烧-2, 的-4)
	nn(战士-6, 革命-5)
	top(是-7, 战士-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：战士 是 谁
主谓宾词和词性序列：战士/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被火烧死的革命战士是谁 : 被火烧死的革命战士是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/v/v/uj/vn/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 战士/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/v/v/uj/vn/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 战士/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被火烧死的革命战士是谁】匹配到多个模式：
序号：1
	问题 : 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/v/uj/vn/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 战士/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/v/v/uj/vn/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 战士/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 被火烧死的革命战士是谁
	模式 : 被火烧死的革命战士是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被火烧死的革命战士是谁
	模式 : 被火烧死的革命战士是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/v/uj/vn/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 战士/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 火烧/v 死/v 的/uj 革命/vn 战士/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/v/v/uj/vn/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 战士/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 2：被火烧死的革命战士是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被火烧死的革命战士是谁
Question 候选答案：
邱少云  1.0
英雄  0.17288306423740102
高清  0.1454581125292507
严守纪律  0.12422044022553323
华元彪  0.12272699677098955
美女  0.12266683785541185
马步芳  0.07269974981566424
王友才  0.07256809531875562
冀自显  0.07256230794640112
董存瑞  0.07251380051333509
ExpectAnswerRank: 1

mrr: 1.25
perfectCount: 1
notPerfectCount: 1
wrongCount: 0
unknownTypeCount: 0
questionCount: 2

MRR：62.5%
回答完美率：50.0%
回答不完美率：50.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:请问初唐四杰是哪四位:王勃
Question:请问初唐四杰是哪四位
ExpectAnswer:王勃
没有从数据库中查询到问题：请问初唐四杰是哪四位
Question：请问初唐四杰是哪四位 搜索到Evidence 10 条
将Question：请问初唐四杰是哪四位 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 请问初唐四杰是哪四位
问题：请问初唐四杰是哪四位
词和词性序列：请问/v 初唐四杰/nr 是哪/RW.RWLocationSingle 四位/m 
词性序列：v/nr/RW.RWLocationSingle/m
对问题进行分词：请问初唐四杰是哪四位
分词结果为：请问 初唐四杰 是哪 四位
句法树: 
句子依存关系：
	root(ROOT-0, 请问-1)
	nummod(是哪-3, 初唐四杰-2)
	dobj(请问-1, 是哪-3)
	range(请问-1, 四位-4)
主谓宾：是哪 请问 四位
主谓宾词和词性序列：是哪/RW.RWLocationSingle 请问/v 四位/m
主谓宾词性序列：RW.RWLocationSingle/v/m

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 请问初唐四杰是哪四位 : 请问初唐四杰是哪四位 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 请问/v 初唐四杰/nr 是哪/RW.RWLocationSingle 四位/m  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: v/nr/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 是哪/RW.RWLocationSingle 请问/v 四位/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: RW.RWLocationSingle/v/m : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【请问初唐四杰是哪四位】匹配到多个模式：
序号：1
	问题 : 请问/v 初唐四杰/nr 是哪/RW.RWLocationSingle 四位/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : v/nr/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 是哪/RW.RWLocationSingle 请问/v 四位/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : RW.RWLocationSingle/v/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 请问初唐四杰是哪四位
	模式 : 请问初唐四杰是哪四位
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 请问初唐四杰是哪四位
	模式 : 请问初唐四杰是哪四位
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 请问/v 初唐四杰/nr 是哪/RW.RWLocationSingle 四位/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : v/nr/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 是哪/RW.RWLocationSingle 请问/v 四位/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : RW.RWLocationSingle/v/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 3：请问初唐四杰是哪四位 【问题类型：PERSON_NAME】
************************************
************************************
Question 请问初唐四杰是哪四位
Question 候选答案：
杨炯  1.0
王勃  0.9902140133877998
卢照邻  0.9780821778008217
骆宾王  0.9779789000006502
文学家  0.3484269155010529
王杨卢  0.23172675395709247
陈子昂  0.1782097515740369
唐初四杰  0.1744911702788191
唐初  0.14084004252246532
作家  0.13635628860666302
人才  0.1363430339758316
诗人  0.12596563171870723
卡佩恩  0.11544860944305291
文诗  0.11541988680424865
杨卢骆  0.11539243659754393
紫羽  0.1153916900508764
男人  0.10504241776970268
宫体诗  0.0634117257582261
ExpectAnswerRank: 2

mrr: 1.75
perfectCount: 1
notPerfectCount: 2
wrongCount: 0
unknownTypeCount: 0
questionCount: 3

MRR：58.333333333333336%
回答完美率：33.33333333333333%
回答不完美率：66.66666666666666%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国第一枚奥运会游泳金牌获得者是谁?:庄泳
Question:中国第一枚奥运会游泳金牌获得者是谁?
ExpectAnswer:庄泳
没有从数据库中查询到问题：中国第一枚奥运会游泳金牌获得者是谁?
Question：中国第一枚奥运会游泳金牌获得者是谁? 搜索到Evidence 9 条
将Question：中国第一枚奥运会游泳金牌获得者是谁? 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国第一枚奥运会游泳金牌获得者是谁?
问题：中国第一枚奥运会游泳金牌获得者是谁?
词和词性序列：中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
对问题进行分词：中国第一枚奥运会游泳金牌获得者是谁?
分词结果为：中国 第一枚 奥运会 游泳 金牌 获得者 是 谁
句法树: 
句子依存关系：
	nn(获得者-6, 中国-1)
	nummod(获得者-6, 第一枚-2)
	nn(获得者-6, 奥运会-3)
	nn(获得者-6, 游泳-4)
	nn(获得者-6, 金牌-5)
	top(是-7, 获得者-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：获得者 是 谁
主谓宾词和词性序列：获得者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 获得者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 获得者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 获得者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国第一枚奥运会游泳金牌获得者是谁?】匹配到多个模式：
序号：1
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国/ns 第一枚/m 奥运会/N.CONCEPT 游泳/vn 金牌/N.CONCEPT 获得者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/m/N.CONCEPT/vn/N.CONCEPT/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 获得者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel2_true.txt ，是否允许多个匹配：true
问题类型转换失败，默认人名：DefinitionSOB->SubjectVerb
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel2_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 4：中国第一枚奥运会游泳金牌获得者是谁? 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国第一枚奥运会游泳金牌获得者是谁?
Question 候选答案：
庄泳  1.0
运动员  0.6446072994811813
王国洛  0.5265069430956794
许海峰  0.19454551162043668
冠军  0.18889688103286975
庄永  0.16112896048366585
ExpectAnswerRank: 1

mrr: 2.75
perfectCount: 2
notPerfectCount: 2
wrongCount: 0
unknownTypeCount: 0
questionCount: 4

MRR：68.75%
回答完美率：50.0%
回答不完美率：50.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁领导中国人民创立了新中国:毛泽东
Question:谁领导中国人民创立了新中国
ExpectAnswer:毛泽东
没有从数据库中查询到问题：谁领导中国人民创立了新中国
Question：谁领导中国人民创立了新中国 搜索到Evidence 8 条
将Question：谁领导中国人民创立了新中国 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 谁领导中国人民创立了新中国
问题：谁领导中国人民创立了新中国
词和词性序列：谁/RW.RWPersonSingle 领导/n 中国/ns 人民/n 创立/v 了/ul 新/a 中国/ns 
词性序列：RW.RWPersonSingle/n/ns/n/v/ul/a/ns
对问题进行分词：谁领导中国人民创立了新中国
分词结果为：谁 领导 中国 人民 创立 了 新 中国
句法树: 
句子依存关系：
	dep(领导-2, 谁-1)
	nsubj(创立-5, 领导-2)
	nn(人民-4, 中国-3)
	nsubj(创立-5, 人民-4)
	root(ROOT-0, 创立-5)
	asp(创立-5, 了-6)
	amod(中国-8, 新-7)
	dobj(创立-5, 中国-8)
主谓宾：领导 创立 中国
主谓宾词和词性序列：领导/n 创立/v 中国/ns
主谓宾词性序列：n/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁领导中国人民创立了新中国 : 谁领导中国人民创立了新中国 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 领导/n 中国/ns 人民/n 创立/v 了/ul 新/a 中国/ns  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/n/ns/n/v/ul/a/ns : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁领导中国人民创立了新中国】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 领导/n 中国/ns 人民/n 创立/v 了/ul 新/a 中国/ns 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/n/ns/n/v/ul/a/ns
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁领导中国人民创立了新中国
	模式 : 谁领导中国人民创立了新中国
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁领导中国人民创立了新中国
	模式 : 谁领导中国人民创立了新中国
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 领导/n 中国/ns 人民/n 创立/v 了/ul 新/a 中国/ns 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/n/ns/n/v/ul/a/ns
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 5：谁领导中国人民创立了新中国 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁领导中国人民创立了新中国
Question 候选答案：
易博客  1.0
毛泽东  0.536880236264473
同志  0.48783286606438403
高瞻远  0.487773415541235
ExpectAnswerRank: 2

mrr: 3.25
perfectCount: 2
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 5

MRR：65.0%
回答完美率：40.0%
回答不完美率：60.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:我国古代历法"十二气历"是谁提出的 :沈括
Question:我国古代历法"十二气历"是谁提出的 
ExpectAnswer:沈括
没有从数据库中查询到问题：我国古代历法"十二气历"是谁提出的 
Question：我国古代历法"十二气历"是谁提出的  搜索到Evidence 9 条
将Question：我国古代历法"十二气历"是谁提出的  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 我国古代历法"十二气历"是谁提出的 
问题：我国古代历法"十二气历"是谁提出的
词和词性序列：我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
词性序列：ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
对问题进行分词：我国古代历法"十二气历"是谁提出的
分词结果为：我国 古代 历法 十二 气 历 是 谁 提出 的
句法树: 
句子依存关系：
	nn(历法-3, 我国-1)
	nn(历法-3, 古代-2)
	nn(气-5, 历法-3)
	nummod(气-5, 十二-4)
	nsubj(是-7, 气-5)
	advmod(是-7, 历-6)
	root(ROOT-0, 是-7)
	nsubj(提出-9, 谁-8)
	attr(是-7, 提出-9)
	cpm(提出-9, 的-10)
主谓宾：气 是 提出
主谓宾词和词性序列：气/n 是/v 提出/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 我国古代历法"十二气历"是谁提出的 : 我国古代历法"十二气历"是谁提出的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【我国古代历法"十二气历"是谁提出的 】匹配到多个模式：
序号：1
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : 我国古代历法"十二气历"是谁提出的
	模式 : 我国古代历法"十二气历"是谁提出的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国古代历法"十二气历"是谁提出的
	模式 : 我国古代历法"十二气历"是谁提出的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 我国/ns 古代/t 历法/n 十二/m 气/n 历/d 是/v 谁/RW.RWPersonSingle 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/t/n/m/n/d/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 6：我国古代历法"十二气历"是谁提出的  【问题类型：PERSON_NAME】
************************************
************************************
Question 我国古代历法"十二气历"是谁提出的 
Question 候选答案：
沈括  1.0
豆丁网  0.3024054623668398
太初  0.21155111549178096
夏小正  0.15578341416877453
殷历  0.1557785028626584
ExpectAnswerRank: 1

mrr: 4.25
perfectCount: 3
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 6

MRR：70.83333333333334%
回答完美率：50.0%
回答不完美率：50.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国共产党的创始人李大钊是被什么人杀害的:张作霖
Question:中国共产党的创始人李大钊是被什么人杀害的
ExpectAnswer:张作霖
没有从数据库中查询到问题：中国共产党的创始人李大钊是被什么人杀害的
Question：中国共产党的创始人李大钊是被什么人杀害的 搜索到Evidence 10 条
将Question：中国共产党的创始人李大钊是被什么人杀害的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 中国共产党的创始人李大钊是被什么人杀害的
问题：中国共产党的创始人李大钊是被什么人杀害的
词和词性序列：中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj 
词性序列：nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj
对问题进行分词：中国共产党的创始人李大钊是被什么人杀害的
分词结果为：中国共产党 的 创始人 李大钊 是 被 什么人 杀害 的
句法树: 
句子依存关系：
	assmod(创始人-3, 中国共产党-1)
	assm(中国共产党-1, 的-2)
	nn(李大钊-4, 创始人-3)
	top(是-5, 李大钊-4)
	root(ROOT-0, 是-5)
	pass(杀害-8, 被-6)
	nsubj(杀害-8, 什么人-7)
	attr(是-5, 杀害-8)
	cpm(杀害-8, 的-9)
主谓宾：李大钊 是 杀害
主谓宾词和词性序列：李大钊/nr 是/v 杀害/v
主谓宾词性序列：nr/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国共产党的创始人李大钊是被什么人杀害的 : 中国共产党的创始人李大钊是被什么人杀害的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj  : .*(RW.RWPersonMulti).* : Person->Multi1
匹配成功: nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj : .*(RW.RWPersonMulti).* : Person->Multi1
匹配成功: 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).* : Person->Multi3
匹配成功: nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).* : Person->Multi3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国共产党的创始人李大钊是被什么人杀害的】匹配到多个模式：
序号：1
	问题 : 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj 
	模式 : .*(RW.RWPersonMulti).*
	分类 : Person->Multi1
序号：2
	问题 : nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj
	模式 : .*(RW.RWPersonMulti).*
	分类 : Person->Multi1
序号：3
	问题 : 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).*
	分类 : Person->Multi3
序号：4
	问题 : nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).*
	分类 : Person->Multi3
序号：5
	问题 : 中国共产党的创始人李大钊是被什么人杀害的
	模式 : 中国共产党的创始人李大钊是被什么人杀害的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国共产党的创始人李大钊是被什么人杀害的
	模式 : 中国共产党的创始人李大钊是被什么人杀害的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj 
	模式 : .*(RW.RWPersonMulti).*
	分类 : Person->Multi1
序号：2
	问题 : nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj
	模式 : .*(RW.RWPersonMulti).*
	分类 : Person->Multi1
序号：3
	问题 : 中国共产党/nt 的/uj 创始人/nr 李大钊/nr 是/v 被/p 什么人/RW.RWPersonMulti 杀害/v 的/uj 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).*
	分类 : Person->Multi3
序号：4
	问题 : nt/uj/nr/nr/v/p/RW.RWPersonMulti/v/uj
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonMulti).*
	分类 : Person->Multi3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 7：中国共产党的创始人李大钊是被什么人杀害的 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国共产党的创始人李大钊是被什么人杀害的
Question 候选答案：
张作霖  1.0
栗子  0.307130728617489
谢谢您  0.15357489348456704
冯玉祥  0.06402248486940272
ExpectAnswerRank: 1

mrr: 5.25
perfectCount: 4
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 7

MRR：75.0%
回答完美率：57.14285714285714%
回答不完美率：42.857142857142854%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁发现的万有引力定理:牛顿
Question:谁发现的万有引力定理
ExpectAnswer:牛顿
没有从数据库中查询到问题：谁发现的万有引力定理
Question：谁发现的万有引力定理 搜索到Evidence 9 条
将Question：谁发现的万有引力定理 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 谁发现的万有引力定理
问题：谁发现的万有引力定理
词和词性序列：谁/RW.RWPersonSingle 发现/v 的/uj 万有引力/n 定理/n 
词性序列：RW.RWPersonSingle/v/uj/n/n
对问题进行分词：谁发现的万有引力定理
分词结果为：谁 发现 的 万有引力 定理
句法树: 
句子依存关系：
	nsubj(发现-2, 谁-1)
	rcmod(定理-5, 发现-2)
	cpm(发现-2, 的-3)
	nummod(定理-5, 万有引力-4)
	root(ROOT-0, 定理-5)
主谓宾：发现 定理 万有引力
主谓宾词和词性序列：发现/v 定理/n 万有引力/n
主谓宾词性序列：v/n/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁发现的万有引力定理 : 谁发现的万有引力定理 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 发现/v 的/uj 万有引力/n 定理/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/uj/n/n : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁发现的万有引力定理】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 发现/v 的/uj 万有引力/n 定理/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/uj/n/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁发现的万有引力定理
	模式 : 谁发现的万有引力定理
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁发现的万有引力定理
	模式 : 谁发现的万有引力定理
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 发现/v 的/uj 万有引力/n 定理/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/uj/n/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 8：谁发现的万有引力定理 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁发现的万有引力定理
Question 候选答案：
牛顿  1.0
卡文迪许  0.19686375102690562
科学家  0.15467203417124306
阿里巴巴  0.12859662839713507
伽利略  0.1031529971452351
ExpectAnswerRank: 1

mrr: 6.25
perfectCount: 5
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 8

MRR：78.125%
回答完美率：62.5%
回答不完美率：37.5%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《白雪公主》的作者是谁:格林兄弟
Question:《白雪公主》的作者是谁
ExpectAnswer:格林兄弟
没有从数据库中查询到问题：《白雪公主》的作者是谁
Question：《白雪公主》的作者是谁 搜索到Evidence 9 条
将Question：《白雪公主》的作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 《白雪公主》的作者是谁
问题：《白雪公主》的作者是谁
词和词性序列：白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《白雪公主》的作者是谁
分词结果为：白雪公主 的 作者 是 谁
句法树: 
句子依存关系：
	assmod(作者-3, 白雪公主-1)
	assm(白雪公主-1, 的-2)
	top(是-4, 作者-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：作者 是 谁
主谓宾词和词性序列：作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《白雪公主》的作者是谁 : 《白雪公主》的作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《白雪公主》的作者是谁】匹配到多个模式：
序号：1
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《白雪公主》的作者是谁
	模式 : 《白雪公主》的作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《白雪公主》的作者是谁
	模式 : 《白雪公主》的作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 白雪公主/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 9：《白雪公主》的作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 《白雪公主》的作者是谁
Question 候选答案：
格林兄弟  1.0
格林  0.8099595170897081
研究者  0.5552233711380407
特尔思  0.33807949479415134
古月晓  0.3239196668959401
博客  0.31473507476525764
雅科  0.3022463720784981
雅各  0.301925232379284
和威廉  0.30188597482908386
科布  0.30186202234861753
弟弟  0.30172190250381314
威廉  0.3017188237858215
人物  0.19436378963624706
ExpectAnswerRank: 1

mrr: 7.25
perfectCount: 6
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 9

MRR：80.55555555555556%
回答完美率：66.66666666666666%
回答不完美率：33.33333333333333%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《黄河大合唱》的作曲者是谁:冼星海
Question:《黄河大合唱》的作曲者是谁
ExpectAnswer:冼星海
没有从数据库中查询到问题：《黄河大合唱》的作曲者是谁
Question：《黄河大合唱》的作曲者是谁 搜索到Evidence 9 条
将Question：《黄河大合唱》的作曲者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 《黄河大合唱》的作曲者是谁
问题：《黄河大合唱》的作曲者是谁
词和词性序列：黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《黄河大合唱》的作曲者是谁
分词结果为：黄河 大合唱 的 作曲者 是 谁
句法树: 
句子依存关系：
	nn(大合唱-2, 黄河-1)
	assmod(作曲者-4, 大合唱-2)
	assm(大合唱-2, 的-3)
	top(是-5, 作曲者-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：作曲者 是 谁
主谓宾词和词性序列：作曲者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《黄河大合唱》的作曲者是谁 : 《黄河大合唱》的作曲者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作曲者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作曲者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作曲者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《黄河大合唱》的作曲者是谁】匹配到多个模式：
序号：1
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《黄河大合唱》的作曲者是谁
	模式 : 《黄河大合唱》的作曲者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《黄河大合唱》的作曲者是谁
	模式 : 《黄河大合唱》的作曲者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 黄河/ns 大合唱/n 的/uj 作曲者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作曲者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 10：《黄河大合唱》的作曲者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 《黄河大合唱》的作曲者是谁
Question 候选答案：
冼星海  1.0
词作者  0.27818423158438443
大侠  0.2299480616787463
名人  0.19695568847876027
作者  0.16151272511330556
诗人  0.16150769497031064
曲作者  0.1615006076233039
先生  0.13355087345379152
作曲家  0.13348950487277664
ExpectAnswerRank: 1

mrr: 8.25
perfectCount: 7
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 10

MRR：82.5%
回答完美率：70.0%
回答不完美率：30.0%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《儒林外史》的作者是谁 :吴敬梓
Question:《儒林外史》的作者是谁 
ExpectAnswer:吴敬梓
没有从数据库中查询到问题：《儒林外史》的作者是谁 
Question：《儒林外史》的作者是谁  搜索到Evidence 8 条
将Question：《儒林外史》的作者是谁  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 《儒林外史》的作者是谁 
问题：《儒林外史》的作者是谁
词和词性序列：儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nz/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《儒林外史》的作者是谁
分词结果为：儒林外史 的 作者 是 谁
句法树: 
句子依存关系：
	assmod(作者-3, 儒林外史-1)
	assm(儒林外史-1, 的-2)
	top(是-4, 作者-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：作者 是 谁
主谓宾词和词性序列：作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《儒林外史》的作者是谁 : 《儒林外史》的作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《儒林外史》的作者是谁 】匹配到多个模式：
序号：1
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《儒林外史》的作者是谁
	模式 : 《儒林外史》的作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《儒林外史》的作者是谁
	模式 : 《儒林外史》的作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 儒林外史/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 11：《儒林外史》的作者是谁  【问题类型：PERSON_NAME】
************************************
************************************
Question 《儒林外史》的作者是谁 
Question 候选答案：
吴敬梓  1.0
阿尔杰  0.22273472526641935
秦淮寓  0.16933222729403613
文木  0.16931923658060416
清雍正  0.16930447244870392
敬梓  0.16189744269608564
ExpectAnswerRank: 1

mrr: 9.25
perfectCount: 8
notPerfectCount: 3
wrongCount: 0
unknownTypeCount: 0
questionCount: 11

MRR：84.0909090909091%
回答完美率：72.72727272727273%
回答不完美率：27.27272727272727%
回答错误率：0.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《宿命》是谁的作品:东野
Question:《宿命》是谁的作品
ExpectAnswer:东野
没有从数据库中查询到问题：《宿命》是谁的作品
Question：《宿命》是谁的作品 搜索到Evidence 9 条
将Question：《宿命》是谁的作品 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 《宿命》是谁的作品
问题：《宿命》是谁的作品
词和词性序列：宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
词性序列：n/v/RW.RWPersonSingle/N.ObjectArt
对问题进行分词：《宿命》是谁的作品
分词结果为：宿命 是 谁的 作品
句法树: 
句子依存关系：
	top(是-2, 宿命-1)
	root(ROOT-0, 是-2)
	nn(作品-4, 谁的-3)
	attr(是-2, 作品-4)
主谓宾：宿命 是 作品
主谓宾词和词性序列：宿命/n 是/v 作品/N.ObjectArt
主谓宾词性序列：n/v/N.ObjectArt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《宿命》是谁的作品 : 《宿命》是谁的作品 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle/N.ObjectArt : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle/N.ObjectArt : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: n/v/RW.RWPersonSingle/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: 宿命/n 是/v 作品/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: n/v/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《宿命》是谁的作品】匹配到多个模式：
序号：1
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 宿命/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 《宿命》是谁的作品
	模式 : 《宿命》是谁的作品
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《宿命》是谁的作品
	模式 : 《宿命》是谁的作品
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 宿命/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 宿命/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 12：《宿命》是谁的作品 【问题类型：PERSON_NAME】
************************************
************************************
Question 《宿命》是谁的作品
Question 候选答案：
史铁生  1.0
周厉王  0.18071289946348357
许嵩  0.1751593236590387
豆丁网  0.07233874786923744
博客  0.06680285986034797
荀子  0.0662815375976404
隋唐演义  0.06072557760780314
ExpectAnswerRank: -1

mrr: 9.25
perfectCount: 8
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 12

MRR：77.08333333333334%
回答完美率：66.66666666666666%
回答不完美率：25.0%
回答错误率：8.333333333333332%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:三国演义中蜀国的五虎大将里被称为常胜将军的是谁:赵子龙
Question:三国演义中蜀国的五虎大将里被称为常胜将军的是谁
ExpectAnswer:赵子龙
没有从数据库中查询到问题：三国演义中蜀国的五虎大将里被称为常胜将军的是谁
Question：三国演义中蜀国的五虎大将里被称为常胜将军的是谁 搜索到Evidence 10 条
将Question：三国演义中蜀国的五虎大将里被称为常胜将军的是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
问题：三国演义中蜀国的五虎大将里被称为常胜将军的是谁
词和词性序列：三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
词性序列：nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
对问题进行分词：三国演义中蜀国的五虎大将里被称为常胜将军的是谁
分词结果为：三国演义 中 蜀国 的 五虎 大将 里 被 称为 常胜将军 的 是 谁
句法树: 
句子依存关系：
	nummod(中-2, 三国演义-1)
	nn(蜀国-3, 中-2)
	assmod(大将-6, 蜀国-3)
	assm(蜀国-3, 的-4)
	nummod(大将-6, 五虎-5)
	lobj(里-7, 大将-6)
	loc(称为-9, 里-7)
	pass(称为-9, 被-8)
	top(是-12, 称为-9)
	dobj(称为-9, 常胜将军-10)
	cpm(称为-9, 的-11)
	root(ROOT-0, 是-12)
	attr(是-12, 谁-13)
主谓宾：称为 是 谁
主谓宾词和词性序列：称为/v 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：v/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 三国演义中蜀国的五虎大将里被称为常胜将军的是谁 : 三国演义中蜀国的五虎大将里被称为常胜将军的是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 称为/v 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 称为/v 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【三国演义中蜀国的五虎大将里被称为常胜将军的是谁】匹配到多个模式：
序号：1
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 称为/v 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : v/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 称为/v 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
	模式 : 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
	模式 : 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 称为/v 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : v/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 三国演义/nz 中/f 蜀国/ns 的/uj 五虎/nz 大将/n 里/f 被/p 称为/v 常胜将军/nr 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : nz/f/ns/uj/nz/n/f/p/v/nr/uj/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 称为/v 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 13：三国演义中蜀国的五虎大将里被称为常胜将军的是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 三国演义中蜀国的五虎大将里被称为常胜将军的是谁
Question 候选答案：
赵子龙  1.0
豆丁网  0.2233674070915033
苏轼  0.22076384989661993
凤姐  0.2116012341406463
邓梦妍  0.2110368554713242
小三  0.2092246123128426
赵云  0.2092167434243884
林丹  0.12228241421291777
运动员  0.12227710620239654
达人  0.10814516074227712
词人  0.10581072347533564
郑板桥  0.10581012810302967
ExpectAnswerRank: 1

mrr: 10.25
perfectCount: 9
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 13

MRR：78.84615384615384%
回答完美率：69.23076923076923%
回答不完美率：23.076923076923077%
回答错误率：7.6923076923076925%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:抗美援朝中国人民志愿军司令员是谁:彭德怀
Question:抗美援朝中国人民志愿军司令员是谁
ExpectAnswer:彭德怀
没有从数据库中查询到问题：抗美援朝中国人民志愿军司令员是谁
Question：抗美援朝中国人民志愿军司令员是谁 搜索到Evidence 9 条
将Question：抗美援朝中国人民志愿军司令员是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 抗美援朝中国人民志愿军司令员是谁
问题：抗美援朝中国人民志愿军司令员是谁
词和词性序列：抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
词性序列：j/nt/nr/v/RW.RWPersonSingle
对问题进行分词：抗美援朝中国人民志愿军司令员是谁
分词结果为：抗美援朝 中国人民志愿军 司令员 是 谁
句法树: 
句子依存关系：
	nn(司令员-3, 抗美援朝-1)
	nn(司令员-3, 中国人民志愿军-2)
	top(是-4, 司令员-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：司令员 是 谁
主谓宾词和词性序列：司令员/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 抗美援朝中国人民志愿军司令员是谁 : 抗美援朝中国人民志愿军司令员是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: j/nt/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 司令员/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: j/nt/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 司令员/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: j/nt/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 司令员/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【抗美援朝中国人民志愿军司令员是谁】匹配到多个模式：
序号：1
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 抗美援朝中国人民志愿军司令员是谁
	模式 : 抗美援朝中国人民志愿军司令员是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 抗美援朝中国人民志愿军司令员是谁
	模式 : 抗美援朝中国人民志愿军司令员是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 抗美援朝/j 中国人民志愿军/nt 司令员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : j/nt/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 司令员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 14：抗美援朝中国人民志愿军司令员是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 抗美援朝中国人民志愿军司令员是谁
Question 候选答案：
彭德怀  1.0
粟裕  0.30979955001761245
贺龙  0.2523567052557854
邓小平  0.24514158190158036
朱德  0.24503416011895043
黄继光  0.24474863835175104
总司令  0.23752239209048503
邱少云  0.2232843989812409
元帅  0.18799885593455945
彭大帅  0.18089103128923467
但林彪  0.17038614495836146
周知  0.12818210476859448
博客  0.11738166633014811
林彪  0.1065290558601054
毛泽东  0.10638247494379477
西陆网  0.07526053521211803
何孔德  0.06433922180783797
ExpectAnswerRank: 1

mrr: 11.25
perfectCount: 10
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 14

MRR：80.35714285714286%
回答完美率：71.42857142857143%
回答不完美率：21.428571428571427%
回答错误率：7.142857142857142%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:羽毛球界被称为超级丹的运动员是谁:林丹
Question:羽毛球界被称为超级丹的运动员是谁
ExpectAnswer:林丹
没有从数据库中查询到问题：羽毛球界被称为超级丹的运动员是谁
Question：羽毛球界被称为超级丹的运动员是谁 搜索到Evidence 10 条
将Question：羽毛球界被称为超级丹的运动员是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 羽毛球界被称为超级丹的运动员是谁
问题：羽毛球界被称为超级丹的运动员是谁
词和词性序列：羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
词性序列：N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
对问题进行分词：羽毛球界被称为超级丹的运动员是谁
分词结果为：羽毛球 界 被 称为 超级 丹 的 运动员 是 谁
句法树: 
句子依存关系：
	nn(界-2, 羽毛球-1)
	nsubjpass(称为-4, 界-2)
	pass(称为-4, 被-3)
	rcmod(运动员-8, 称为-4)
	amod(丹-6, 超级-5)
	dobj(称为-4, 丹-6)
	cpm(称为-4, 的-7)
	top(是-9, 运动员-8)
	root(ROOT-0, 是-9)
	attr(是-9, 谁-10)
主谓宾：运动员 是 谁
主谓宾词和词性序列：运动员/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 羽毛球界被称为超级丹的运动员是谁 : 羽毛球界被称为超级丹的运动员是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【羽毛球界被称为超级丹的运动员是谁】匹配到多个模式：
序号：1
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 羽毛球界被称为超级丹的运动员是谁
	模式 : 羽毛球界被称为超级丹的运动员是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 羽毛球界被称为超级丹的运动员是谁
	模式 : 羽毛球界被称为超级丹的运动员是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 羽毛球/N.CONCEPT 界/n 被/p 称为/v 超级/b 丹/j 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : N.CONCEPT/n/p/v/b/j/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 15：羽毛球界被称为超级丹的运动员是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 羽毛球界被称为超级丹的运动员是谁
Question 候选答案：
林丹  1.0
常胜将军  0.2642202567674102
词人  0.17081517939645333
苏轼  0.1708110020910135
赵子龙  0.1639580726761013
阿尔杰  0.1525564402116514
豆丁网  0.09748104269640342
谢杏芳  0.08881000611040853
豆丁  0.08658212635494919
英雄  0.08426251262692586
关羽  0.0842604031705968
冠军  0.08200689711202601
凤姐  0.07974543635010899
马拉多纳  0.07974455643821307
邦德  0.07972451544136565
高堂  0.07972101652888568
原名  0.07970771897288202
莱德杯  0.07970530848704793
ExpectAnswerRank: 1

mrr: 12.25
perfectCount: 11
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 15

MRR：81.66666666666667%
回答完美率：73.33333333333333%
回答不完美率：20.0%
回答错误率：6.666666666666667%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:世界名画《和平鸽》的创作者是谁:毕加索
Question:世界名画《和平鸽》的创作者是谁
ExpectAnswer:毕加索
没有从数据库中查询到问题：世界名画《和平鸽》的创作者是谁
Question：世界名画《和平鸽》的创作者是谁 搜索到Evidence 9 条
将Question：世界名画《和平鸽》的创作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界名画《和平鸽》的创作者是谁
问题：世界名画《和平鸽》的创作者是谁
词和词性序列：世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/n/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：世界名画《和平鸽》的创作者是谁
分词结果为：世界 名画 和平鸽 的 创作者 是 谁
句法树: 
句子依存关系：
	nn(名画-2, 世界-1)
	nn(和平鸽-3, 名画-2)
	assmod(创作者-5, 和平鸽-3)
	assm(和平鸽-3, 的-4)
	top(是-6, 创作者-5)
	root(ROOT-0, 是-6)
	attr(是-6, 谁-7)
主谓宾：创作者 是 谁
主谓宾词和词性序列：创作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界名画《和平鸽》的创作者是谁 : 世界名画《和平鸽》的创作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/n/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 创作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/n/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 创作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/n/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 创作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界名画《和平鸽》的创作者是谁】匹配到多个模式：
序号：1
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 世界名画《和平鸽》的创作者是谁
	模式 : 世界名画《和平鸽》的创作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界名画《和平鸽》的创作者是谁
	模式 : 世界名画《和平鸽》的创作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 世界/n 名画/n 和平鸽/n 的/uj 创作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 创作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 16：世界名画《和平鸽》的创作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 世界名画《和平鸽》的创作者是谁
Question 候选答案：
毕加索  1.0
画家  0.2266251818412902
人物  0.15351349238366055
女神  0.11884282515330197
伊斯塔  0.11884135575337224
燕小七  0.11392790942102596
雷诺阿  0.10408826424733518
ExpectAnswerRank: 1

mrr: 13.25
perfectCount: 12
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 16

MRR：82.8125%
回答完美率：75.0%
回答不完美率：18.75%
回答错误率：6.25%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被称为书圣的古代书法家是哪个:王羲之
Question:被称为书圣的古代书法家是哪个
ExpectAnswer:王羲之
没有从数据库中查询到问题：被称为书圣的古代书法家是哪个
Question：被称为书圣的古代书法家是哪个 搜索到Evidence 9 条
将Question：被称为书圣的古代书法家是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被称为书圣的古代书法家是哪个
问题：被称为书圣的古代书法家是哪个
词和词性序列：被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle 
词性序列：p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle
对问题进行分词：被称为书圣的古代书法家是哪个
分词结果为：被 称为 书圣 的 古代 书法家 是 哪个
句法树: 
句子依存关系：
	pass(称为-2, 被-1)
	rcmod(书法家-6, 称为-2)
	dobj(称为-2, 书圣-3)
	cpm(称为-2, 的-4)
	nn(书法家-6, 古代-5)
	top(是-7, 书法家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 哪个-8)
主谓宾：书法家 是 哪个
主谓宾词和词性序列：书法家/nr 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被称为书圣的古代书法家是哪个 : 被称为书圣的古代书法家是哪个 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 书法家/nr 是/v 哪个/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被称为书圣的古代书法家是哪个】匹配到多个模式：
序号：1
	问题 : 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 书法家/nr 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 被称为书圣的古代书法家是哪个
	模式 : 被称为书圣的古代书法家是哪个
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被称为书圣的古代书法家是哪个
	模式 : 被称为书圣的古代书法家是哪个
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 书法家/nr 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 被/p 称为/v 书圣/ns 的/uj 古代/t 书法家/nr 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : p/v/ns/uj/t/nr/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 17：被称为书圣的古代书法家是哪个 【问题类型：PERSON_NAME】
************************************
************************************
Question 被称为书圣的古代书法家是哪个
Question 候选答案：
王羲之  1.0
王献之  0.29257763586595986
王安石  0.2339159798765974
阿凡提  0.2338821559220075
顾恺之  0.15804041648535708
钟繇  0.15227675238305693
兰亭序  0.14035630436969848
王曦  0.09947881488279428
后代子孙  0.09945820401534854
于玄  0.09944390430707327
小圣  0.09940225054158244
ExpectAnswerRank: 1

mrr: 14.25
perfectCount: 13
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 17

MRR：83.82352941176471%
回答完美率：76.47058823529412%
回答不完美率：17.647058823529413%
回答错误率：5.88235294117647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:清朝太后身边最著名的贴身太监叫什么:李莲英
Question:清朝太后身边最著名的贴身太监叫什么
ExpectAnswer:李莲英
没有从数据库中查询到问题：清朝太后身边最著名的贴身太监叫什么
Question：清朝太后身边最著名的贴身太监叫什么 搜索到Evidence 10 条
将Question：清朝太后身边最著名的贴身太监叫什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 清朝太后身边最著名的贴身太监叫什么
问题：清朝太后身边最著名的贴身太监叫什么
词和词性序列：清朝/t 太后/n 身边/s 最/RW.RWSuperlativeAdj 著名/a 的/uj 贴身/vn 太监/nr 叫/v 什么/RW.RWOrdinarySingle 
词性序列：t/n/s/RW.RWSuperlativeAdj/a/uj/vn/nr/v/RW.RWOrdinarySingle
对问题进行分词：清朝太后身边最著名的贴身太监叫什么
分词结果为：清朝 太后 身边 最 著名 的 贴身 太监 叫 什么
句法树: 
句子依存关系：
	nn(太后-2, 清朝-1)
	nn(身边-3, 太后-2)
	nn(太监-8, 身边-3)
	advmod(著名-5, 最-4)
	assmod(太监-8, 著名-5)
	assm(著名-5, 的-6)
	nn(太监-8, 贴身-7)
	nsubj(叫-9, 太监-8)
	root(ROOT-0, 叫-9)
	dobj(叫-9, 什么-10)
主谓宾：太监 叫 什么
主谓宾词和词性序列：太监/nr 叫/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 清朝太后身边最著名的贴身太监叫什么 : 清朝太后身边最著名的贴身太监叫什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 清朝/t 太后/n 身边/s 最/RW.RWSuperlativeAdj 著名/a 的/uj 贴身/vn 太监/nr 叫/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: t/n/s/RW.RWSuperlativeAdj/a/uj/vn/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 太监/nr 叫/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【清朝太后身边最著名的贴身太监叫什么】匹配到多个模式：
序号：1
	问题 : 清朝/t 太后/n 身边/s 最/RW.RWSuperlativeAdj 著名/a 的/uj 贴身/vn 太监/nr 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : t/n/s/RW.RWSuperlativeAdj/a/uj/vn/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 太监/nr 叫/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 清朝太后身边最著名的贴身太监叫什么
	模式 : 清朝太后身边最著名的贴身太监叫什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 清朝太后身边最著名的贴身太监叫什么
	模式 : 清朝太后身边最著名的贴身太监叫什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 清朝/t 太后/n 身边/s 最/RW.RWSuperlativeAdj 著名/a 的/uj 贴身/vn 太监/nr 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : t/n/s/RW.RWSuperlativeAdj/a/uj/vn/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 太监/nr 叫/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 18：清朝太后身边最著名的贴身太监叫什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 清朝太后身边最著名的贴身太监叫什么
Question 候选答案：
李莲英  1.0
项羽  0.49164520457486893
豆丁  0.10298319949002449
宋江  0.09721909518216891
古龙  0.0972118624913047
李清照  0.09720478663075943
ExpectAnswerRank: 1

mrr: 15.25
perfectCount: 14
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 18

MRR：84.72222222222221%
回答完美率：77.77777777777779%
回答不完美率：16.666666666666664%
回答错误率：5.555555555555555%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:是谁发明的地震仪:张衡
Question:是谁发明的地震仪
ExpectAnswer:张衡
没有从数据库中查询到问题：是谁发明的地震仪
Question：是谁发明的地震仪 搜索到Evidence 9 条
将Question：是谁发明的地震仪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 是谁发明的地震仪
问题：是谁发明的地震仪
词和词性序列：是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n 
词性序列：v/RW.RWPersonSingle/N.Object/uj/n
对问题进行分词：是谁发明的地震仪
分词结果为：是 谁 发明 的 地震仪
句法树: 
句子依存关系：
	root(ROOT-0, 是-1)
	nsubj(发明-3, 谁-2)
	rcmod(地震仪-5, 发明-3)
	cpm(发明-3, 的-4)
	attr(是-1, 地震仪-5)
主谓宾：是 地震仪 发明
主谓宾词和词性序列：是/v 地震仪/n 发明/N.Object
主谓宾词性序列：v/n/N.Object

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 是谁发明的地震仪 : 是谁发明的地震仪 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/RW.RWPersonSingle/N.Object/uj/n : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/RW.RWPersonSingle/N.Object/uj/n : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【是谁发明的地震仪】匹配到多个模式：
序号：1
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 是谁发明的地震仪
	模式 : 是谁发明的地震仪
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 是谁发明的地震仪
	模式 : 是谁发明的地震仪
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 地震仪/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 19：是谁发明的地震仪 【问题类型：PERSON_NAME】
************************************
************************************
Question 是谁发明的地震仪
Question 候选答案：
张衡  1.0
毕淑敏  0.23802777617105852
科学家  0.20927819095700992
华佗  0.2024910934190164
蔡伦  0.20232202652384892
李毅  0.18236478003673007
博客  0.10163637951921604
宋韵  0.07231267773068889
文并茂  0.07230108717705257
巨星  0.07229504115337607
ExpectAnswerRank: 1

mrr: 16.25
perfectCount: 15
notPerfectCount: 3
wrongCount: 1
unknownTypeCount: 0
questionCount: 19

MRR：85.52631578947368%
回答完美率：78.94736842105263%
回答不完美率：15.789473684210526%
回答错误率：5.263157894736842%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:是谁发明的印刷术:毕升
Question:是谁发明的印刷术
ExpectAnswer:毕升
没有从数据库中查询到问题：是谁发明的印刷术
Question：是谁发明的印刷术 搜索到Evidence 8 条
将Question：是谁发明的印刷术 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 是谁发明的印刷术
问题：是谁发明的印刷术
词和词性序列：是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n 
词性序列：v/RW.RWPersonSingle/N.Object/uj/n
对问题进行分词：是谁发明的印刷术
分词结果为：是 谁 发明 的 印刷术
句法树: 
句子依存关系：
	root(ROOT-0, 是-1)
	nsubj(发明-3, 谁-2)
	rcmod(印刷术-5, 发明-3)
	cpm(发明-3, 的-4)
	attr(是-1, 印刷术-5)
主谓宾：是 印刷术 发明
主谓宾词和词性序列：是/v 印刷术/n 发明/N.Object
主谓宾词性序列：v/n/N.Object

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 是谁发明的印刷术 : 是谁发明的印刷术 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/RW.RWPersonSingle/N.Object/uj/n : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/RW.RWPersonSingle/N.Object/uj/n : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【是谁发明的印刷术】匹配到多个模式：
序号：1
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 是谁发明的印刷术
	模式 : 是谁发明的印刷术
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 是谁发明的印刷术
	模式 : 是谁发明的印刷术
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 印刷术/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : v/RW.RWPersonSingle/N.Object/uj/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 20：是谁发明的印刷术 【问题类型：PERSON_NAME】
************************************
************************************
Question 是谁发明的印刷术
Question 候选答案：
发明者  1.0
古滕贝格  0.8568934504381285
毕升  0.6506207589549823
宋仁宗  0.6358831411700675
约翰内斯  0.4001332979359318
谷登堡  0.3632874541719027
苏菲  0.3632410559139369
凯迪  0.3291450639505778
维基百科  0.23137215604626618
蒙古人  0.2179006842696023
ExpectAnswerRank: 3

mrr: 16.583333333333332
perfectCount: 15
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 20

MRR：82.91666666666666%
回答完美率：75.0%
回答不完美率：20.0%
回答错误率：5.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁写了著名的诗篇《将进酒》:李白
Question:谁写了著名的诗篇《将进酒》
ExpectAnswer:李白
没有从数据库中查询到问题：谁写了著名的诗篇《将进酒》
Question：谁写了著名的诗篇《将进酒》 搜索到Evidence 10 条
将Question：谁写了著名的诗篇《将进酒》 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 谁写了著名的诗篇《将进酒》
问题：谁写了著名的诗篇《将进酒》
词和词性序列：谁/RW.RWPersonSingle 写/v 了/ul 著名/a 的/uj 诗篇/n 将进酒/n 
词性序列：RW.RWPersonSingle/v/ul/a/uj/n/n
对问题进行分词：谁写了著名的诗篇《将进酒》
分词结果为：谁 写 了 著名 的 诗篇 将进酒
句法树: 
句子依存关系：
	nsubj(写-2, 谁-1)
	root(ROOT-0, 写-2)
	asp(写-2, 了-3)
	assmod(将进酒-7, 著名-4)
	assm(著名-4, 的-5)
	nn(将进酒-7, 诗篇-6)
	dobj(写-2, 将进酒-7)
主谓宾：谁 写 将进酒
主谓宾词和词性序列：谁/RW.RWPersonSingle 写/v 将进酒/n
主谓宾词性序列：RW.RWPersonSingle/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁写了著名的诗篇《将进酒》 : 谁写了著名的诗篇《将进酒》 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 写/v 了/ul 著名/a 的/uj 诗篇/n 将进酒/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/ul/a/uj/n/n : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 写/v 将进酒/n : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/n : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁写了著名的诗篇《将进酒》】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 写/v 了/ul 著名/a 的/uj 诗篇/n 将进酒/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/a/uj/n/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 写/v 将进酒/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁写了著名的诗篇《将进酒》
	模式 : 谁写了著名的诗篇《将进酒》
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁写了著名的诗篇《将进酒》
	模式 : 谁写了著名的诗篇《将进酒》
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 写/v 了/ul 著名/a 的/uj 诗篇/n 将进酒/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/a/uj/n/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 写/v 将进酒/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 21：谁写了著名的诗篇《将进酒》 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁写了著名的诗篇《将进酒》
Question 候选答案：
李白  1.0
诗人  0.9161052151153337
大明楼  0.2954685128804262
金星  0.28192678370594765
母亲  0.26969144155576147
张若虚  0.25819751586408085
洛神赋  0.23009473016810536
洛神  0.22945747447128503
文学家  0.22915270074966718
原诗  0.22829350762079392
庾开府  0.2282836502710427
俊逸  0.22827206142840245
鲍参军  0.22826844972947666
曹植  0.20174988802604338
杜甫  0.19824905771142085
阿里巴巴  0.15095615671134544
作者  0.14912136146800656
刘禹锡  0.09487900798905073
孟郊  0.09416165374390106
学生  0.09414953842797805
杜牧  0.06724442326259952
银烛秋  0.06723694703915321
ExpectAnswerRank: 1

mrr: 17.583333333333332
perfectCount: 16
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 21

MRR：83.73015873015872%
回答完美率：76.19047619047619%
回答不完美率：19.047619047619047%
回答错误率：4.761904761904762%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁是中国第一任的外交部长:周恩来
Question:谁是中国第一任的外交部长
ExpectAnswer:周恩来
没有从数据库中查询到问题：谁是中国第一任的外交部长
Question：谁是中国第一任的外交部长 搜索到Evidence 8 条
将Question：谁是中国第一任的外交部长 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 谁是中国第一任的外交部长
问题：谁是中国第一任的外交部长
词和词性序列：谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr 
词性序列：RW.RWPersonSingle/v/ns/m/uj/nr
对问题进行分词：谁是中国第一任的外交部长
分词结果为：谁 是 中国 第一任 的 外交部长
句法树: 
句子依存关系：
	top(是-2, 谁-1)
	root(ROOT-0, 是-2)
	dep(第一任-4, 中国-3)
	assmod(外交部长-6, 第一任-4)
	assm(第一任-4, 的-5)
	attr(是-2, 外交部长-6)
主谓宾：谁 是 外交部长
主谓宾词和词性序列：谁/RW.RWPersonSingle 是/v 外交部长/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁是中国第一任的外交部长 : 谁是中国第一任的外交部长 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/ns/m/uj/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 外交部长/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/ns/m/uj/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 是/v 外交部长/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁是中国第一任的外交部长】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ns/m/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 外交部长/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/ns/m/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 外交部长/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 谁是中国第一任的外交部长
	模式 : 谁是中国第一任的外交部长
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁是中国第一任的外交部长
	模式 : 谁是中国第一任的外交部长
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ns/m/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 外交部长/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 中国/ns 第一任/m 的/uj 外交部长/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/ns/m/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 外交部长/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 22：谁是中国第一任的外交部长 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁是中国第一任的外交部长
Question 候选答案：
周恩来  1.0
毛泽东  0.5534644904413772
刘少奇  0.5528409163609339
朱德  0.5525262691107148
部长  0.5436118016786955
总统  0.27589067125898853
胡汉民  0.25680891321264754
李肇星  0.25632718948272004
总理  0.23683367809605646
周恩  0.23664888246440802
陈毅  0.21699561288662578
飞飞  0.13820537799780877
伍豪  0.13818501345828182
ExpectAnswerRank: 1

mrr: 18.583333333333332
perfectCount: 17
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 22

MRR：84.46969696969695%
回答完美率：77.27272727272727%
回答不完美率：18.181818181818183%
回答错误率：4.545454545454546%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁在香港电影《花样年华》中饰演男主角:梁朝伟
Question:谁在香港电影《花样年华》中饰演男主角
ExpectAnswer:梁朝伟
没有从数据库中查询到问题：谁在香港电影《花样年华》中饰演男主角
Question：谁在香港电影《花样年华》中饰演男主角 搜索到Evidence 10 条
将Question：谁在香港电影《花样年华》中饰演男主角 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 谁在香港电影《花样年华》中饰演男主角
问题：谁在香港电影《花样年华》中饰演男主角
词和词性序列：谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr 
词性序列：RW.RWPersonSingle/p/n/l/f/v/nr
对问题进行分词：谁在香港电影《花样年华》中饰演男主角
分词结果为：谁 在 香港电影 花样年华 中 饰演 男主角
句法树: 
句子依存关系：
	nsubj(饰演-6, 谁-1)
	prep(饰演-6, 在-2)
	nn(花样年华-4, 香港电影-3)
	lobj(中-5, 花样年华-4)
	plmod(在-2, 中-5)
	root(ROOT-0, 饰演-6)
	dobj(饰演-6, 男主角-7)
主谓宾：谁 饰演 男主角
主谓宾词和词性序列：谁/RW.RWPersonSingle 饰演/v 男主角/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁在香港电影《花样年华》中饰演男主角 : 谁在香港电影《花样年华》中饰演男主角 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/p/n/l/f/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 饰演/v 男主角/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/p/n/l/f/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 饰演/v 男主角/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁在香港电影《花样年华》中饰演男主角】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/p/n/l/f/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 饰演/v 男主角/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/p/n/l/f/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 饰演/v 男主角/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 谁在香港电影《花样年华》中饰演男主角
	模式 : 谁在香港电影《花样年华》中饰演男主角
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁在香港电影《花样年华》中饰演男主角
	模式 : 谁在香港电影《花样年华》中饰演男主角
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/p/n/l/f/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 饰演/v 男主角/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 在/p 香港电影/n 花样年华/l 中/f 饰演/v 男主角/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/p/n/l/f/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 饰演/v 男主角/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 23：谁在香港电影《花样年华》中饰演男主角 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁在香港电影《花样年华》中饰演男主角
Question 候选答案：
梁朝伟  1.0
张曼玉  0.31952390459597585
豆丁网  0.2496628226960227
女主角  0.19424896711836434
张国荣  0.16640141832851832
玄黄  0.15249259375066646
演员  0.11120982329130635
导演  0.11119280225942467
多明戈  0.07616682207086077
卡雷拉斯  0.05154724321967345
ExpectAnswerRank: 1

mrr: 19.583333333333332
perfectCount: 18
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 23

MRR：85.14492753623188%
回答完美率：78.26086956521739%
回答不完美率：17.391304347826086%
回答错误率：4.3478260869565215%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:宋朝的开国皇帝是谁:赵匡胤
Question:宋朝的开国皇帝是谁
ExpectAnswer:赵匡胤
没有从数据库中查询到问题：宋朝的开国皇帝是谁
Question：宋朝的开国皇帝是谁 搜索到Evidence 9 条
将Question：宋朝的开国皇帝是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 宋朝的开国皇帝是谁
问题：宋朝的开国皇帝是谁
词和词性序列：宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
词性序列：t/uj/vn/nr/v/RW.RWPersonSingle
对问题进行分词：宋朝的开国皇帝是谁
分词结果为：宋朝 的 开国 皇帝 是 谁
句法树: 
句子依存关系：
	assmod(皇帝-4, 宋朝-1)
	assm(宋朝-1, 的-2)
	amod(皇帝-4, 开国-3)
	top(是-5, 皇帝-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：皇帝 是 谁
主谓宾词和词性序列：皇帝/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 宋朝的开国皇帝是谁 : 宋朝的开国皇帝是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: t/uj/vn/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: t/uj/vn/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: t/uj/vn/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【宋朝的开国皇帝是谁】匹配到多个模式：
序号：1
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 宋朝的开国皇帝是谁
	模式 : 宋朝的开国皇帝是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 宋朝的开国皇帝是谁
	模式 : 宋朝的开国皇帝是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 宋朝/t 的/uj 开国/vn 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/uj/vn/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 24：宋朝的开国皇帝是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 宋朝的开国皇帝是谁
Question 候选答案：
赵匡胤  1.0
宋太祖  0.6499733687855341
陈桥  0.3121021757238172
赵匡  0.2722094735469856
赵顼  0.26635322380145515
古立宪  0.26633115255738904
帝德  0.26632788195213786
王功  0.2663258539347249
武钦仁  0.2663212474096711
史海  0.23402439914285575
魏武挥  0.18846851733754694
戎华  0.18844384228244856
赵弘殷  0.11047497531238934
郭威幕  0.11045729859717114
郭威  0.11044733580139164
ExpectAnswerRank: 1

mrr: 20.583333333333332
perfectCount: 19
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 24

MRR：85.76388888888889%
回答完美率：79.16666666666666%
回答不完美率：16.666666666666664%
回答错误率：4.166666666666666%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:唐朝的第一个皇帝是谁:李渊
Question:唐朝的第一个皇帝是谁
ExpectAnswer:李渊
没有从数据库中查询到问题：唐朝的第一个皇帝是谁
Question：唐朝的第一个皇帝是谁 搜索到Evidence 9 条
将Question：唐朝的第一个皇帝是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 唐朝的第一个皇帝是谁
问题：唐朝的第一个皇帝是谁
词和词性序列：唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
词性序列：t/uj/m/nr/v/RW.RWPersonSingle
对问题进行分词：唐朝的第一个皇帝是谁
分词结果为：唐朝 的 第一个 皇帝 是 谁
句法树: 
句子依存关系：
	assmod(皇帝-4, 唐朝-1)
	assm(唐朝-1, 的-2)
	nummod(皇帝-4, 第一个-3)
	top(是-5, 皇帝-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：皇帝 是 谁
主谓宾词和词性序列：皇帝/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 唐朝的第一个皇帝是谁 : 唐朝的第一个皇帝是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: t/uj/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: t/uj/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: t/uj/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 皇帝/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【唐朝的第一个皇帝是谁】匹配到多个模式：
序号：1
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 唐朝的第一个皇帝是谁
	模式 : 唐朝的第一个皇帝是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 唐朝的第一个皇帝是谁
	模式 : 唐朝的第一个皇帝是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 唐朝/t 的/uj 第一个/m 皇帝/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 皇帝/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 25：唐朝的第一个皇帝是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 唐朝的第一个皇帝是谁
Question 候选答案：
李渊  1.0
李世民  0.5035699343277967
于北朝  0.23380814164366462
关陇  0.23380217098958095
李建成  0.2275973889544243
李隆基  0.227525272309152
李治  0.22751003164382688
李荣昌  0.2275001722140524
中国人  0.18336903405068689
人物  0.18329701767289422
静宁  0.1769685492756442
明星  0.17696457825618409
诗人  0.17692969977484074
唐高祖  0.16434500968616447
李渊唐  0.16434174958841885
于长安  0.16434159485449784
於长安  0.16433379628617334
唐太宗  0.1643212798856212
唐懿宗  0.15811438915651582
高宗  0.13978129335995856
元永徽  0.13281286260944128
武则天  0.13277524265809643
ExpectAnswerRank: 1

mrr: 21.583333333333332
perfectCount: 20
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 25

MRR：86.33333333333333%
回答完美率：80.0%
回答不完美率：16.0%
回答错误率：4.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:卧龙先生是谁:诸葛亮
Question:卧龙先生是谁
ExpectAnswer:诸葛亮
没有从数据库中查询到问题：卧龙先生是谁
Question：卧龙先生是谁 搜索到Evidence 8 条
将Question：卧龙先生是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 卧龙先生是谁
问题：卧龙先生是谁
词和词性序列：卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/nr/v/RW.RWPersonSingle
对问题进行分词：卧龙先生是谁
分词结果为：卧龙 先生 是 谁
句法树: 
句子依存关系：
	nn(先生-2, 卧龙-1)
	top(是-3, 先生-2)
	root(ROOT-0, 是-3)
	attr(是-3, 谁-4)
主谓宾：先生 是 谁
主谓宾词和词性序列：先生/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 卧龙先生是谁 : 卧龙先生是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 先生/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 先生/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 先生/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【卧龙先生是谁】匹配到多个模式：
序号：1
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 卧龙先生是谁
	模式 : 卧龙先生是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 卧龙先生是谁
	模式 : 卧龙先生是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 卧龙/ns 先生/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 先生/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 26：卧龙先生是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 卧龙先生是谁
Question 候选答案：
诸葛亮  1.0
刘备  0.30940882947612425
唐寅  0.23379361621821285
孔明  0.22401266148052174
小伙子  0.21629852567581934
曹操  0.21621273319713163
孙松  0.21617519660164206
伏龙  0.17344535634050598
丞相  0.16454730005983662
凤雏  0.1033798185860495
司马徽  0.10112867119275833
诸葛孔明  0.09290963926499221
司马懿  0.08513666891849017
二人  0.08249095267314956
侍刘备  0.08246946840711596
汉司马徽  0.08240878647229799
徐庶  0.07223851551169827
庞德公  0.07223851551169827
诸葛乔  0.05201457020434173
诸葛瑾  0.051863765354896146
伯松  0.05176329408544802
原字仲  0.05174271225080891
诸葛瞻  0.051665800050005393
司马昭之  0.0415468301116561
子司马炎  0.041498902322185095
ExpectAnswerRank: 1

mrr: 22.583333333333332
perfectCount: 21
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 26

MRR：86.85897435897435%
回答完美率：80.76923076923077%
回答不完美率：15.384615384615385%
回答错误率：3.8461538461538463%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:射雕英雄传的作者是谁:金庸
Question:射雕英雄传的作者是谁
ExpectAnswer:金庸
没有从数据库中查询到问题：射雕英雄传的作者是谁
Question：射雕英雄传的作者是谁 搜索到Evidence 8 条
将Question：射雕英雄传的作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 射雕英雄传的作者是谁
问题：射雕英雄传的作者是谁
词和词性序列：射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：射雕英雄传的作者是谁
分词结果为：射雕 英雄传 的 作者 是 谁
句法树: 
句子依存关系：
	rcmod(作者-4, 射雕-1)
	dobj(射雕-1, 英雄传-2)
	cpm(射雕-1, 的-3)
	top(是-5, 作者-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：作者 是 谁
主谓宾词和词性序列：作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 射雕英雄传的作者是谁 : 射雕英雄传的作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【射雕英雄传的作者是谁】匹配到多个模式：
序号：1
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 射雕英雄传的作者是谁
	模式 : 射雕英雄传的作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 射雕英雄传的作者是谁
	模式 : 射雕英雄传的作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 射雕/n 英雄传/n 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 27：射雕英雄传的作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 射雕英雄传的作者是谁
Question 候选答案：
金庸  1.0
人物  0.6007667571114113
王重阳  0.35601496734940247
宁宗庆  0.28483386424842505
郭啸天  0.2847958079206311
杨铁心  0.28478996616039376
金国王子  0.2847794115687001
完颜洪烈  0.2847764282270885
作家  0.2545236233101944
郭靖  0.2136707485721221
黄蓉  0.2136614331913405
洪七公  0.21365327692616023
温瑞安  0.20443016532689606
原名  0.19371874281342324
古龙  0.18349754007246064
查良镛  0.17301238908508798
英雄  0.14325051952406842
金山词霸  0.09179294846389519
金大侠  0.0816174040419125
铁弓  0.08156918941834793
万世  0.08154901534782409
ExpectAnswerRank: 1

mrr: 23.583333333333332
perfectCount: 22
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 27

MRR：87.34567901234568%
回答完美率：81.48148148148148%
回答不完美率：14.814814814814813%
回答错误率：3.7037037037037033%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 :费玉清
Question:已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
ExpectAnswer:费玉清
没有从数据库中查询到问题：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
Question：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁  搜索到Evidence 10 条
将Question：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
问题：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
词和词性序列：已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
词性序列：d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
对问题进行分词：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
分词结果为：已 使用 有 小哥 一 称 与 周杰伦 共同 演唱 千里 之外 的 男歌手 是 谁
句法树: 
句子依存关系：
	advmod(有-3, 已-1)
	mmod(有-3, 使用-2)
	root(ROOT-0, 有-3)
	nn(称-6, 小哥-4)
	nummod(称-6, 一-5)
	dobj(有-3, 称-6)
	prep(演唱-10, 与-7)
	pobj(与-7, 周杰伦-8)
	advmod(演唱-10, 共同-9)
	dep(有-3, 演唱-10)
	lobj(之外-12, 千里-11)
	assmod(男歌手-14, 之外-12)
	assm(之外-12, 的-13)
	dobj(演唱-10, 男歌手-14)
	dep(有-3, 是-15)
	attr(是-15, 谁-16)
主谓宾：已 有 是
主谓宾词和词性序列：已/d 有/v 是/v
主谓宾词性序列：d/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 : 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 】匹配到多个模式：
序号：1
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
	模式 : 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
	模式 : 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 已/d 使用/v 有/v 小哥/nr 一/m 称/v 与/p 周杰伦/nr 共同/d 演唱/v 千里/m 之外/f 的/uj 男歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : d/v/v/nr/m/v/p/nr/d/v/m/f/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 28：已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁  【问题类型：PERSON_NAME】
************************************
************************************
Question 已使用有小哥一称，与周杰伦共同演唱千里之外的男歌手是谁 
Question 候选答案：
费玉清  1.0
龚琳娜  0.5172186236407219
明星  0.22674021493840013
大侠  0.19689506490173242
豆丁  0.10144231903148539
ExpectAnswerRank: 1

mrr: 24.583333333333332
perfectCount: 23
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 28

MRR：87.79761904761905%
回答完美率：82.14285714285714%
回答不完美率：14.285714285714285%
回答错误率：3.571428571428571%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:纸是谁发明的:蔡伦
Question:纸是谁发明的
ExpectAnswer:蔡伦
没有从数据库中查询到问题：纸是谁发明的
Question：纸是谁发明的 搜索到Evidence 9 条
将Question：纸是谁发明的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 纸是谁发明的
问题：纸是谁发明的
词和词性序列：纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 
词性序列：n/v/RW.RWPersonSingle/N.Object/uj
对问题进行分词：纸是谁发明的
分词结果为：纸 是 谁 发明 的
句法树: 
句子依存关系：
	top(是-2, 纸-1)
	root(ROOT-0, 是-2)
	nsubj(发明-4, 谁-3)
	attr(是-2, 发明-4)
	cpm(发明-4, 的-5)
主谓宾：纸 是 发明
主谓宾词和词性序列：纸/n 是/v 发明/N.Object
主谓宾词性序列：n/v/N.Object

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 纸是谁发明的 : 纸是谁发明的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle/N.Object/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle/N.Object/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【纸是谁发明的】匹配到多个模式：
序号：1
	问题 : 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/N.Object/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/N.Object/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 纸是谁发明的
	模式 : 纸是谁发明的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 纸是谁发明的
	模式 : 纸是谁发明的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/N.Object/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 纸/n 是/v 谁/RW.RWPersonSingle 发明/N.Object 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/N.Object/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 29：纸是谁发明的 【问题类型：PERSON_NAME】
************************************
************************************
Question 纸是谁发明的
Question 候选答案：
蔡伦  1.0
智慧结晶  0.2094968890862444
鲁班  0.17983926058489055
鲁智深  0.1750015488262561
中国人  0.17084234769456627
简重  0.14965976888798566
吴梓林  0.10987177300745637
帝元  0.10976131948989247
发明者  0.10289437373928915
发明人  0.040195614881659986
古人  0.04007421651245632
ExpectAnswerRank: 1

mrr: 25.583333333333332
perfectCount: 24
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 29

MRR：88.2183908045977%
回答完美率：82.75862068965517%
回答不完美率：13.793103448275861%
回答错误率：3.4482758620689653%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国参加奥运会次数最多的运动员是谁:王义夫
Question:中国参加奥运会次数最多的运动员是谁
ExpectAnswer:王义夫
没有从数据库中查询到问题：中国参加奥运会次数最多的运动员是谁
Question：中国参加奥运会次数最多的运动员是谁 搜索到Evidence 9 条
将Question：中国参加奥运会次数最多的运动员是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国参加奥运会次数最多的运动员是谁
问题：中国参加奥运会次数最多的运动员是谁
词和词性序列：中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
对问题进行分词：中国参加奥运会次数最多的运动员是谁
分词结果为：中国 参加 奥运会 次数 最多 的 运动员 是 谁
句法树: 
句子依存关系：
	nn(运动员-7, 中国-1)
	rcmod(运动员-7, 参加-2)
	nn(次数-4, 奥运会-3)
	dobj(参加-2, 次数-4)
	advmod(参加-2, 最多-5)
	cpm(参加-2, 的-6)
	top(是-8, 运动员-7)
	root(ROOT-0, 是-8)
	attr(是-8, 谁-9)
	rcmod(中国-1, 参加-2)
主谓宾：运动员 是 谁
主谓宾词和词性序列：运动员/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国参加奥运会次数最多的运动员是谁 : 中国参加奥运会次数最多的运动员是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 运动员/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国参加奥运会次数最多的运动员是谁】匹配到多个模式：
序号：1
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 中国参加奥运会次数最多的运动员是谁
	模式 : 中国参加奥运会次数最多的运动员是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国参加奥运会次数最多的运动员是谁
	模式 : 中国参加奥运会次数最多的运动员是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国/ns 参加/v 奥运会/N.CONCEPT 次数/n 最多/d 的/uj 运动员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/v/N.CONCEPT/n/d/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 运动员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 30：中国参加奥运会次数最多的运动员是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国参加奥运会次数最多的运动员是谁
Question 候选答案：
王义夫  1.0
王国洛  0.3705969862731737
许海峰  0.25943845528500026
伊恩  0.21307903280848364
米拉尔  0.21307874698071838
ExpectAnswerRank: 1

mrr: 26.583333333333332
perfectCount: 25
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 30

MRR：88.61111111111111%
回答完美率：83.33333333333334%
回答不完美率：13.333333333333334%
回答错误率：3.3333333333333335%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:作家老舍的原名叫什么:舒庆春
Question:作家老舍的原名叫什么
ExpectAnswer:舒庆春
没有从数据库中查询到问题：作家老舍的原名叫什么
Question：作家老舍的原名叫什么 搜索到Evidence 9 条
将Question：作家老舍的原名叫什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 作家老舍的原名叫什么
问题：作家老舍的原名叫什么
词和词性序列：作家/nr 老舍/nr 的/uj 原名/nr 叫/v 什么/RW.RWOrdinarySingle 
词性序列：nr/nr/uj/nr/v/RW.RWOrdinarySingle
对问题进行分词：作家老舍的原名叫什么
分词结果为：作家 老舍 的 原名 叫 什么
句法树: 
句子依存关系：
	nn(老舍-2, 作家-1)
	assmod(原名-4, 老舍-2)
	assm(老舍-2, 的-3)
	nsubj(叫-5, 原名-4)
	root(ROOT-0, 叫-5)
	dobj(叫-5, 什么-6)
主谓宾：原名 叫 什么
主谓宾词和词性序列：原名/nr 叫/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 作家老舍的原名叫什么 : 作家老舍的原名叫什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 作家/nr 老舍/nr 的/uj 原名/nr 叫/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/nr/uj/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 原名/nr 叫/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【作家老舍的原名叫什么】匹配到多个模式：
序号：1
	问题 : 作家/nr 老舍/nr 的/uj 原名/nr 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 叫/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 作家老舍的原名叫什么
	模式 : 作家老舍的原名叫什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 作家老舍的原名叫什么
	模式 : 作家老舍的原名叫什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 作家/nr 老舍/nr 的/uj 原名/nr 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 叫/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 31：作家老舍的原名叫什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 作家老舍的原名叫什么
Question 候选答案：
舒庆春  1.0
作者  0.233493547072568
文学家  0.20736077320217253
先生  0.18577638838608157
父亲  0.18141174868555757
多莉  0.1684723432183013
母亲  0.16846143148223108
舒舒觉  0.10369098181684162
罗氏  0.10368858835498675
ExpectAnswerRank: 1

mrr: 27.583333333333332
perfectCount: 26
notPerfectCount: 4
wrongCount: 1
unknownTypeCount: 0
questionCount: 31

MRR：88.97849462365592%
回答完美率：83.87096774193549%
回答不完美率：12.903225806451612%
回答错误率：3.225806451612903%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁粉碎了四人帮:华国锋
Question:谁粉碎了四人帮
ExpectAnswer:华国锋
没有从数据库中查询到问题：谁粉碎了四人帮
Question：谁粉碎了四人帮 搜索到Evidence 9 条
将Question：谁粉碎了四人帮 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 谁粉碎了四人帮
问题：谁粉碎了四人帮
词和词性序列：谁/RW.RWPersonSingle 粉碎/v 了/ul 四人帮/j 
词性序列：RW.RWPersonSingle/v/ul/j
对问题进行分词：谁粉碎了四人帮
分词结果为：谁 粉碎 了 四人帮
句法树: 
句子依存关系：
	nsubj(粉碎-2, 谁-1)
	root(ROOT-0, 粉碎-2)
	asp(粉碎-2, 了-3)
	dobj(粉碎-2, 四人帮-4)
主谓宾：谁 粉碎 四人帮
主谓宾词和词性序列：谁/RW.RWPersonSingle 粉碎/v 四人帮/j
主谓宾词性序列：RW.RWPersonSingle/v/j

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁粉碎了四人帮 : 谁粉碎了四人帮 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 粉碎/v 了/ul 四人帮/j  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/ul/j : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 粉碎/v 四人帮/j : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/j : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁粉碎了四人帮】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 粉碎/v 了/ul 四人帮/j 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 粉碎/v 四人帮/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁粉碎了四人帮
	模式 : 谁粉碎了四人帮
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁粉碎了四人帮
	模式 : 谁粉碎了四人帮
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 粉碎/v 了/ul 四人帮/j 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 粉碎/v 四人帮/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/j
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 32：谁粉碎了四人帮 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁粉碎了四人帮
Question 候选答案：
叶剑英  1.0
华国锋  0.8573765758987014
邓小平  0.21820590672171755
同志  0.14894616327059598
李先念  0.14688818363033165
毛泽东  0.13887830422805575
胡耀邦  0.13034038022187616
江青  0.12897529885517697
老同志  0.12877412841456934
倪志福  0.10926653426661596
陈永贵  0.10924822903118328
吴德  0.10923656486719473
汪东兴  0.10922338352627399
ExpectAnswerRank: 2

mrr: 28.083333333333332
perfectCount: 26
notPerfectCount: 5
wrongCount: 1
unknownTypeCount: 0
questionCount: 32

MRR：87.76041666666666%
回答完美率：81.25%
回答不完美率：15.625%
回答错误率：3.125%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 :林青霞
Question:徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
ExpectAnswer:林青霞
没有从数据库中查询到问题：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
Question：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的  搜索到Evidence 10 条
将Question：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
问题：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
词和词性序列：徐克/nr 电影/N.ObjectArt 笑傲江湖/nr 东方不败/l 的/uj 东方不败/l 由/p 哪位/RW.RWPersonSingle 女演员/n 扮演/v 的/uj 
词性序列：nr/N.ObjectArt/nr/l/uj/l/p/RW.RWPersonSingle/n/v/uj
对问题进行分词：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
分词结果为：徐克 电影 笑傲江湖 东方不败 的 东方不败 由 哪位 女演员 扮演 的
句法树: 
句子依存关系：
	nn(电影-2, 徐克-1)
	nsubj(扮演-10, 电影-2)
	rcmod(东方不败-6, 笑傲江湖-3)
	dobj(笑傲江湖-3, 东方不败-4)
	cpm(笑傲江湖-3, 的-5)
	nsubj(扮演-10, 东方不败-6)
	prep(扮演-10, 由-7)
	pobj(由-7, 哪位-8)
	advmod(扮演-10, 女演员-9)
	root(ROOT-0, 扮演-10)
	dep(扮演-10, 的-11)
主谓宾：电影 扮演 的
主谓宾词和词性序列：电影/N.ObjectArt 扮演/v 的/uj
主谓宾词性序列：N.ObjectArt/v/uj

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 : 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 徐克/nr 电影/N.ObjectArt 笑傲江湖/nr 东方不败/l 的/uj 东方不败/l 由/p 哪位/RW.RWPersonSingle 女演员/n 扮演/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/N.ObjectArt/nr/l/uj/l/p/RW.RWPersonSingle/n/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 】匹配到多个模式：
序号：1
	问题 : 徐克/nr 电影/N.ObjectArt 笑傲江湖/nr 东方不败/l 的/uj 东方不败/l 由/p 哪位/RW.RWPersonSingle 女演员/n 扮演/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/N.ObjectArt/nr/l/uj/l/p/RW.RWPersonSingle/n/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
	模式 : 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
	模式 : 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 徐克/nr 电影/N.ObjectArt 笑傲江湖/nr 东方不败/l 的/uj 东方不败/l 由/p 哪位/RW.RWPersonSingle 女演员/n 扮演/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/N.ObjectArt/nr/l/uj/l/p/RW.RWPersonSingle/n/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 33：徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的  【问题类型：PERSON_NAME】
************************************
************************************
Question 徐克电影笑傲江湖东方不败的东方不败由哪位女演员扮演的 
Question 候选答案：
林青霞  1.0
陈凯歌  0.508702298888314
导演  0.5069053665364468
周润发  0.17653007707393706
国人  0.09194782264360257
发明者  0.09194651345816887
松赞干布  0.08971465123707632
文成公主  0.08970958582063789
戚戚  0.08298217179955375
词人  0.08297807615620081
李清照  0.08297670668080664
ExpectAnswerRank: 1

mrr: 29.083333333333332
perfectCount: 27
notPerfectCount: 5
wrongCount: 1
unknownTypeCount: 0
questionCount: 33

MRR：88.13131313131312%
回答完美率：81.81818181818183%
回答不完美率：15.151515151515152%
回答错误率：3.0303030303030303%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国空军第一任总司令是谁:叶挺
Question:中国空军第一任总司令是谁
ExpectAnswer:叶挺
没有从数据库中查询到问题：中国空军第一任总司令是谁
Question：中国空军第一任总司令是谁 搜索到Evidence 9 条
将Question：中国空军第一任总司令是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国空军第一任总司令是谁
问题：中国空军第一任总司令是谁
词和词性序列：中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nt/m/nr/v/RW.RWPersonSingle
对问题进行分词：中国空军第一任总司令是谁
分词结果为：中国空军 第一任 总司令 是 谁
句法树: 
句子依存关系：
	nn(总司令-3, 中国空军-1)
	nummod(总司令-3, 第一任-2)
	top(是-4, 总司令-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：总司令 是 谁
主谓宾词和词性序列：总司令/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国空军第一任总司令是谁 : 中国空军第一任总司令是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nt/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 总司令/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nt/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 总司令/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nt/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 总司令/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国空军第一任总司令是谁】匹配到多个模式：
序号：1
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 中国空军第一任总司令是谁
	模式 : 中国空军第一任总司令是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国空军第一任总司令是谁
	模式 : 中国空军第一任总司令是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中国空军/nt 第一任/m 总司令/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nt/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总司令/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 34：中国空军第一任总司令是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国空军第一任总司令是谁
Question 候选答案：
司令员  1.0
周至柔  0.9082754204882083
毛邦  0.39063502321078636
人物  0.324093847664106
刘亚楼  0.29052881823666543
肖劲光  0.27152772933229413
帝影  0.2709797629674529
将军  0.25442427378992555
张爱萍  0.2543828305107363
创始人  0.2540995642271975
原名  0.22207991715600187
新浪博  0.15283547659028632
肖华任  0.15237736970674587
吴法宪  0.1360107941457633
刘振东  0.11883279053445207
ExpectAnswerRank: -1

mrr: 29.083333333333332
perfectCount: 27
notPerfectCount: 5
wrongCount: 2
unknownTypeCount: 0
questionCount: 34

MRR：85.5392156862745%
回答完美率：79.41176470588235%
回答不完美率：14.705882352941178%
回答错误率：5.88235294117647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中华人民共和国是哪位民主人士提出的:张奚若
Question:中华人民共和国是哪位民主人士提出的
ExpectAnswer:张奚若
没有从数据库中查询到问题：中华人民共和国是哪位民主人士提出的
Question：中华人民共和国是哪位民主人士提出的 搜索到Evidence 8 条
将Question：中华人民共和国是哪位民主人士提出的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 中华人民共和国是哪位民主人士提出的
问题：中华人民共和国是哪位民主人士提出的
词和词性序列：中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
词性序列：ns/v/RW.RWPersonSingle/nr/v/uj
对问题进行分词：中华人民共和国是哪位民主人士提出的
分词结果为：中华人民共和国 是 哪位 民主人士 提出 的
句法树: 
句子依存关系：
	advmod(是-2, 中华人民共和国-1)
	root(ROOT-0, 是-2)
	nsubj(提出-5, 哪位-3)
	advmod(提出-5, 民主人士-4)
	attr(是-2, 提出-5)
	cpm(提出-5, 的-6)
主谓宾：中华人民共和国 是 提出
主谓宾词和词性序列：中华人民共和国/ns 是/v 提出/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中华人民共和国是哪位民主人士提出的 : 中华人民共和国是哪位民主人士提出的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/RW.RWPersonSingle/nr/v/uj : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).* : PersonOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/v/RW.RWPersonSingle/nr/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/v/RW.RWPersonSingle/nr/v/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: ns/v/RW.RWPersonSingle/nr/v/uj : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
匹配成功: ns/v/RW.RWPersonSingle/nr/v/uj : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中华人民共和国是哪位民主人士提出的】匹配到多个模式：
序号：1
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：8
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：9
	问题 : 中华人民共和国是哪位民主人士提出的
	模式 : 中华人民共和国是哪位民主人士提出的
	分类 : Person
序号：10
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国是哪位民主人士提出的
	模式 : 中华人民共和国是哪位民主人士提出的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : 中华人民共和国/ns 是/v 哪位/RW.RWPersonSingle 民主人士/nr 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：8
	问题 : ns/v/RW.RWPersonSingle/nr/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 35：中华人民共和国是哪位民主人士提出的 【问题类型：PERSON_NAME】
************************************
************************************
Question 中华人民共和国是哪位民主人士提出的
Question 候选答案：
张奚若  1.0
主席  0.7504513317521669
马叙伦  0.6480717072387053
领导人  0.6004822690405621
任弼时  0.5035715410999835
福山  0.34917112777117854
周恩来  0.29986531934129035
毛泽东  0.29985808901388933
先生  0.2994972235741587
ExpectAnswerRank: 1

mrr: 30.083333333333332
perfectCount: 28
notPerfectCount: 5
wrongCount: 2
unknownTypeCount: 0
questionCount: 35

MRR：85.95238095238095%
回答完美率：80.0%
回答不完美率：14.285714285714285%
回答错误率：5.714285714285714%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《二泉映月》的作者原名是什么 :华彦均
Question:《二泉映月》的作者原名是什么 
ExpectAnswer:华彦均
没有从数据库中查询到问题：《二泉映月》的作者原名是什么 
Question：《二泉映月》的作者原名是什么  搜索到Evidence 9 条
将Question：《二泉映月》的作者原名是什么  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 《二泉映月》的作者原名是什么 
问题：《二泉映月》的作者原名是什么
词和词性序列：二泉映月/n 的/uj 作者/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/uj/nr/nr/v/RW.RWOrdinarySingle
对问题进行分词：《二泉映月》的作者原名是什么
分词结果为：二泉映月 的 作者 原名 是 什么
句法树: 
句子依存关系：
	assmod(原名-4, 二泉映月-1)
	assm(二泉映月-1, 的-2)
	nn(原名-4, 作者-3)
	top(是-5, 原名-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：原名 是 什么
主谓宾词和词性序列：原名/nr 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《二泉映月》的作者原名是什么 : 《二泉映月》的作者原名是什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 二泉映月/n 的/uj 作者/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: n/uj/nr/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 原名/nr 是/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《二泉映月》的作者原名是什么 】匹配到多个模式：
序号：1
	问题 : 二泉映月/n 的/uj 作者/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/uj/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 《二泉映月》的作者原名是什么
	模式 : 《二泉映月》的作者原名是什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《二泉映月》的作者原名是什么
	模式 : 《二泉映月》的作者原名是什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 二泉映月/n 的/uj 作者/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/uj/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 36：《二泉映月》的作者原名是什么  【问题类型：PERSON_NAME】
************************************
************************************
Question 《二泉映月》的作者原名是什么 
Question 候选答案：
阿炳  1.0
华彦钧  0.9796993937245221
创作者  0.2419037465954299
阿丙华  0.2283037096433295
小四  0.19332647255690572
杨先生  0.13317242033377383
艺人  0.12811647482041108
曲作者  0.08668951785132956
惠山泉  0.06649886840916787
ExpectAnswerRank: -1

mrr: 30.083333333333332
perfectCount: 28
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 36

MRR：83.56481481481481%
回答完美率：77.77777777777779%
回答不完美率：13.88888888888889%
回答错误率：8.333333333333332%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:自由落体定律由谁发现:伽利略
Question:自由落体定律由谁发现
ExpectAnswer:伽利略
没有从数据库中查询到问题：自由落体定律由谁发现
Question：自由落体定律由谁发现 搜索到Evidence 10 条
将Question：自由落体定律由谁发现 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 自由落体定律由谁发现
问题：自由落体定律由谁发现
词和词性序列：自由落体/l 定律/N.CONCEPT 由/p 谁/RW.RWPersonSingle 发现/v 
词性序列：l/N.CONCEPT/p/RW.RWPersonSingle/v
对问题进行分词：自由落体定律由谁发现
分词结果为：自由落体 定律 由 谁 发现
句法树: 
句子依存关系：
	nn(定律-2, 自由落体-1)
	nsubj(发现-5, 定律-2)
	prep(发现-5, 由-3)
	pobj(由-3, 谁-4)
	root(ROOT-0, 发现-5)
主谓宾：定律 发现 由
主谓宾词和词性序列：定律/N.CONCEPT 发现/v 由/p
主谓宾词性序列：N.CONCEPT/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 自由落体定律由谁发现 : 自由落体定律由谁发现 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: N.CONCEPT/v/p : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 自由落体/l 定律/N.CONCEPT 由/p 谁/RW.RWPersonSingle 发现/v  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: l/N.CONCEPT/p/RW.RWPersonSingle/v : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【自由落体定律由谁发现】匹配到多个模式：
序号：1
	问题 : 自由落体/l 定律/N.CONCEPT 由/p 谁/RW.RWPersonSingle 发现/v 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : l/N.CONCEPT/p/RW.RWPersonSingle/v
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 自由落体定律由谁发现
	模式 : 自由落体定律由谁发现
	分类 : Person
序号：4
	问题 : N.CONCEPT/v/p
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 自由落体定律由谁发现
	模式 : 自由落体定律由谁发现
	分类 : Person
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : N.CONCEPT/v/p
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 自由落体/l 定律/N.CONCEPT 由/p 谁/RW.RWPersonSingle 发现/v 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : l/N.CONCEPT/p/RW.RWPersonSingle/v
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 37：自由落体定律由谁发现 【问题类型：PERSON_NAME】
************************************
************************************
Question 自由落体定律由谁发现
Question 候选答案：
伽利略  1.0
海峰  0.22967645157080305
亚里士多德  0.22010667625864028
阿里巴巴  0.1825165844221795
比萨斜塔  0.0909604041223177
ExpectAnswerRank: 1

mrr: 31.083333333333332
perfectCount: 29
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 37

MRR：84.009009009009%
回答完美率：78.37837837837837%
回答不完美率：13.513513513513514%
回答错误率：8.108108108108109%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:最早发现x射线的科学家是谁:伦琴
Question:最早发现x射线的科学家是谁
ExpectAnswer:伦琴
没有从数据库中查询到问题：最早发现x射线的科学家是谁
Question：最早发现x射线的科学家是谁 搜索到Evidence 10 条
将Question：最早发现x射线的科学家是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 最早发现x射线的科学家是谁
问题：最早发现x射线的科学家是谁
词和词性序列：最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
词性序列：d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
对问题进行分词：最早发现x射线的科学家是谁
分词结果为：最早 发现 x 射线 的 科学家 是 谁
句法树: 
句子依存关系：
	advmod(发现-2, 最早-1)
	rcmod(科学家-6, 发现-2)
	nn(射线-4, x-3)
	dobj(发现-2, 射线-4)
	cpm(发现-2, 的-5)
	top(是-7, 科学家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：科学家 是 谁
主谓宾词和词性序列：科学家/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 最早发现x射线的科学家是谁 : 最早发现x射线的科学家是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【最早发现x射线的科学家是谁】匹配到多个模式：
序号：1
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 最早发现x射线的科学家是谁
	模式 : 最早发现x射线的科学家是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 最早发现x射线的科学家是谁
	模式 : 最早发现x射线的科学家是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 最早/d 发现/v x/en 射线/N.ObjectSubstance 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : d/v/en/N.ObjectSubstance/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 38：最早发现x射线的科学家是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 最早发现x射线的科学家是谁
Question 候选答案：
伦琴  1.0
作者  0.27351586650828824
维尔茨堡  0.1132275805111807
ExpectAnswerRank: 1

mrr: 32.08333333333333
perfectCount: 30
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 38

MRR：84.42982456140349%
回答完美率：78.94736842105263%
回答不完美率：13.157894736842104%
回答错误率：7.894736842105263%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:微软亚洲研究院的院长是谁:洪小文
Question:微软亚洲研究院的院长是谁
ExpectAnswer:洪小文
没有从数据库中查询到问题：微软亚洲研究院的院长是谁
Question：微软亚洲研究院的院长是谁 搜索到Evidence 8 条
将Question：微软亚洲研究院的院长是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 微软亚洲研究院的院长是谁
问题：微软亚洲研究院的院长是谁
词和词性序列：微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle 
词性序列：a/ns/n/uj/n/v/RW.RWPersonSingle
对问题进行分词：微软亚洲研究院的院长是谁
分词结果为：微软 亚洲 研究院 的 院长 是 谁
句法树: 
句子依存关系：
	nn(研究院-3, 微软-1)
	nn(研究院-3, 亚洲-2)
	assmod(院长-5, 研究院-3)
	assm(研究院-3, 的-4)
	top(是-6, 院长-5)
	root(ROOT-0, 是-6)
	attr(是-6, 谁-7)
主谓宾：院长 是 谁
主谓宾词和词性序列：院长/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 微软亚洲研究院的院长是谁 : 微软亚洲研究院的院长是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: a/ns/n/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 院长/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: a/ns/n/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 院长/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【微软亚洲研究院的院长是谁】匹配到多个模式：
序号：1
	问题 : 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : a/ns/n/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 院长/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : a/ns/n/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 院长/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 微软亚洲研究院的院长是谁
	模式 : 微软亚洲研究院的院长是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 微软亚洲研究院的院长是谁
	模式 : 微软亚洲研究院的院长是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : a/ns/n/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 院长/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 微软/a 亚洲/ns 研究院/n 的/uj 院长/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : a/ns/n/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 院长/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 39：微软亚洲研究院的院长是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 微软亚洲研究院的院长是谁
Question 候选答案：
洪小文  1.0
张亚勤  0.5752971738795665
李世鹏  0.34894275596722224
博客  0.3467983828739667
胡一郎  0.3008587382515902
方刚  0.3008462457939616
人才  0.291573195920083
原微软  0.2746387297636918
吴国斌  0.25538156839281095
科学家  0.2534012754583824
易主  0.24704001648581975
沈向洋  0.2464931829763009
黄顺芳  0.2278662563964326
丘生桐  0.21898927060587534
姚德智  0.21886760940988975
ExpectAnswerRank: 1

mrr: 33.08333333333333
perfectCount: 31
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 39

MRR：84.82905982905982%
回答完美率：79.48717948717949%
回答不完美率：12.82051282051282%
回答错误率：7.6923076923076925%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国共产党这个名称是谁最早提出的:蔡和森
Question:中国共产党这个名称是谁最早提出的
ExpectAnswer:蔡和森
没有从数据库中查询到问题：中国共产党这个名称是谁最早提出的
Question：中国共产党这个名称是谁最早提出的 搜索到Evidence 9 条
将Question：中国共产党这个名称是谁最早提出的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国共产党这个名称是谁最早提出的
问题：中国共产党这个名称是谁最早提出的
词和词性序列：中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
词性序列：n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
对问题进行分词：中国共产党这个名称是谁最早提出的
分词结果为：中国共产党 这个 名称 是 谁 最早 提出 的
句法树: 
句子依存关系：
	nn(名称-3, 中国共产党-1)
	det(名称-3, 这个-2)
	top(是-4, 名称-3)
	root(ROOT-0, 是-4)
	nsubj(提出-7, 谁-5)
	advmod(提出-7, 最早-6)
	attr(是-4, 提出-7)
	cpm(提出-7, 的-8)
主谓宾：名称 是 提出
主谓宾词和词性序列：名称/N.NameOfConcept 是/v 提出/v
主谓宾词性序列：N.NameOfConcept/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国共产党这个名称是谁最早提出的 : 中国共产党这个名称是谁最早提出的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国共产党这个名称是谁最早提出的】匹配到多个模式：
序号：1
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : 中国共产党这个名称是谁最早提出的
	模式 : 中国共产党这个名称是谁最早提出的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国共产党这个名称是谁最早提出的
	模式 : 中国共产党这个名称是谁最早提出的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 中国共产党/n 这个/r 名称/N.NameOfConcept 是/v 谁/RW.RWPersonSingle 最早/d 提出/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : n/r/N.NameOfConcept/v/RW.RWPersonSingle/d/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 40：中国共产党这个名称是谁最早提出的 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国共产党这个名称是谁最早提出的
Question 候选答案：
蔡和森  1.0
毛泽东  0.42443951594305185
领导人  0.31699107289025225
萧苏  0.1529703563891596
创始人  0.12455142683050852
封信  0.10753155255101665
恩格斯  0.09097068295987341
陈独秀  0.0906994873404639
马克思  0.08520821065713574
魏特林  0.08492975035895367
ExpectAnswerRank: 1

mrr: 34.08333333333333
perfectCount: 32
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 40

MRR：85.20833333333331%
回答完美率：80.0%
回答不完美率：12.5%
回答错误率：7.5%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:我国军史上第一位女将军是谁:李贞
Question:我国军史上第一位女将军是谁
ExpectAnswer:李贞
没有从数据库中查询到问题：我国军史上第一位女将军是谁
Question：我国军史上第一位女将军是谁 搜索到Evidence 10 条
将Question：我国军史上第一位女将军是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 我国军史上第一位女将军是谁
问题：我国军史上第一位女将军是谁
词和词性序列：我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/n/f/m/nr/v/RW.RWPersonSingle
对问题进行分词：我国军史上第一位女将军是谁
分词结果为：我国 军史 上 第一位 女将军 是 谁
句法树: 
句子依存关系：
	nn(军史-2, 我国-1)
	lobj(上-3, 军史-2)
	dep(女将军-5, 上-3)
	nummod(女将军-5, 第一位-4)
	top(是-6, 女将军-5)
	root(ROOT-0, 是-6)
	attr(是-6, 谁-7)
主谓宾：女将军 是 谁
主谓宾词和词性序列：女将军/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 我国军史上第一位女将军是谁 : 我国军史上第一位女将军是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/n/f/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女将军/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/n/f/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 女将军/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/n/f/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女将军/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【我国军史上第一位女将军是谁】匹配到多个模式：
序号：1
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 我国军史上第一位女将军是谁
	模式 : 我国军史上第一位女将军是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国军史上第一位女将军是谁
	模式 : 我国军史上第一位女将军是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 我国/ns 军史/n 上/f 第一位/m 女将军/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/f/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女将军/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 41：我国军史上第一位女将军是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 我国军史上第一位女将军是谁
Question 候选答案：
李贞  1.0
博客  0.29557878648410496
英美  0.18376751663461385
王曦之  0.10599796379445509
问与答  0.10381140851250224
姜毅英  0.05639543327856452
国军  0.048880745999977465
将领  0.04399453063677602
ExpectAnswerRank: 1

mrr: 35.08333333333333
perfectCount: 33
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 41

MRR：85.5691056910569%
回答完美率：80.48780487804879%
回答不完美率：12.195121951219512%
回答错误率：7.317073170731707%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:现代奥林匹克运动创始人是谁:顾拜旦
Question:现代奥林匹克运动创始人是谁
ExpectAnswer:顾拜旦
没有从数据库中查询到问题：现代奥林匹克运动创始人是谁
Question：现代奥林匹克运动创始人是谁 搜索到Evidence 8 条
将Question：现代奥林匹克运动创始人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 现代奥林匹克运动创始人是谁
问题：现代奥林匹克运动创始人是谁
词和词性序列：现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：t/nz/nr/v/RW.RWPersonSingle
对问题进行分词：现代奥林匹克运动创始人是谁
分词结果为：现代 奥林匹克运动 创始人 是 谁
句法树: 
句子依存关系：
	amod(奥林匹克运动-2, 现代-1)
	nn(创始人-3, 奥林匹克运动-2)
	top(是-4, 创始人-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：创始人 是 谁
主谓宾词和词性序列：创始人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 现代奥林匹克运动创始人是谁 : 现代奥林匹克运动创始人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: t/nz/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 创始人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: t/nz/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 创始人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: t/nz/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 创始人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【现代奥林匹克运动创始人是谁】匹配到多个模式：
序号：1
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 现代奥林匹克运动创始人是谁
	模式 : 现代奥林匹克运动创始人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 现代奥林匹克运动创始人是谁
	模式 : 现代奥林匹克运动创始人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 现代/t 奥林匹克运动/nz 创始人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/nz/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 创始人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 42：现代奥林匹克运动创始人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 现代奥林匹克运动创始人是谁
Question 候选答案：
顾拜旦  1.0
皮埃尔  0.19810833485679571
体育竞赛  0.1713482896573576
伊菲图  0.1457950521656279
宙斯  0.13850571472534454
卓越贡献  0.12524265867148326
ExpectAnswerRank: 1

mrr: 36.08333333333333
perfectCount: 34
notPerfectCount: 5
wrongCount: 3
unknownTypeCount: 0
questionCount: 42

MRR：85.91269841269839%
回答完美率：80.95238095238095%
回答不完美率：11.904761904761903%
回答错误率：7.142857142857142%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:文学名著《西游记》是谁的作品:吴承恩
Question:文学名著《西游记》是谁的作品
ExpectAnswer:吴承恩
没有从数据库中查询到问题：文学名著《西游记》是谁的作品
Question：文学名著《西游记》是谁的作品 搜索到Evidence 8 条
将Question：文学名著《西游记》是谁的作品 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 文学名著《西游记》是谁的作品
问题：文学名著《西游记》是谁的作品
词和词性序列：文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
词性序列：n/n/v/RW.RWPersonSingle/N.ObjectArt
对问题进行分词：文学名著《西游记》是谁的作品
分词结果为：文学名著 西游记 是 谁的 作品
句法树: 
句子依存关系：
	nn(西游记-2, 文学名著-1)
	top(是-3, 西游记-2)
	root(ROOT-0, 是-3)
	nn(作品-5, 谁的-4)
	attr(是-3, 作品-5)
主谓宾：西游记 是 作品
主谓宾词和词性序列：西游记/n 是/v 作品/N.ObjectArt
主谓宾词性序列：n/v/N.ObjectArt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 文学名著《西游记》是谁的作品 : 文学名著《西游记》是谁的作品 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/n/v/RW.RWPersonSingle/N.ObjectArt : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/n/v/RW.RWPersonSingle/N.ObjectArt : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: n/n/v/RW.RWPersonSingle/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: 西游记/n 是/v 作品/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: n/v/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【文学名著《西游记》是谁的作品】匹配到多个模式：
序号：1
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 西游记/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 文学名著《西游记》是谁的作品
	模式 : 文学名著《西游记》是谁的作品
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 文学名著《西游记》是谁的作品
	模式 : 文学名著《西游记》是谁的作品
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 文学名著/n 西游记/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : n/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 西游记/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 43：文学名著《西游记》是谁的作品 【问题类型：PERSON_NAME】
************************************
************************************
Question 文学名著《西游记》是谁的作品
Question 候选答案：
作者  1.0
人物  0.5941435352622397
吴承恩  0.5924909188967595
罗贯中  0.4892817096567166
施耐庵  0.4533809372920788
古典名著  0.2843013753756776
作家  0.2784285121288556
曹雪芹  0.2779833423093986
梁山泊  0.17430840131548866
ExpectAnswerRank: 3

mrr: 36.416666666666664
perfectCount: 34
notPerfectCount: 6
wrongCount: 3
unknownTypeCount: 0
questionCount: 43

MRR：84.68992248062015%
回答完美率：79.06976744186046%
回答不完美率：13.953488372093023%
回答错误率：6.976744186046512%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:星际航行理论的开创者是哪位科学家:钱学森
Question:星际航行理论的开创者是哪位科学家
ExpectAnswer:钱学森
没有从数据库中查询到问题：星际航行理论的开创者是哪位科学家
Question：星际航行理论的开创者是哪位科学家 搜索到Evidence 10 条
将Question：星际航行理论的开创者是哪位科学家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 星际航行理论的开创者是哪位科学家
问题：星际航行理论的开创者是哪位科学家
词和词性序列：星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
词性序列：n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
对问题进行分词：星际航行理论的开创者是哪位科学家
分词结果为：星际 航行 理论 的 开创者 是 哪位 科学家
句法树: 
句子依存关系：
	amod(航行-2, 星际-1)
	nn(理论-3, 航行-2)
	assmod(开创者-5, 理论-3)
	assm(理论-3, 的-4)
	top(是-6, 开创者-5)
	root(ROOT-0, 是-6)
	nn(科学家-8, 哪位-7)
	attr(是-6, 科学家-8)
主谓宾：开创者 是 科学家
主谓宾词和词性序列：开创者/nr 是/v 科学家/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 星际航行理论的开创者是哪位科学家 : 星际航行理论的开创者是哪位科学家 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).* : PersonOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr  : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
匹配成功: n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【星际航行理论的开创者是哪位科学家】匹配到多个模式：
序号：1
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：8
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：9
	问题 : 星际航行理论的开创者是哪位科学家
	模式 : 星际航行理论的开创者是哪位科学家
	分类 : Person
序号：10
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 星际航行理论的开创者是哪位科学家
	模式 : 星际航行理论的开创者是哪位科学家
	分类 : Person
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 星际/n 航行/v 理论/N.ObjectAcademic 的/uj 开创者/nr 是/v 哪位/RW.RWPersonSingle 科学家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：8
	问题 : n/v/N.ObjectAcademic/uj/nr/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 44：星际航行理论的开创者是哪位科学家 【问题类型：PERSON_NAME】
************************************
************************************
Question 星际航行理论的开创者是哪位科学家
Question 候选答案：
诸葛  1.0
齐奥尔科夫斯基  0.36003505272870745
奥斯克  0.30281478525119787
中谷  0.2799709282581105
工程师  0.1314959559495135
天文学家  0.13149277949686228
达拉斯  0.13146727671568775
伊卡洛  0.10877990410855008
探秘  0.09151819218411725
霍金  0.07462391868829682
凯尔  0.0628987405061374
康斯坦丁  0.05724237021122308
罗伯特  0.05720846910189912
戈达德  0.05720164676490014
赫尔曼  0.05719402094676696
奥伯特  0.0571890900032379
齐奥尔  0.05718483972883482
科夫  0.057182018093012654
ExpectAnswerRank: -1

mrr: 36.416666666666664
perfectCount: 34
notPerfectCount: 6
wrongCount: 4
unknownTypeCount: 0
questionCount: 44

MRR：82.76515151515152%
回答完美率：77.27272727272727%
回答不完美率：13.636363636363635%
回答错误率：9.090909090909092%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国古代哪一位曾被称为“药王”:孙思邈
Question:中国古代哪一位曾被称为“药王”
ExpectAnswer:孙思邈
没有从数据库中查询到问题：中国古代哪一位曾被称为“药王”
Question：中国古代哪一位曾被称为“药王” 搜索到Evidence 10 条
将Question：中国古代哪一位曾被称为“药王” 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 中国古代哪一位曾被称为“药王”
问题：中国古代哪一位曾被称为“药王”
词和词性序列：中国/ns 古代/t 哪一位/RW.RWPersonSingle 曾/d 被/p 称为/v 药王/n 
词性序列：ns/t/RW.RWPersonSingle/d/p/v/n
对问题进行分词：中国古代哪一位曾被称为“药王”
分词结果为：中国 古代 哪一位 曾 被 称为 药王
句法树: 
句子依存关系：
	nn(古代-2, 中国-1)
	nsubj(称为-6, 古代-2)
	nummod(古代-2, 哪一位-3)
	advmod(称为-6, 曾-4)
	pass(称为-6, 被-5)
	root(ROOT-0, 称为-6)
	dobj(称为-6, 药王-7)
主谓宾：古代 称为 药王
主谓宾词和词性序列：古代/t 称为/v 药王/n
主谓宾词性序列：t/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国古代哪一位曾被称为“药王” : 中国古代哪一位曾被称为“药王” : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 古代/t 哪一位/RW.RWPersonSingle 曾/d 被/p 称为/v 药王/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/t/RW.RWPersonSingle/d/p/v/n : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国古代哪一位曾被称为“药王”】匹配到多个模式：
序号：1
	问题 : 中国/ns 古代/t 哪一位/RW.RWPersonSingle 曾/d 被/p 称为/v 药王/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/RW.RWPersonSingle/d/p/v/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国古代哪一位曾被称为“药王”
	模式 : 中国古代哪一位曾被称为“药王”
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国古代哪一位曾被称为“药王”
	模式 : 中国古代哪一位曾被称为“药王”
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 古代/t 哪一位/RW.RWPersonSingle 曾/d 被/p 称为/v 药王/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/RW.RWPersonSingle/d/p/v/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 45：中国古代哪一位曾被称为“药王” 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国古代哪一位曾被称为“药王”
Question 候选答案：
孙思邈  1.0
扁鹊  0.17458374711230698
孙真人  0.17119326492772835
李时珍  0.16797872093642374
张仲景  0.12764092998698098
思邈  0.12419913349432823
孙家塬  0.1142023618593097
道士  0.08734517453765414
唐京兆  0.07397761890364708
医生  0.06871205582448596
孙真  0.06721624183663401
隋文帝  0.06715675766575258
唐高  0.06714593309571401
宗永淳  0.06714485400402205
韦慈  0.05372411018519748
秦越  0.04719458135760726
科科  0.04377456862409499
华佗  0.04034998829892425
ExpectAnswerRank: 1

mrr: 37.416666666666664
perfectCount: 35
notPerfectCount: 6
wrongCount: 4
unknownTypeCount: 0
questionCount: 45

MRR：83.14814814814814%
回答完美率：77.77777777777779%
回答不完美率：13.333333333333334%
回答错误率：8.88888888888889%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁是微软的首席执行官:鲍尔默
Question:谁是微软的首席执行官
ExpectAnswer:鲍尔默
没有从数据库中查询到问题：谁是微软的首席执行官
Question：谁是微软的首席执行官 搜索到Evidence 9 条
将Question：谁是微软的首席执行官 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 谁是微软的首席执行官
问题：谁是微软的首席执行官
词和词性序列：谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr 
词性序列：RW.RWPersonSingle/v/a/uj/nr
对问题进行分词：谁是微软的首席执行官
分词结果为：谁 是 微软 的 首席执行官
句法树: 
句子依存关系：
	top(是-2, 谁-1)
	root(ROOT-0, 是-2)
	assmod(首席执行官-5, 微软-3)
	assm(微软-3, 的-4)
	attr(是-2, 首席执行官-5)
主谓宾：谁 是 首席执行官
主谓宾词和词性序列：谁/RW.RWPersonSingle 是/v 首席执行官/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁是微软的首席执行官 : 谁是微软的首席执行官 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/a/uj/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 首席执行官/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/a/uj/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 是/v 首席执行官/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁是微软的首席执行官】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/a/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 首席执行官/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/a/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 首席执行官/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 谁是微软的首席执行官
	模式 : 谁是微软的首席执行官
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁是微软的首席执行官
	模式 : 谁是微软的首席执行官
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/a/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 首席执行官/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 微软/a 的/uj 首席执行官/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/a/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 首席执行官/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 46：谁是微软的首席执行官 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁是微软的首席执行官
Question 候选答案：
纳德拉  1.0
鲍尔默  0.9984815208092401
人物  0.8308224884244193
艾伦  0.5345326269499014
穆拉利  0.49750091742937524
埃洛普  0.463821509724689
范儿  0.3985373928959233
萨蒂亚  0.3973492617506868
戴尔  0.34307746593399996
史蒂夫  0.26496398073315897
ExpectAnswerRank: 2

mrr: 37.916666666666664
perfectCount: 35
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 46

MRR：82.42753623188406%
回答完美率：76.08695652173914%
回答不完美率：15.217391304347828%
回答错误率：8.695652173913043%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁死后布了七十二疑冢:曹操
Question:谁死后布了七十二疑冢
ExpectAnswer:曹操
没有从数据库中查询到问题：谁死后布了七十二疑冢
Question：谁死后布了七十二疑冢 搜索到Evidence 10 条
将Question：谁死后布了七十二疑冢 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 谁死后布了七十二疑冢
问题：谁死后布了七十二疑冢
词和词性序列：谁/RW.RWPersonSingle 死/v 后/f 布/n 了/ul 七十二/m 疑/vg 冢/ng 
词性序列：RW.RWPersonSingle/v/f/n/ul/m/vg/ng
对问题进行分词：谁死后布了七十二疑冢
分词结果为：谁 死 后 布 了 七十二 疑 冢
句法树: 
句子依存关系：
	nsubj(死-2, 谁-1)
	lccomp(后-3, 死-2)
	loc(布-4, 后-3)
	root(ROOT-0, 布-4)
	asp(布-4, 了-5)
	dep(布-4, 七十二-6)
	conj(布-4, 疑-7)
	ccomp(疑-7, 冢-8)
主谓宾：后 布 疑
主谓宾词和词性序列：后/f 布/n 疑/vg
主谓宾词性序列：f/n/vg

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁死后布了七十二疑冢 : 谁死后布了七十二疑冢 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 死/v 后/f 布/n 了/ul 七十二/m 疑/vg 冢/ng  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/f/n/ul/m/vg/ng : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁死后布了七十二疑冢】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 死/v 后/f 布/n 了/ul 七十二/m 疑/vg 冢/ng 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/f/n/ul/m/vg/ng
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁死后布了七十二疑冢
	模式 : 谁死后布了七十二疑冢
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁死后布了七十二疑冢
	模式 : 谁死后布了七十二疑冢
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 死/v 后/f 布/n 了/ul 七十二/m 疑/vg 冢/ng 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/f/n/ul/m/vg/ng
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 47：谁死后布了七十二疑冢 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁死后布了七十二疑冢
Question 候选答案：
曹操  1.0
陶宗仪  0.2207979695935883
杨尚川  0.1567848756728188
哥白尼  0.14359291316372735
女人  0.13672849766834985
作者  0.13667166200247993
医生  0.12835747613994533
创始人  0.12146381243579432
杜甫  0.12008112725816157
人物  0.11594167167651094
通天河  0.1131674221227951
ExpectAnswerRank: 1

mrr: 38.916666666666664
perfectCount: 36
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 47

MRR：82.80141843971631%
回答完美率：76.59574468085107%
回答不完美率：14.893617021276595%
回答错误率：8.51063829787234%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 :周润发
Question:曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
ExpectAnswer:周润发
没有从数据库中查询到问题：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
Question：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁  搜索到Evidence 10 条
将Question：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
问题：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
词和词性序列：曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
词性序列：d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
对问题进行分词：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
分词结果为：曾 饰演 许文强 小马哥 赌神 等 经典 角色 的 香港 男 影星 是 谁
句法树: 
句子依存关系：
	advmod(饰演-2, 曾-1)
	rcmod(影星-12, 饰演-2)
	nn(赌神-5, 许文强-3)
	nn(赌神-5, 小马哥-4)
	nn(角色-8, 赌神-5)
	etc(赌神-5, 等-6)
	amod(角色-8, 经典-7)
	dobj(饰演-2, 角色-8)
	cpm(饰演-2, 的-9)
	nn(影星-12, 香港-10)
	amod(影星-12, 男-11)
	top(是-13, 影星-12)
	root(ROOT-0, 是-13)
	attr(是-13, 谁-14)
主谓宾：影星 是 谁
主谓宾词和词性序列：影星/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 : 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 影星/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 影星/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 影星/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 】匹配到多个模式：
序号：1
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
	模式 : 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
	模式 : 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 曾/d 饰演/v 许文强/nr 小马哥/nr 赌神/n 等/u 经典/n 角色/nr 的/uj 香港/ns 男/b 影星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : d/v/nr/nr/n/u/n/nr/uj/ns/b/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 影星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 48：曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁  【问题类型：PERSON_NAME】
************************************
************************************
Question 曾饰演许文强，小马哥，赌神，等经典角色的香港男影星是谁 
Question 候选答案：
周润发  1.0
徐克  0.4582850496084618
笑傲江湖  0.4582639418664885
林青霞  0.34366473201938075
李嘉诚  0.17322444724853525
郭惠军  0.13133919714784387
梁朝伟  0.13042556000494762
刘德华  0.1257451674286083
曾志伟  0.12573924581587873
博客  0.11954982864116023
小艾  0.11736941055404639
豆丁  0.11736848322179347
豆丁网  0.11736802537812364
印百科  0.11735710340033126
陈凯歌  0.11455418318754858
ExpectAnswerRank: 1

mrr: 39.916666666666664
perfectCount: 37
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 48

MRR：83.15972222222221%
回答完美率：77.08333333333334%
回答不完美率：14.583333333333334%
回答错误率：8.333333333333332%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁发明了蒸汽机:瓦特
Question:谁发明了蒸汽机
ExpectAnswer:瓦特
没有从数据库中查询到问题：谁发明了蒸汽机
Question：谁发明了蒸汽机 搜索到Evidence 9 条
将Question：谁发明了蒸汽机 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 谁发明了蒸汽机
问题：谁发明了蒸汽机
词和词性序列：谁/RW.RWPersonSingle 发明/N.Object 了/ul 蒸汽机/N.CONCEPT 
词性序列：RW.RWPersonSingle/N.Object/ul/N.CONCEPT
对问题进行分词：谁发明了蒸汽机
分词结果为：谁 发明 了 蒸汽机
句法树: 
句子依存关系：
	nsubj(发明-2, 谁-1)
	root(ROOT-0, 发明-2)
	asp(发明-2, 了-3)
	dobj(发明-2, 蒸汽机-4)
主谓宾：谁 发明 蒸汽机
主谓宾词和词性序列：谁/RW.RWPersonSingle 发明/N.Object 蒸汽机/N.CONCEPT
主谓宾词性序列：RW.RWPersonSingle/N.Object/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁发明了蒸汽机 : 谁发明了蒸汽机 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 发明/N.Object 了/ul 蒸汽机/N.CONCEPT  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/N.Object/ul/N.CONCEPT : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 发明/N.Object 蒸汽机/N.CONCEPT : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/N.Object/N.CONCEPT : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁发明了蒸汽机】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 发明/N.Object 了/ul 蒸汽机/N.CONCEPT 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/N.Object/ul/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 发明/N.Object 蒸汽机/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/N.Object/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁发明了蒸汽机
	模式 : 谁发明了蒸汽机
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁发明了蒸汽机
	模式 : 谁发明了蒸汽机
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 发明/N.Object 了/ul 蒸汽机/N.CONCEPT 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/N.Object/ul/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 发明/N.Object 蒸汽机/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/N.Object/N.CONCEPT
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 49：谁发明了蒸汽机 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁发明了蒸汽机
Question 候选答案：
瓦特  1.0
詹姆斯  0.26978570445522687
希罗  0.19211643899639586
阿里巴巴  0.15861027039525277
巨大贡献  0.14163557180588413
发明者  0.10847326892786394
马来  0.09178943368618342
德尼斯  0.0917158212126061
帕潘  0.0917061415134683
丹尼斯  0.07500164384569188
ExpectAnswerRank: 1

mrr: 40.916666666666664
perfectCount: 38
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 49

MRR：83.50340136054422%
回答完美率：77.55102040816327%
回答不完美率：14.285714285714285%
回答错误率：8.16326530612245%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中国古代名医华佗为谁所杀:曹操
Question:中国古代名医华佗为谁所杀
ExpectAnswer:曹操
没有从数据库中查询到问题：中国古代名医华佗为谁所杀
Question：中国古代名医华佗为谁所杀 搜索到Evidence 8 条
将Question：中国古代名医华佗为谁所杀 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 中国古代名医华佗为谁所杀
问题：中国古代名医华佗为谁所杀
词和词性序列：中国/ns 古代/t 名医/nr 华佗/nr 为/p 谁/RW.RWPersonSingle 所/u 杀/v 
词性序列：ns/t/nr/nr/p/RW.RWPersonSingle/u/v
对问题进行分词：中国古代名医华佗为谁所杀
分词结果为：中国 古代 名医 华佗 为 谁 所 杀
句法树: 
句子依存关系：
	nn(名医-3, 中国-1)
	nn(名医-3, 古代-2)
	nn(华佗-4, 名医-3)
	nsubj(杀-8, 华佗-4)
	prep(杀-8, 为-5)
	pobj(为-5, 谁-6)
	prtmod(杀-8, 所-7)
	root(ROOT-0, 杀-8)
主谓宾：华佗 杀 所
主谓宾词和词性序列：华佗/nr 杀/v 所/u
主谓宾词性序列：nr/v/u

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国古代名医华佗为谁所杀 : 中国古代名医华佗为谁所杀 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 古代/t 名医/nr 华佗/nr 为/p 谁/RW.RWPersonSingle 所/u 杀/v  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/t/nr/nr/p/RW.RWPersonSingle/u/v : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国古代名医华佗为谁所杀】匹配到多个模式：
序号：1
	问题 : 中国/ns 古代/t 名医/nr 华佗/nr 为/p 谁/RW.RWPersonSingle 所/u 杀/v 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/nr/nr/p/RW.RWPersonSingle/u/v
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国古代名医华佗为谁所杀
	模式 : 中国古代名医华佗为谁所杀
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国古代名医华佗为谁所杀
	模式 : 中国古代名医华佗为谁所杀
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 古代/t 名医/nr 华佗/nr 为/p 谁/RW.RWPersonSingle 所/u 杀/v 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/nr/nr/p/RW.RWPersonSingle/u/v
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 50：中国古代名医华佗为谁所杀 【问题类型：PERSON_NAME】
************************************
************************************
Question 中国古代名医华佗为谁所杀
Question 候选答案：
曹操  1.0
麦迪  0.12538161626692568
吕布  0.1253749578960512
董卓  0.1253720937645725
孙权  0.12536801898360073
文学家  0.10325063882961871
丞相  0.07622760333023687
济世  0.07621178985605376
ExpectAnswerRank: 1

mrr: 41.916666666666664
perfectCount: 39
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 50

MRR：83.83333333333333%
回答完美率：78.0%
回答不完美率：14.000000000000002%
回答错误率：8.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁提出了改革开放:邓小平
Question:谁提出了改革开放
ExpectAnswer:邓小平
没有从数据库中查询到问题：谁提出了改革开放
Question：谁提出了改革开放 搜索到Evidence 10 条
将Question：谁提出了改革开放 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 谁提出了改革开放
问题：谁提出了改革开放
词和词性序列：谁/RW.RWPersonSingle 提出/v 了/ul 改革开放/nz 
词性序列：RW.RWPersonSingle/v/ul/nz
对问题进行分词：谁提出了改革开放
分词结果为：谁 提出 了 改革开放
句法树: 
句子依存关系：
	nsubj(提出-2, 谁-1)
	root(ROOT-0, 提出-2)
	asp(提出-2, 了-3)
	dobj(提出-2, 改革开放-4)
主谓宾：谁 提出 改革开放
主谓宾词和词性序列：谁/RW.RWPersonSingle 提出/v 改革开放/nz
主谓宾词性序列：RW.RWPersonSingle/v/nz

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁提出了改革开放 : 谁提出了改革开放 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 提出/v 了/ul 改革开放/nz  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/ul/nz : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 提出/v 改革开放/nz : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nz : .*(RW.RWPersonSingle).* : Person->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁提出了改革开放】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 提出/v 了/ul 改革开放/nz 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 提出/v 改革开放/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁提出了改革开放
	模式 : 谁提出了改革开放
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁提出了改革开放
	模式 : 谁提出了改革开放
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 提出/v 了/ul 改革开放/nz 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/ul/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 提出/v 改革开放/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nz
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 51：谁提出了改革开放 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁提出了改革开放
Question 候选答案：
邓小平  1.0
博客  0.3063205641187192
张家琪  0.264814747259742
同志  0.2261880510456692
原名  0.22569313599111274
邓先圣  0.22568070014771682
小平  0.2076581855646121
罗国正  0.15057580061257758
ExpectAnswerRank: 1

mrr: 42.916666666666664
perfectCount: 40
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 51

MRR：84.15032679738562%
回答完美率：78.43137254901961%
回答不完美率：13.725490196078432%
回答错误率：7.8431372549019605%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:APDPlat的发起人是谁？:杨尚川
Question:APDPlat的发起人是谁？
ExpectAnswer:杨尚川
没有从数据库中查询到问题：APDPlat的发起人是谁？
Question：APDPlat的发起人是谁？ 搜索到Evidence 9 条
将Question：APDPlat的发起人是谁？ 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： APDPlat的发起人是谁？
问题：APDPlat的发起人是谁？
词和词性序列：apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
词性序列：en/uj/n/v/RW.RWPersonSingle
对问题进行分词：APDPlat的发起人是谁？
分词结果为：apdplat 的 发起人 是 谁
句法树: 
句子依存关系：
	assmod(发起人-3, apdplat-1)
	assm(apdplat-1, 的-2)
	top(是-4, 发起人-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：发起人 是 谁
主谓宾词和词性序列：发起人/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: APDPlat的发起人是谁？ : APDPlat的发起人是谁？ : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: en/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 发起人/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: en/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 发起人/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【APDPlat的发起人是谁？】匹配到多个模式：
序号：1
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : APDPlat的发起人是谁？
	模式 : APDPlat的发起人是谁？
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : APDPlat的发起人是谁？
	模式 : APDPlat的发起人是谁？
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : apdplat/en 的/uj 发起人/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : en/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 发起人/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 52：APDPlat的发起人是谁？ 【问题类型：PERSON_NAME】
************************************
************************************
Question APDPlat的发起人是谁？
Question 候选答案：
杨尚川  1.0
作者  0.8759589963645839
女人  0.7835056381491813
习近平  0.5222810115163093
张代浩  0.26275868032762184
余杰  0.2339226004849907
王保政  0.23282346772287552
博客  0.20426024023632458
英雄  0.13069232120152605
王豪迈  0.11617296858693908
何乐  0.0887801336039531
ExpectAnswerRank: 1

mrr: 43.916666666666664
perfectCount: 41
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 52

MRR：84.4551282051282%
回答完美率：78.84615384615384%
回答不完美率：13.461538461538462%
回答错误率：7.6923076923076925%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被称为画圣的古代画家是哪一位:吴道子
Question:被称为画圣的古代画家是哪一位
ExpectAnswer:吴道子
没有从数据库中查询到问题：被称为画圣的古代画家是哪一位
Question：被称为画圣的古代画家是哪一位 搜索到Evidence 9 条
将Question：被称为画圣的古代画家是哪一位 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被称为画圣的古代画家是哪一位
问题：被称为画圣的古代画家是哪一位
词和词性序列：被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
词性序列：p/v/n/uj/t/nr/v/RW.RWPersonSingle
对问题进行分词：被称为画圣的古代画家是哪一位
分词结果为：被 称为 画圣 的 古代 画家 是 哪一位
句法树: 
句子依存关系：
	pass(称为-2, 被-1)
	rcmod(画家-6, 称为-2)
	dobj(称为-2, 画圣-3)
	cpm(称为-2, 的-4)
	nn(画家-6, 古代-5)
	top(是-7, 画家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 哪一位-8)
主谓宾：画家 是 哪一位
主谓宾词和词性序列：画家/nr 是/v 哪一位/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被称为画圣的古代画家是哪一位 : 被称为画圣的古代画家是哪一位 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/v/n/uj/t/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 画家/nr 是/v 哪一位/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/v/n/uj/t/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 画家/nr 是/v 哪一位/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/v/n/uj/t/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 画家/nr 是/v 哪一位/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被称为画圣的古代画家是哪一位】匹配到多个模式：
序号：1
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 被称为画圣的古代画家是哪一位
	模式 : 被称为画圣的古代画家是哪一位
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被称为画圣的古代画家是哪一位
	模式 : 被称为画圣的古代画家是哪一位
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被/p 称为/v 画圣/n 的/uj 古代/t 画家/nr 是/v 哪一位/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/v/n/uj/t/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 画家/nr 是/v 哪一位/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 53：被称为画圣的古代画家是哪一位 【问题类型：PERSON_NAME】
************************************
************************************
Question 被称为画圣的古代画家是哪一位
Question 候选答案：
吴道子  1.0
豆丁网  0.35774746336061236
顾恺之  0.34215581317578814
张择端  0.3420234936767883
吴生  0.24720131950361948
阳翟  0.24718216836259566
张善子  0.2369236816766871
张彦远  0.16303170451732849
吴道玄  0.16301754689876666
红颜  0.11589089241249269
齐白石  0.1158360021651774
徐悲鸿  0.11580829600434465
张大千  0.11577329077484408
名医  0.11574205787627243
华佗  0.11573813249178437
吕布  0.11571999276446672
董卓  0.1157152232720944
曹操  0.11571122436746156
孙权  0.11570782325564258
玄宗赐  0.0999865276463423
ExpectAnswerRank: 1

mrr: 44.916666666666664
perfectCount: 42
notPerfectCount: 7
wrongCount: 4
unknownTypeCount: 0
questionCount: 53

MRR：84.74842767295597%
回答完美率：79.24528301886792%
回答不完美率：13.20754716981132%
回答错误率：7.547169811320755%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被称为酿酒行业的祖师是谁:孔子
Question:被称为酿酒行业的祖师是谁
ExpectAnswer:孔子
没有从数据库中查询到问题：被称为酿酒行业的祖师是谁
Question：被称为酿酒行业的祖师是谁 搜索到Evidence 9 条
将Question：被称为酿酒行业的祖师是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被称为酿酒行业的祖师是谁
问题：被称为酿酒行业的祖师是谁
词和词性序列：被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle 
词性序列：p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle
对问题进行分词：被称为酿酒行业的祖师是谁
分词结果为：被 称为 酿酒 行业 的 祖师 是 谁
句法树: 
句子依存关系：
	pass(称为-2, 被-1)
	rcmod(祖师-6, 称为-2)
	nn(行业-4, 酿酒-3)
	dobj(称为-2, 行业-4)
	cpm(称为-2, 的-5)
	top(是-7, 祖师-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：祖师 是 谁
主谓宾词和词性序列：祖师/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被称为酿酒行业的祖师是谁 : 被称为酿酒行业的祖师是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 祖师/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 祖师/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被称为酿酒行业的祖师是谁】匹配到多个模式：
序号：1
	问题 : 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 祖师/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 祖师/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 被称为酿酒行业的祖师是谁
	模式 : 被称为酿酒行业的祖师是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被称为酿酒行业的祖师是谁
	模式 : 被称为酿酒行业的祖师是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 祖师/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 称为/v 酿酒/vn 行业/N.ObjectVocation 的/uj 祖师/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/v/vn/N.ObjectVocation/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 祖师/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 54：被称为酿酒行业的祖师是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被称为酿酒行业的祖师是谁
Question 候选答案：
杜康  1.0
鲁班  0.2747800962598175
孔子  0.15469997029657379
柳永杜  0.13642894313585346
柳永  0.13365093707067885
乐毅  0.13362431443709852
闻仲  0.1336210636092313
蒙恬  0.13361841086186307
刘伯温  0.13361665183213436
仪狄  0.13089763764334958
刘白堕  0.13089676656461757
焦革  0.1308964645366606
杜康杜  0.07917708692365664
神农氏  0.07635982128388982
人物  0.07371182031149041
康酒  0.07366290439671465
杜康造  0.07365434280688007
空桑  0.07363728828665371
由奇方  0.07363173063702164
ExpectAnswerRank: 3

mrr: 45.25
perfectCount: 42
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 54

MRR：83.79629629629629%
回答完美率：77.77777777777779%
回答不完美率：14.814814814814813%
回答错误率：7.4074074074074066%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被今人誉为"开眼看世界第一人"是谁:林则徐
Question:被今人誉为"开眼看世界第一人"是谁
ExpectAnswer:林则徐
没有从数据库中查询到问题：被今人誉为"开眼看世界第一人"是谁
Question：被今人誉为"开眼看世界第一人"是谁 搜索到Evidence 9 条
将Question：被今人誉为"开眼看世界第一人"是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被今人誉为"开眼看世界第一人"是谁
问题：被今人誉为"开眼看世界第一人"是谁
词和词性序列：被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
对问题进行分词：被今人誉为"开眼看世界第一人"是谁
分词结果为：被 今人 誉为 开眼 看 世界 第一 人 是 谁
句法树: 
句子依存关系：
	pass(誉为-3, 被-1)
	nsubj(誉为-3, 今人-2)
	root(ROOT-0, 誉为-3)
	mmod(看-5, 开眼-4)
	dep(誉为-3, 看-5)
	dep(第一-7, 世界-6)
	nummod(人-8, 第一-7)
	dobj(看-5, 人-8)
	dep(看-5, 是-9)
	attr(是-9, 谁-10)
主谓宾：被 誉为 看
主谓宾词和词性序列：被/p 誉为/v 看/v
主谓宾词性序列：p/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被今人誉为"开眼看世界第一人"是谁 : 被今人誉为"开眼看世界第一人"是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被今人誉为"开眼看世界第一人"是谁】匹配到多个模式：
序号：1
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 被今人誉为"开眼看世界第一人"是谁
	模式 : 被今人誉为"开眼看世界第一人"是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被今人誉为"开眼看世界第一人"是谁
	模式 : 被今人誉为"开眼看世界第一人"是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 被/p 今人/n 誉为/v 开眼/v 看/v 世界/n 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/n/v/v/v/n/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 55：被今人誉为"开眼看世界第一人"是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被今人誉为"开眼看世界第一人"是谁
Question 候选答案：
林则徐  1.0
魏源  0.6052301008864279
高度赞扬  0.2648510167554964
人物  0.19182198981637202
徐光启  0.1872194777380352
徐继畲  0.1826278121680779
ExpectAnswerRank: 1

mrr: 46.25
perfectCount: 43
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 55

MRR：84.0909090909091%
回答完美率：78.18181818181819%
回答不完美率：14.545454545454545%
回答错误率：7.2727272727272725%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被列为世界十大文豪之一的中国文学家是哪位:鲁迅
Question:被列为世界十大文豪之一的中国文学家是哪位
ExpectAnswer:鲁迅
没有从数据库中查询到问题：被列为世界十大文豪之一的中国文学家是哪位
Question：被列为世界十大文豪之一的中国文学家是哪位 搜索到Evidence 10 条
将Question：被列为世界十大文豪之一的中国文学家是哪位 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 被列为世界十大文豪之一的中国文学家是哪位
问题：被列为世界十大文豪之一的中国文学家是哪位
词和词性序列：被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
词性序列：p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
对问题进行分词：被列为世界十大文豪之一的中国文学家是哪位
分词结果为：被 列为 世界 十大 文豪 之一 的 中国 文学家 是 哪位
句法树: 
句子依存关系：
	pass(列为-2, 被-1)
	rcmod(文学家-9, 列为-2)
	nn(之一-6, 世界-3)
	nummod(之一-6, 十大-4)
	nn(之一-6, 文豪-5)
	dobj(列为-2, 之一-6)
	cpm(列为-2, 的-7)
	nn(文学家-9, 中国-8)
	top(是-10, 文学家-9)
	root(ROOT-0, 是-10)
	attr(是-10, 哪位-11)
主谓宾：文学家 是 哪位
主谓宾词和词性序列：文学家/nr 是/v 哪位/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被列为世界十大文豪之一的中国文学家是哪位 : 被列为世界十大文豪之一的中国文学家是哪位 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 文学家/nr 是/v 哪位/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 文学家/nr 是/v 哪位/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 文学家/nr 是/v 哪位/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被列为世界十大文豪之一的中国文学家是哪位】匹配到多个模式：
序号：1
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 被列为世界十大文豪之一的中国文学家是哪位
	模式 : 被列为世界十大文豪之一的中国文学家是哪位
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被列为世界十大文豪之一的中国文学家是哪位
	模式 : 被列为世界十大文豪之一的中国文学家是哪位
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被/p 列为/v 世界/n 十大/j 文豪/n 之一/r 的/uj 中国/ns 文学家/nr 是/v 哪位/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/v/n/j/n/r/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 文学家/nr 是/v 哪位/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 56：被列为世界十大文豪之一的中国文学家是哪位 【问题类型：PERSON_NAME】
************************************
************************************
Question 被列为世界十大文豪之一的中国文学家是哪位
Question 候选答案：
鲁迅  1.0
但丁  0.4881362687898631
诗人  0.3950518243839138
歌德  0.3216645104021926
拜伦  0.3216522771350707
莎士比亚  0.21443486405288603
剧作家  0.21443211305897517
原名  0.15235994487405027
周树人  0.15235936876229883
绍兴人  0.15235780290771492
雨果  0.10722078404592846
泰戈尔  0.10721954703176155
列夫  0.10721811217121335
托尔斯泰  0.10721687575405275
高尔基  0.10721555150371335
皇帝  0.08747219552702375
ExpectAnswerRank: 1

mrr: 47.25
perfectCount: 44
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 56

MRR：84.375%
回答完美率：78.57142857142857%
回答不完美率：14.285714285714285%
回答错误率：7.142857142857142%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被誉为“钢琴之王”的作曲家是谁:李斯特
Question:被誉为“钢琴之王”的作曲家是谁
ExpectAnswer:李斯特
没有从数据库中查询到问题：被誉为“钢琴之王”的作曲家是谁
Question：被誉为“钢琴之王”的作曲家是谁 搜索到Evidence 10 条
将Question：被誉为“钢琴之王”的作曲家是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 被誉为“钢琴之王”的作曲家是谁
问题：被誉为“钢琴之王”的作曲家是谁
词和词性序列：被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：被誉为“钢琴之王”的作曲家是谁
分词结果为：被誉为 钢琴 之 王 的 作曲家 是 谁
句法树: 
句子依存关系：
	rcmod(作曲家-6, 被誉为-1)
	assmod(王-4, 钢琴-2)
	assm(钢琴-2, 之-3)
	dobj(被誉为-1, 王-4)
	cpm(被誉为-1, 的-5)
	top(是-7, 作曲家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：作曲家 是 谁
主谓宾词和词性序列：作曲家/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被誉为“钢琴之王”的作曲家是谁 : 被誉为“钢琴之王”的作曲家是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作曲家/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作曲家/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作曲家/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被誉为“钢琴之王”的作曲家是谁】匹配到多个模式：
序号：1
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 被誉为“钢琴之王”的作曲家是谁
	模式 : 被誉为“钢琴之王”的作曲家是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为“钢琴之王”的作曲家是谁
	模式 : 被誉为“钢琴之王”的作曲家是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被誉为/n 钢琴/N.Object 之/u 王/nr 的/uj 作曲家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/N.Object/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作曲家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 57：被誉为“钢琴之王”的作曲家是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被誉为“钢琴之王”的作曲家是谁
Question 候选答案：
李斯特  1.0
弗朗兹  0.740988465943527
钢琴家  0.39822628615952094
肖邦  0.33209914163203497
名人  0.17715062728605221
代表人物  0.17145888355291974
莫札特  0.1272861263620249
和佛瑞  0.12178533693895661
威尔第  0.1217600775289856
杜甫  0.12131502663802941
中圣哲  0.11069525034572412
胡天千万里  0.11063890518867305
ExpectAnswerRank: 1

mrr: 48.25
perfectCount: 45
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 57

MRR：84.64912280701753%
回答完美率：78.94736842105263%
回答不完美率：14.035087719298245%
回答错误率：7.017543859649122%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被誉为乐圣音乐家的是谁:贝多芬
Question:被誉为乐圣音乐家的是谁
ExpectAnswer:贝多芬
没有从数据库中查询到问题：被誉为乐圣音乐家的是谁
Question：被誉为乐圣音乐家的是谁 搜索到Evidence 10 条
将Question：被誉为乐圣音乐家的是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 被誉为乐圣音乐家的是谁
问题：被誉为乐圣音乐家的是谁
词和词性序列：被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
词性序列：n/nr/n/uj/v/RW.RWPersonSingle
对问题进行分词：被誉为乐圣音乐家的是谁
分词结果为：被誉为 乐圣 音乐家 的 是 谁
句法树: 
句子依存关系：
	top(是-5, 被誉为-1)
	amod(音乐家-3, 乐圣-2)
	dobj(被誉为-1, 音乐家-3)
	cpm(被誉为-1, 的-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：被誉为 是 谁
主谓宾词和词性序列：被誉为/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被誉为乐圣音乐家的是谁 : 被誉为乐圣音乐家的是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/nr/n/uj/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被誉为/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/nr/n/uj/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/nr/n/uj/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 被誉为/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被誉为乐圣音乐家的是谁】匹配到多个模式：
序号：1
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 被誉为/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 被誉为/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 被誉为乐圣音乐家的是谁
	模式 : 被誉为乐圣音乐家的是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为乐圣音乐家的是谁
	模式 : 被誉为乐圣音乐家的是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 被誉为/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 被誉为/n 乐圣/nr 音乐家/n 的/uj 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/nr/n/uj/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 被誉为/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 58：被誉为乐圣音乐家的是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被誉为乐圣音乐家的是谁
Question 候选答案：
贝多芬  1.0
作曲家  0.29129437567172783
莫扎特  0.18660190871579602
巴赫  0.13416261429149523
亨德尔  0.13414564535036327
海顿  0.11929409425512294
路德维希  0.08220487649230596
钢琴家  0.08201882250498863
代表人物  0.08200197647719609
施特劳斯  0.06724121078676727
ExpectAnswerRank: 1

mrr: 49.25
perfectCount: 46
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 58

MRR：84.91379310344827%
回答完美率：79.3103448275862%
回答不完美率：13.793103448275861%
回答错误率：6.896551724137931%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被誉为中国摇滚的第一人是谁:崔健
Question:被誉为中国摇滚的第一人是谁
ExpectAnswer:崔健
没有从数据库中查询到问题：被誉为中国摇滚的第一人是谁
Question：被誉为中国摇滚的第一人是谁 搜索到Evidence 9 条
将Question：被誉为中国摇滚的第一人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被誉为中国摇滚的第一人是谁
问题：被誉为中国摇滚的第一人是谁
词和词性序列：被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/ns/n/uj/m/nr/v/RW.RWPersonSingle
对问题进行分词：被誉为中国摇滚的第一人是谁
分词结果为：被誉为 中国 摇滚 的 第一 人 是 谁
句法树: 
句子依存关系：
	rcmod(人-6, 被誉为-1)
	nn(摇滚-3, 中国-2)
	dobj(被誉为-1, 摇滚-3)
	cpm(被誉为-1, 的-4)
	nummod(人-6, 第一-5)
	top(是-7, 人-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：人 是 谁
主谓宾词和词性序列：人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被誉为中国摇滚的第一人是谁 : 被誉为中国摇滚的第一人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/ns/n/uj/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/ns/n/uj/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/ns/n/uj/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被誉为中国摇滚的第一人是谁】匹配到多个模式：
序号：1
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 被誉为中国摇滚的第一人是谁
	模式 : 被誉为中国摇滚的第一人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为中国摇滚的第一人是谁
	模式 : 被誉为中国摇滚的第一人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 被誉为/n 中国/ns 摇滚/n 的/uj 第一/m 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/ns/n/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 59：被誉为中国摇滚的第一人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被誉为中国摇滚的第一人是谁
Question 候选答案：
崔健  1.0
名人  0.17100675019275813
夫斯基  0.14898976165551975
林立果  0.12584155180814796
汪峰  0.10105025448331409
作者  0.09650892516061789
江小鱼  0.09649034163926001
窦唯  0.0834302169434907
人物  0.0745402074965338
ExpectAnswerRank: 1

mrr: 50.25
perfectCount: 47
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 59

MRR：85.16949152542372%
回答完美率：79.66101694915254%
回答不完美率：13.559322033898304%
回答错误率：6.779661016949152%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 :蔡依林
Question:跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
ExpectAnswer:蔡依林
没有从数据库中查询到问题：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
Question：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁  搜索到Evidence 9 条
将Question：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
问题：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
词和词性序列：跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
词性序列：p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
对问题进行分词：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
分词结果为：跟 周杰伦 传出 绯闻 被 称为 双 j 恋 的 女歌手 是 谁
句法树: 
句子依存关系：
	prep(传出-3, 跟-1)
	pobj(跟-1, 周杰伦-2)
	rcmod(女歌手-11, 传出-3)
	dobj(传出-3, 绯闻-4)
	pass(称为-6, 被-5)
	conj(传出-3, 称为-6)
	nummod(j-8, 双-7)
	nn(恋-9, j-8)
	dobj(称为-6, 恋-9)
	cpm(传出-3, 的-10)
	top(是-12, 女歌手-11)
	root(ROOT-0, 是-12)
	attr(是-12, 谁-13)
主谓宾：女歌手 是 谁
主谓宾词和词性序列：女歌手/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 : 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女歌手/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 女歌手/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女歌手/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 】匹配到多个模式：
序号：1
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
	模式 : 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
	模式 : 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 跟/p 周杰伦/nr 传出/v 绯闻/n 被/p 称为/v 双/m j/en 恋/v 的/uj 女歌手/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/nr/v/n/p/v/m/en/v/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女歌手/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 60：跟周杰伦传出绯闻，被称为双J恋的女歌手是谁  【问题类型：PERSON_NAME】
************************************
************************************
Question 跟周杰伦传出绯闻，被称为双J恋的女歌手是谁 
Question 候选答案：
蔡依林  1.0
叶惠美  0.9022663866457074
叶惠  0.9022266586295774
易博客  0.1188768450991964
博客  0.10669443638129915
豆丁  0.10667906478944061
主角  0.09754464439328793
宋慧乔  0.09753731790718467
韩语  0.09753372608994974
ExpectAnswerRank: 1

mrr: 51.25
perfectCount: 48
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 60

MRR：85.41666666666666%
回答完美率：80.0%
回答不完美率：13.333333333333334%
回答错误率：6.666666666666667%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:“冲冠一怒为红颜“中的红颜是指谁:陈圆圆
Question:“冲冠一怒为红颜“中的红颜是指谁
ExpectAnswer:陈圆圆
没有从数据库中查询到问题：“冲冠一怒为红颜“中的红颜是指谁
Question：“冲冠一怒为红颜“中的红颜是指谁 搜索到Evidence 9 条
将Question：“冲冠一怒为红颜“中的红颜是指谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “冲冠一怒为红颜“中的红颜是指谁
问题：“冲冠一怒为红颜“中的红颜是指谁
词和词性序列：冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
词性序列：v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
对问题进行分词：“冲冠一怒为红颜“中的红颜是指谁
分词结果为：冲 冠 一 怒 为 红颜 中 的 红颜 是 指 谁
句法树: 
句子依存关系：
	root(ROOT-0, 冲-1)
	dobj(冲-1, 冠-2)
	nummod(冠-2, 一-3)
	advmod(指-11, 怒-4)
	prep(指-11, 为-5)
	lobj(中-7, 红颜-6)
	assmod(红颜-9, 中-7)
	assm(中-7, 的-8)
	pobj(为-5, 红颜-9)
	cop(指-11, 是-10)
	rcmod(冠-2, 指-11)
	dobj(指-11, 谁-12)
	conj(指-11, 是-10)
主谓宾：冲 冠 指
主谓宾词和词性序列：冲/v 冠/v 指/v
主谓宾词性序列：v/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “冲冠一怒为红颜“中的红颜是指谁 : “冲冠一怒为红颜“中的红颜是指谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“冲冠一怒为红颜“中的红颜是指谁】匹配到多个模式：
序号：1
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : “冲冠一怒为红颜“中的红颜是指谁
	模式 : “冲冠一怒为红颜“中的红颜是指谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “冲冠一怒为红颜“中的红颜是指谁
	模式 : “冲冠一怒为红颜“中的红颜是指谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 冲/v 冠/v 一/m 怒/vg 为/p 红颜/nr 中/f 的/uj 红颜/nr 是/v 指/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : v/v/m/vg/p/nr/f/uj/nr/v/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 61：“冲冠一怒为红颜“中的红颜是指谁 【问题类型：PERSON_NAME】
************************************
************************************
Question “冲冠一怒为红颜“中的红颜是指谁
Question 候选答案：
陈圆圆  1.0
吴三桂  0.4705677808725952
李自成  0.36441240072774717
阿尔杰  0.1661618480130265
闯王  0.1441513415750588
崇祯  0.11011749425047011
明未清  0.11011737941507059
周奎欲  0.11011569184387253
皇帝  0.1101145557169179
美女  0.11011361435334395
妻子  0.10207907593702674
高圆圆  0.0981136230351017
知己  0.09614482289921916
女人  0.09410325834060654
诗人  0.07410521504634093
吴梅村  0.07410203351064906
桂迎清  0.0740931054817229
ExpectAnswerRank: 1

mrr: 52.25
perfectCount: 49
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 61

MRR：85.65573770491804%
回答完美率：80.32786885245902%
回答不完美率：13.114754098360656%
回答错误率：6.557377049180328%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:草圣指哪位书法家:张旭
Question:草圣指哪位书法家
ExpectAnswer:张旭
没有从数据库中查询到问题：草圣指哪位书法家
Question：草圣指哪位书法家 搜索到Evidence 9 条
将Question：草圣指哪位书法家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 草圣指哪位书法家
问题：草圣指哪位书法家
词和词性序列：草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
词性序列：n/v/RW.RWPersonSingle/nr
对问题进行分词：草圣指哪位书法家
分词结果为：草圣 指 哪位 书法家
句法树: 
句子依存关系：
	nsubj(指-2, 草圣-1)
	root(ROOT-0, 指-2)
	nsubj(书法家-4, 哪位-3)
	ccomp(指-2, 书法家-4)
主谓宾：草圣 指 书法家
主谓宾词和词性序列：草圣/n 指/v 书法家/nr
主谓宾词性序列：n/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 草圣指哪位书法家 : 草圣指哪位书法家 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/v/RW.RWPersonSingle/nr : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).* : PersonOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle/nr : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr  : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
匹配成功: n/v/RW.RWPersonSingle/nr : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【草圣指哪位书法家】匹配到多个模式：
序号：1
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：6
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：7
	问题 : 草圣指哪位书法家
	模式 : 草圣指哪位书法家
	分类 : Person
序号：8
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 草圣指哪位书法家
	模式 : 草圣指哪位书法家
	分类 : Person
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle)/(nr|nr1|nr2|nrj|nrf).*
	分类 : PersonOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 草圣/n 指/v 哪位/RW.RWPersonSingle 书法家/nr 
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
序号：6
	问题 : n/v/RW.RWPersonSingle/nr
	模式 : .*(V.).*(RW.RWPersonSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 62：草圣指哪位书法家 【问题类型：PERSON_NAME】
************************************
************************************
Question 草圣指哪位书法家
Question 候选答案：
张旭  1.0
作者  0.26703265954363664
张贵  0.2564544217253447
熊召政  0.2461955809496706
皇帝  0.246045207071951
苏州人  0.23599888643962727
二人  0.23586219963457677
张芝  0.22566095798974195
唐吴郡  0.20505357064133373
名人  0.17788079255581107
魏光禄  0.15400436733100226
杜氏杰  0.1539245493113257
崔氏法  0.15389428906930933
张芝喜  0.15386204869240508
汉献帝  0.13354829604459817
李白  0.13350216224137176
今草  0.1333412059302777
ExpectAnswerRank: 1

mrr: 53.25
perfectCount: 50
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 62

MRR：85.88709677419355%
回答完美率：80.64516129032258%
回答不完美率：12.903225806451612%
回答错误率：6.451612903225806%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:查尔斯的第二任妻子是谁:卡米拉
Question:查尔斯的第二任妻子是谁
ExpectAnswer:卡米拉
没有从数据库中查询到问题：查尔斯的第二任妻子是谁
Question：查尔斯的第二任妻子是谁 搜索到Evidence 10 条
将Question：查尔斯的第二任妻子是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 查尔斯的第二任妻子是谁
问题：查尔斯的第二任妻子是谁
词和词性序列：查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nr/uj/m/nr/v/RW.RWPersonSingle
对问题进行分词：查尔斯的第二任妻子是谁
分词结果为：查尔斯 的 第二任 妻子 是 谁
句法树: 
句子依存关系：
	assmod(妻子-4, 查尔斯-1)
	assm(查尔斯-1, 的-2)
	nummod(妻子-4, 第二任-3)
	top(是-5, 妻子-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：妻子 是 谁
主谓宾词和词性序列：妻子/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 查尔斯的第二任妻子是谁 : 查尔斯的第二任妻子是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/uj/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/uj/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/uj/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【查尔斯的第二任妻子是谁】匹配到多个模式：
序号：1
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 查尔斯的第二任妻子是谁
	模式 : 查尔斯的第二任妻子是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 查尔斯的第二任妻子是谁
	模式 : 查尔斯的第二任妻子是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 查尔斯/nr 的/uj 第二任/m 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 63：查尔斯的第二任妻子是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 查尔斯的第二任妻子是谁
Question 候选答案：
卡米拉  1.0
王子  0.41779504290269975
帕克  0.2838582733530375
鲍尔斯  0.28382307551335684
凯瑟琳  0.2150177081386846
都铎  0.2082892805942423
英查尔  0.12464710778466004
母亲  0.10380641474404258
王太后  0.09688319882603674
ExpectAnswerRank: 1

mrr: 54.25
perfectCount: 51
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 63

MRR：86.11111111111111%
回答完美率：80.95238095238095%
回答不完美率：12.698412698412698%
回答错误率：6.349206349206349%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:英国王储查尔斯的妻子是谁:卡米拉
Question:英国王储查尔斯的妻子是谁
ExpectAnswer:卡米拉
没有从数据库中查询到问题：英国王储查尔斯的妻子是谁
Question：英国王储查尔斯的妻子是谁 搜索到Evidence 10 条
将Question：英国王储查尔斯的妻子是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 英国王储查尔斯的妻子是谁
问题：英国王储查尔斯的妻子是谁
词和词性序列：英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/n/nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：英国王储查尔斯的妻子是谁
分词结果为：英国 王储 查尔斯 的 妻子 是 谁
句法树: 
句子依存关系：
	nn(王储-2, 英国-1)
	nn(妻子-5, 王储-2)
	assmod(妻子-5, 查尔斯-3)
	assm(查尔斯-3, 的-4)
	top(是-6, 妻子-5)
	root(ROOT-0, 是-6)
	attr(是-6, 谁-7)
主谓宾：妻子 是 谁
主谓宾词和词性序列：妻子/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 英国王储查尔斯的妻子是谁 : 英国王储查尔斯的妻子是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/n/nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/n/nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/n/nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【英国王储查尔斯的妻子是谁】匹配到多个模式：
序号：1
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 英国王储查尔斯的妻子是谁
	模式 : 英国王储查尔斯的妻子是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 英国王储查尔斯的妻子是谁
	模式 : 英国王储查尔斯的妻子是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 英国/ns 王储/n 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 64：英国王储查尔斯的妻子是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 英国王储查尔斯的妻子是谁
Question 候选答案：
卡米拉  1.0
王子  0.16614319684068438
康沃尔  0.14352936449482187
公爵夫人  0.139712767590703
创始人  0.13964709822910937
戴维  0.11343737633589003
教父  0.10476065027369837
鲍勃  0.10475396864523542
马利  0.10474532918351076
二人  0.10472010291173098
克劳伦  0.07872912261774236
老婆  0.07864479835907044
夫人  0.07420758282587606
ExpectAnswerRank: 1

mrr: 55.25
perfectCount: 52
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 64

MRR：86.328125%
回答完美率：81.25%
回答不完美率：12.5%
回答错误率：6.25%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:查尔斯的妻子是谁:卡米拉
Question:查尔斯的妻子是谁
ExpectAnswer:卡米拉
没有从数据库中查询到问题：查尔斯的妻子是谁
Question：查尔斯的妻子是谁 搜索到Evidence 9 条
将Question：查尔斯的妻子是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 查尔斯的妻子是谁
问题：查尔斯的妻子是谁
词和词性序列：查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：查尔斯的妻子是谁
分词结果为：查尔斯 的 妻子 是 谁
句法树: 
句子依存关系：
	assmod(妻子-3, 查尔斯-1)
	assm(查尔斯-1, 的-2)
	top(是-4, 妻子-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：妻子 是 谁
主谓宾词和词性序列：妻子/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 查尔斯的妻子是谁 : 查尔斯的妻子是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 妻子/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【查尔斯的妻子是谁】匹配到多个模式：
序号：1
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 查尔斯的妻子是谁
	模式 : 查尔斯的妻子是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 查尔斯的妻子是谁
	模式 : 查尔斯的妻子是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 查尔斯/nr 的/uj 妻子/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 妻子/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 65：查尔斯的妻子是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 查尔斯的妻子是谁
Question 候选答案：
卡米拉  1.0
王子  0.47267894219726686
凯瑟琳  0.35380309643628083
康沃尔  0.3435212344465289
公爵夫人  0.3333270321570755
都铎  0.32631010260146054
母亲  0.20773678087579261
戴妃  0.1945909650729011
坎贝尔  0.1943751638825258
查韦斯  0.1941583724188322
王太后  0.19388208228456597
杰西卡  0.18033692024847361
赫特  0.1802539536970793
领导人  0.18013376451322685
卡斯特罗  0.18007367557434617
费德勒  0.16694537190094638
弗格尼尼  0.1527724791513331
男人  0.15248232323096927
ExpectAnswerRank: 1

mrr: 56.25
perfectCount: 53
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 65

MRR：86.53846153846155%
回答完美率：81.53846153846153%
回答不完美率：12.307692307692308%
回答错误率：6.153846153846154%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:长篇小说《林海雪原》的作者是谁:曲波
Question:长篇小说《林海雪原》的作者是谁
ExpectAnswer:曲波
没有从数据库中查询到问题：长篇小说《林海雪原》的作者是谁
Question：长篇小说《林海雪原》的作者是谁 搜索到Evidence 9 条
将Question：长篇小说《林海雪原》的作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 长篇小说《林海雪原》的作者是谁
问题：长篇小说《林海雪原》的作者是谁
词和词性序列：长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：l/nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：长篇小说《林海雪原》的作者是谁
分词结果为：长篇小说 林海雪原 的 作者 是 谁
句法树: 
句子依存关系：
	nn(林海雪原-2, 长篇小说-1)
	assmod(作者-4, 林海雪原-2)
	assm(林海雪原-2, 的-3)
	top(是-5, 作者-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：作者 是 谁
主谓宾词和词性序列：作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 长篇小说《林海雪原》的作者是谁 : 长篇小说《林海雪原》的作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: l/nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: l/nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: l/nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【长篇小说《林海雪原》的作者是谁】匹配到多个模式：
序号：1
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 长篇小说《林海雪原》的作者是谁
	模式 : 长篇小说《林海雪原》的作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长篇小说《林海雪原》的作者是谁
	模式 : 长篇小说《林海雪原》的作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 长篇小说/l 林海雪原/nr 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : l/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 66：长篇小说《林海雪原》的作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 长篇小说《林海雪原》的作者是谁
Question 候选答案：
曲波  1.0
肖军  0.1267772796400924
吴强  0.12211205488549706
冯至  0.12209229302861402
摩诃  0.1220235947628099
婆罗  0.12201842459089697
作家  0.10243289640834011
冬梅  0.08552257510429896
博客  0.08551690562250032
杨子荣  0.07979790155884074
博文  0.07936627387048804
邓平  0.06746646358242868
ExpectAnswerRank: 1

mrr: 57.25
perfectCount: 54
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 66

MRR：86.74242424242425%
回答完美率：81.81818181818183%
回答不完美率：12.121212121212121%
回答错误率：6.0606060606060606%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:1994年谁是土库曼斯坦的总统:尼亚佐夫
Question:1994年谁是土库曼斯坦的总统
ExpectAnswer:尼亚佐夫
没有从数据库中查询到问题：1994年谁是土库曼斯坦的总统
Question：1994年谁是土库曼斯坦的总统 搜索到Evidence 9 条
将Question：1994年谁是土库曼斯坦的总统 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 1994年谁是土库曼斯坦的总统
问题：1994年谁是土库曼斯坦的总统
词和词性序列：1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr 
词性序列：m/RW.RWPersonSingle/v/ns/uj/nr
对问题进行分词：1994年谁是土库曼斯坦的总统
分词结果为：1994年 谁 是 土库曼斯坦 的 总统
句法树: 
句子依存关系：
	dep(是-3, 1994年-1)
	top(是-3, 谁-2)
	root(ROOT-0, 是-3)
	assmod(总统-6, 土库曼斯坦-4)
	assm(土库曼斯坦-4, 的-5)
	attr(是-3, 总统-6)
主谓宾：谁 是 总统
主谓宾词和词性序列：谁/RW.RWPersonSingle 是/v 总统/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 1994年谁是土库曼斯坦的总统 : 1994年谁是土库曼斯坦的总统 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/RW.RWPersonSingle/v/ns/uj/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 总统/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: m/RW.RWPersonSingle/v/ns/uj/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 是/v 总统/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【1994年谁是土库曼斯坦的总统】匹配到多个模式：
序号：1
	问题 : 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/RW.RWPersonSingle/v/ns/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总统/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : m/RW.RWPersonSingle/v/ns/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总统/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 1994年谁是土库曼斯坦的总统
	模式 : 1994年谁是土库曼斯坦的总统
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1994年谁是土库曼斯坦的总统
	模式 : 1994年谁是土库曼斯坦的总统
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/RW.RWPersonSingle/v/ns/uj/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总统/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 1994年/m 谁/RW.RWPersonSingle 是/v 土库曼斯坦/ns 的/uj 总统/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : m/RW.RWPersonSingle/v/ns/uj/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总统/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 67：1994年谁是土库曼斯坦的总统 【问题类型：PERSON_NAME】
************************************
************************************
Question 1994年谁是土库曼斯坦的总统
Question 候选答案：
尼亚佐夫  1.0
施玉宇  0.10095875315527827
拉夫桑贾尼  0.09343525954843448
主席  0.0856690991550626
ExpectAnswerRank: 1

mrr: 58.25
perfectCount: 55
notPerfectCount: 8
wrongCount: 4
unknownTypeCount: 0
questionCount: 67

MRR：86.94029850746269%
回答完美率：82.08955223880598%
回答不完美率：11.940298507462686%
回答错误率：5.970149253731343%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《星尘》这首歌是谁写的:马修
Question:《星尘》这首歌是谁写的
ExpectAnswer:马修
没有从数据库中查询到问题：《星尘》这首歌是谁写的
Question：《星尘》这首歌是谁写的 搜索到Evidence 10 条
将Question：《星尘》这首歌是谁写的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 《星尘》这首歌是谁写的
问题：《星尘》这首歌是谁写的
词和词性序列：星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
词性序列：ns/ng/r/m/v/RW.RWPersonSingle/v/uj
对问题进行分词：《星尘》这首歌是谁写的
分词结果为：星 尘 这 首歌 是 谁 写 的
句法树: 
句子依存关系：
	nn(尘-2, 星-1)
	nsubj(是-5, 尘-2)
	nsubj(是-5, 这-3)
	advmod(是-5, 首歌-4)
	root(ROOT-0, 是-5)
	nsubj(写-7, 谁-6)
	attr(是-5, 写-7)
	cpm(写-7, 的-8)
主谓宾：尘 是 写
主谓宾词和词性序列：尘/ng 是/v 写/v
主谓宾词性序列：ng/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《星尘》这首歌是谁写的 : 《星尘》这首歌是谁写的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/ng/r/m/v/RW.RWPersonSingle/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/ng/r/m/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: ns/ng/r/m/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《星尘》这首歌是谁写的】匹配到多个模式：
序号：1
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : 《星尘》这首歌是谁写的
	模式 : 《星尘》这首歌是谁写的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《星尘》这首歌是谁写的
	模式 : 《星尘》这首歌是谁写的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 星/ns 尘/ng 这/r 首歌/m 是/v 谁/RW.RWPersonSingle 写/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : ns/ng/r/m/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 68：《星尘》这首歌是谁写的 【问题类型：PERSON_NAME】
************************************
************************************
Question 《星尘》这首歌是谁写的
Question 候选答案：
歌手  1.0
女主角  0.5914540622079022
松哥  0.44634051241845635
蔡志  0.42881240488800476
蔡志忠  0.3659631254529381
菲斯特  0.3544451119082833
青枫浦  0.3319275393566553
老友记  0.33172976535443177
制作者  0.26870536902142855
太迟  0.2660214542224552
演员  0.2142968931621249
克莱尔  0.20014036201829802
丹妮丝  0.2001266563046583
英文名  0.18295093446026114
女孩子  0.1828621289960432
ExpectAnswerRank: -1

mrr: 58.25
perfectCount: 55
notPerfectCount: 8
wrongCount: 5
unknownTypeCount: 0
questionCount: 68

MRR：85.66176470588235%
回答完美率：80.88235294117648%
回答不完美率：11.76470588235294%
回答错误率：7.352941176470589%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《孙子》的作者别名是什么:孙武
Question:《孙子》的作者别名是什么
ExpectAnswer:孙武
没有从数据库中查询到问题：《孙子》的作者别名是什么
Question：《孙子》的作者别名是什么 搜索到Evidence 9 条
将Question：《孙子》的作者别名是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 《孙子》的作者别名是什么
问题：《孙子》的作者别名是什么
词和词性序列：孙子/n 的/uj 作者/nr 别名/n 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/uj/nr/n/v/RW.RWOrdinarySingle
对问题进行分词：《孙子》的作者别名是什么
分词结果为：孙子 的 作者 别名 是 什么
句法树: 
句子依存关系：
	assmod(作者-3, 孙子-1)
	assm(孙子-1, 的-2)
	nsubj(是-5, 作者-3)
	advmod(是-5, 别名-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：作者 是 什么
主谓宾词和词性序列：作者/nr 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《孙子》的作者别名是什么 : 《孙子》的作者别名是什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 孙子/n 的/uj 作者/nr 别名/n 是/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: n/uj/nr/n/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 作者/nr 是/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《孙子》的作者别名是什么】匹配到多个模式：
序号：1
	问题 : 孙子/n 的/uj 作者/nr 别名/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/uj/nr/n/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 作者/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 《孙子》的作者别名是什么
	模式 : 《孙子》的作者别名是什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《孙子》的作者别名是什么
	模式 : 《孙子》的作者别名是什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 孙子/n 的/uj 作者/nr 别名/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/uj/nr/n/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 作者/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 69：《孙子》的作者别名是什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 《孙子》的作者别名是什么
Question 候选答案：
孙武  1.0
夜泊  0.4019892967215463
诗人  0.3356488990500254
唐肃宗  0.33549096342736057
在世  0.33546659743210444
皇甫冉  0.33542919872555366
孙膑  0.19782426409792755
笔名  0.1783041882466378
英文名  0.15968577122541247
韩非  0.11941811812361591
齐国人  0.11917413192730177
吴王  0.11883413988293345
国人  0.11875329773685071
ExpectAnswerRank: 1

mrr: 59.25
perfectCount: 56
notPerfectCount: 8
wrongCount: 5
unknownTypeCount: 0
questionCount: 69

MRR：85.86956521739131%
回答完美率：81.15942028985508%
回答不完美率：11.594202898550725%
回答错误率：7.246376811594203%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:“宝带桥”是谁建造的:王仲舒
Question:“宝带桥”是谁建造的
ExpectAnswer:王仲舒
没有从数据库中查询到问题：“宝带桥”是谁建造的
Question：“宝带桥”是谁建造的 搜索到Evidence 9 条
将Question：“宝带桥”是谁建造的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “宝带桥”是谁建造的
问题：“宝带桥”是谁建造的
词和词性序列：宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
词性序列：n/v/ns/v/RW.RWPersonSingle/v/uj
对问题进行分词：“宝带桥”是谁建造的
分词结果为：宝 带 桥 是 谁 建造 的
句法树: 
句子依存关系：
	amod(带-2, 宝-1)
	nn(桥-3, 带-2)
	top(是-4, 桥-3)
	root(ROOT-0, 是-4)
	nsubj(建造-6, 谁-5)
	attr(是-4, 建造-6)
	cpm(建造-6, 的-7)
主谓宾：桥 是 建造
主谓宾词和词性序列：桥/ns 是/v 建造/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “宝带桥”是谁建造的 : “宝带桥”是谁建造的 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/ns/v/RW.RWPersonSingle/v/uj : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/ns/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj  : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
匹配成功: n/v/ns/v/RW.RWPersonSingle/v/uj : .*(V.).*(RW.RWPersonSingle).*(V.).* : Person->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“宝带桥”是谁建造的】匹配到多个模式：
序号：1
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：7
	问题 : “宝带桥”是谁建造的
	模式 : “宝带桥”是谁建造的
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “宝带桥”是谁建造的
	模式 : “宝带桥”是谁建造的
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 宝/n 带/v 桥/ns 是/v 谁/RW.RWPersonSingle 建造/v 的/uj 
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
序号：6
	问题 : n/v/ns/v/RW.RWPersonSingle/v/uj
	模式 : .*(V.).*(RW.RWPersonSingle).*(V.).*
	分类 : Person->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 70：“宝带桥”是谁建造的 【问题类型：PERSON_NAME】
************************************
************************************
Question “宝带桥”是谁建造的
Question 候选答案：
宝带桥  1.0
澹台湖  0.431811543574013
孔子  0.1900945234643787
弟子  0.19008645699358137
澹台  0.19007923570472768
古运河  0.17797924010818597
苏城三公里  0.1682757615939106
博客  0.15382176538640976
王仲舒  0.14891393154275698
博文  0.14634990197157732
秋宵梦  0.1417136254298052
平潭  0.13174950642426284
唐元和  0.1123135022366887
唐元间  0.10482526772284757
ExpectAnswerRank: 9

mrr: 59.361111111111114
perfectCount: 56
notPerfectCount: 9
wrongCount: 5
unknownTypeCount: 0
questionCount: 70

MRR：84.80158730158732%
回答完美率：80.0%
回答不完美率：12.857142857142856%
回答错误率：7.142857142857142%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:2008年北京奥运会开幕式和闭幕式的总导演是谁:张艺谋
Question:2008年北京奥运会开幕式和闭幕式的总导演是谁
ExpectAnswer:张艺谋
没有从数据库中查询到问题：2008年北京奥运会开幕式和闭幕式的总导演是谁
Question：2008年北京奥运会开幕式和闭幕式的总导演是谁 搜索到Evidence 9 条
将Question：2008年北京奥运会开幕式和闭幕式的总导演是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 2008年北京奥运会开幕式和闭幕式的总导演是谁
问题：2008年北京奥运会开幕式和闭幕式的总导演是谁
词和词性序列：2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
词性序列：m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：2008年北京奥运会开幕式和闭幕式的总导演是谁
分词结果为：2008年 北京 奥运会 开幕式 和 闭幕式 的 总导演 是 谁
句法树: 
句子依存关系：
	nn(奥运会-3, 2008年-1)
	nn(奥运会-3, 北京-2)
	nn(闭幕式-6, 奥运会-3)
	conj(闭幕式-6, 开幕式-4)
	cc(闭幕式-6, 和-5)
	assmod(总导演-8, 闭幕式-6)
	assm(闭幕式-6, 的-7)
	top(是-9, 总导演-8)
	root(ROOT-0, 是-9)
	attr(是-9, 谁-10)
主谓宾：总导演 是 谁
主谓宾词和词性序列：总导演/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 2008年北京奥运会开幕式和闭幕式的总导演是谁 : 2008年北京奥运会开幕式和闭幕式的总导演是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 总导演/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 总导演/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 总导演/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【2008年北京奥运会开幕式和闭幕式的总导演是谁】匹配到多个模式：
序号：1
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 2008年北京奥运会开幕式和闭幕式的总导演是谁
	模式 : 2008年北京奥运会开幕式和闭幕式的总导演是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2008年北京奥运会开幕式和闭幕式的总导演是谁
	模式 : 2008年北京奥运会开幕式和闭幕式的总导演是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 2008年/m 北京/ns 奥运会/N.CONCEPT 开幕式/n 和/c 闭幕式/n 的/uj 总导演/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/ns/N.CONCEPT/n/c/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 总导演/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 71：2008年北京奥运会开幕式和闭幕式的总导演是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 2008年北京奥运会开幕式和闭幕式的总导演是谁
Question 候选答案：
导演  1.0
张艺谋  0.7758009072721189
陈维亚  0.5257594093553464
张继刚  0.19667083121138718
令人  0.18513646229449704
斯皮尔  0.16776151103724066
华人  0.12728430410859562
任总  0.09838522877914914
张艺  0.09259351116155877
ExpectAnswerRank: 2

mrr: 59.861111111111114
perfectCount: 56
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 71

MRR：84.3114241001565%
回答完美率：78.87323943661971%
回答不完美率：14.084507042253522%
回答错误率：7.042253521126761%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁是第一个中国国家总理:周恩来
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
没有从数据库中查询到问题：谁是第一个中国国家总理
Question：谁是第一个中国国家总理 搜索到Evidence 10 条
将Question：谁是第一个中国国家总理 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 谁是第一个中国国家总理
问题：谁是第一个中国国家总理
词和词性序列：谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
词性序列：RW.RWPersonSingle/v/m/ns/ns/nr
对问题进行分词：谁是第一个中国国家总理
分词结果为：谁 是 第一个 中国 国家 总理
句法树: 
句子依存关系：
	top(是-2, 谁-1)
	root(ROOT-0, 是-2)
	nummod(总理-6, 第一个-3)
	nn(总理-6, 中国-4)
	nn(总理-6, 国家-5)
	attr(是-2, 总理-6)
主谓宾：谁 是 总理
主谓宾词和词性序列：谁/RW.RWPersonSingle 是/v 总理/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁是第一个中国国家总理 : 谁是第一个中国国家总理 : Person
匹配成功: 谁是第一个中国国家总理 : 谁是第一个中国国家总理 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/m/ns/ns/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 总理/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/m/ns/ns/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 是/v 总理/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁是第一个中国国家总理】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
序号：10
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
序号：2
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	2
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 72：谁是第一个中国国家总理 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁是第一个中国国家总理
Question 候选答案：
周恩来  1.0
温家宝  0.5096444242071121
主席  0.4523314058403499
外交部长  0.41477210237158824
历界  0.34798102098009615
袁世凯  0.26423264488913367
堵悠悠  0.26405582609721584
宋教仁  0.26404710285421007
国人  0.2639387908498027
大总统  0.2638051071167343
赵秉钧  0.26374144013428374
唐绍仪  0.26372439218372357
连飘  0.24499013677824888
毛泽东  0.20849635689720858
主持人  0.17028153096816603
吴桂贤  0.16987862217614516
桂贤  0.16962880719750242
ExpectAnswerRank: 1

mrr: 60.861111111111114
perfectCount: 57
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 72

MRR：84.52932098765432%
回答完美率：79.16666666666666%
回答不完美率：13.88888888888889%
回答错误率：6.944444444444445%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《西厢记》的作者是谁:王实甫
Question:《西厢记》的作者是谁
ExpectAnswer:王实甫
没有从数据库中查询到问题：《西厢记》的作者是谁
Question：《西厢记》的作者是谁 搜索到Evidence 10 条
将Question：《西厢记》的作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 《西厢记》的作者是谁
问题：《西厢记》的作者是谁
词和词性序列：西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nz/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《西厢记》的作者是谁
分词结果为：西厢记 的 作者 是 谁
句法树: 
句子依存关系：
	assmod(作者-3, 西厢记-1)
	assm(西厢记-1, 的-2)
	top(是-4, 作者-3)
	root(ROOT-0, 是-4)
	attr(是-4, 谁-5)
主谓宾：作者 是 谁
主谓宾词和词性序列：作者/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《西厢记》的作者是谁 : 《西厢记》的作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nz/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 作者/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《西厢记》的作者是谁】匹配到多个模式：
序号：1
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《西厢记》的作者是谁
	模式 : 《西厢记》的作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《西厢记》的作者是谁
	模式 : 《西厢记》的作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 西厢记/nz 的/uj 作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nz/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 作者/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 73：《西厢记》的作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 《西厢记》的作者是谁
Question 候选答案：
王实甫  1.0
崔莺莺  0.7973944578012333
作家  0.5626388247172271
元贞  0.21172704043582566
张珙  0.15055901952407075
钟嗣成  0.1393356055756161
朱权  0.13924920837747895
王世贞  0.13923929834339124
张君瑞  0.11142123686717036
于元贞  0.11137606935560009
丽春  0.09608733915129643
剧作家  0.08364771682624549
ExpectAnswerRank: 1

mrr: 61.861111111111114
perfectCount: 58
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 73

MRR：84.74124809741248%
回答完美率：79.45205479452055%
回答不完美率：13.698630136986301%
回答错误率：6.8493150684931505%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《西厢记》是谁的作品:王实甫
Question:《西厢记》是谁的作品
ExpectAnswer:王实甫
没有从数据库中查询到问题：《西厢记》是谁的作品
Question：《西厢记》是谁的作品 搜索到Evidence 8 条
将Question：《西厢记》是谁的作品 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 《西厢记》是谁的作品
问题：《西厢记》是谁的作品
词和词性序列：西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
词性序列：nz/v/RW.RWPersonSingle/N.ObjectArt
对问题进行分词：《西厢记》是谁的作品
分词结果为：西厢记 是 谁的 作品
句法树: 
句子依存关系：
	advmod(是-2, 西厢记-1)
	root(ROOT-0, 是-2)
	nn(作品-4, 谁的-3)
	attr(是-2, 作品-4)
主谓宾：西厢记 是 作品
主谓宾词和词性序列：西厢记/nz 是/v 作品/N.ObjectArt
主谓宾词性序列：nz/v/N.ObjectArt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《西厢记》是谁的作品 : 《西厢记》是谁的作品 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nz/v/RW.RWPersonSingle/N.ObjectArt : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nz/v/RW.RWPersonSingle/N.ObjectArt : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: nz/v/RW.RWPersonSingle/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: 西厢记/nz 是/v 作品/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: nz/v/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《西厢记》是谁的作品】匹配到多个模式：
序号：1
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 西厢记/nz 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : nz/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 《西厢记》是谁的作品
	模式 : 《西厢记》是谁的作品
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《西厢记》是谁的作品
	模式 : 《西厢记》是谁的作品
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : 西厢记/nz 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：6
	问题 : nz/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：7
	问题 : 西厢记/nz 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : nz/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 74：《西厢记》是谁的作品 【问题类型：PERSON_NAME】
************************************
************************************
Question 《西厢记》是谁的作品
Question 候选答案：
王实甫  1.0
作者  0.709328918770038
作家  0.6053879719090863
崔莺莺  0.5289517667566297
郭沫若  0.17268590771477757
张君秋  0.16650855744293444
女神  0.1389798114348813
高二  0.13257404273503023
元贞  0.12604337094290569
吴道子  0.11537563105350877
碧云天  0.10170865894832525
北雁南  0.1012724844205798
丽春  0.0758695667548318
子图  0.06406490311775118
贾岛  0.06369938560995254
李贺  0.06363353024850751
诗人  0.06343938039125228
丹心照  0.06333286621908957
ExpectAnswerRank: 1

mrr: 62.861111111111114
perfectCount: 59
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 74

MRR：84.94744744744746%
回答完美率：79.72972972972973%
回答不完美率：13.513513513513514%
回答错误率：6.756756756756757%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《幸运52》的主持人是谁:李咏
Question:《幸运52》的主持人是谁
ExpectAnswer:李咏
没有从数据库中查询到问题：《幸运52》的主持人是谁
Question：《幸运52》的主持人是谁 搜索到Evidence 10 条
将Question：《幸运52》的主持人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 《幸运52》的主持人是谁
问题：《幸运52》的主持人是谁
词和词性序列：幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：a/m/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《幸运52》的主持人是谁
分词结果为：幸运 52 的 主持人 是 谁
句法树: 
句子依存关系：
	rcmod(主持人-4, 幸运-1)
	dep(幸运-1, 52-2)
	cpm(幸运-1, 的-3)
	top(是-5, 主持人-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：主持人 是 谁
主谓宾词和词性序列：主持人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《幸运52》的主持人是谁 : 《幸运52》的主持人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: a/m/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: a/m/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: a/m/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《幸运52》的主持人是谁】匹配到多个模式：
序号：1
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《幸运52》的主持人是谁
	模式 : 《幸运52》的主持人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《幸运52》的主持人是谁
	模式 : 《幸运52》的主持人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 幸运/a 52/m 的/uj 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : a/m/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 75：《幸运52》的主持人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 《幸运52》的主持人是谁
Question 候选答案：
李咏  1.0
高雨松  0.14282097220407208
博客  0.136252627858493
志景  0.13617863799399477
李咏细  0.11964300163383719
李咏魔  0.11916299994732413
博客爆  0.11342560237123796
林艳雯  0.1134100417273883
李咏现  0.1022118538146833
李咏去  0.1020204292977295
王伟  0.05129800552649381
ExpectAnswerRank: 1

mrr: 63.861111111111114
perfectCount: 60
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 75

MRR：85.14814814814815%
回答完美率：80.0%
回答不完美率：13.333333333333334%
回答错误率：6.666666666666667%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:称为“数学之神”的科学家是谁:阿基米德
Question:称为“数学之神”的科学家是谁
ExpectAnswer:阿基米德
没有从数据库中查询到问题：称为“数学之神”的科学家是谁
Question：称为“数学之神”的科学家是谁 搜索到Evidence 10 条
将Question：称为“数学之神”的科学家是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 称为“数学之神”的科学家是谁
问题：称为“数学之神”的科学家是谁
词和词性序列：称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
词性序列：v/n/u/nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：称为“数学之神”的科学家是谁
分词结果为：称为 数学 之 神 的 科学家 是 谁
句法树: 
句子依存关系：
	rcmod(科学家-6, 称为-1)
	assmod(神-4, 数学-2)
	assm(数学-2, 之-3)
	dobj(称为-1, 神-4)
	cpm(称为-1, 的-5)
	top(是-7, 科学家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：科学家 是 谁
主谓宾词和词性序列：科学家/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 称为“数学之神”的科学家是谁 : 称为“数学之神”的科学家是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/n/u/nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: v/n/u/nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/n/u/nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 科学家/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【称为“数学之神”的科学家是谁】匹配到多个模式：
序号：1
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 称为“数学之神”的科学家是谁
	模式 : 称为“数学之神”的科学家是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 称为“数学之神”的科学家是谁
	模式 : 称为“数学之神”的科学家是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 称为/v 数学/n 之/u 神/nr 的/uj 科学家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/n/u/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 科学家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 76：称为“数学之神”的科学家是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 称为“数学之神”的科学家是谁
Question 候选答案：
阿基米德  1.0
王帆  0.14099148467560185
蒙面侠  0.1409830442816176
牛顿  0.07428757988561423
陈景  0.07206295160936521
爱迪  0.06900911804931362
亚罗  0.0570399825843965
英法美  0.05701437384832131
瑷珲  0.05700674211561793
ExpectAnswerRank: 1

mrr: 64.86111111111111
perfectCount: 61
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 76

MRR：85.34356725146199%
回答完美率：80.26315789473685%
回答不完美率：13.157894736842104%
回答错误率：6.578947368421052%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:“初出茅庐”中茅庐的本意指谁的住处:诸葛亮
Question:“初出茅庐”中茅庐的本意指谁的住处
ExpectAnswer:诸葛亮
没有从数据库中查询到问题：“初出茅庐”中茅庐的本意指谁的住处
Question：“初出茅庐”中茅庐的本意指谁的住处 搜索到Evidence 9 条
将Question：“初出茅庐”中茅庐的本意指谁的住处 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “初出茅庐”中茅庐的本意指谁的住处
问题：“初出茅庐”中茅庐的本意指谁的住处
词和词性序列：初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n 
词性序列：i/f/n/uj/n/v/RW.RWPersonSingle/n
对问题进行分词：“初出茅庐”中茅庐的本意指谁的住处
分词结果为：初出茅庐 中 茅庐 的 本意 指 谁的 住处
句法树: 
句子依存关系：
	lobj(中-2, 初出茅庐-1)
	dep(茅庐-3, 中-2)
	assmod(本意-5, 茅庐-3)
	assm(茅庐-3, 的-4)
	nsubj(指-6, 本意-5)
	root(ROOT-0, 指-6)
	nn(住处-8, 谁的-7)
	dobj(指-6, 住处-8)
主谓宾：本意 指 住处
主谓宾词和词性序列：本意/n 指/v 住处/n
主谓宾词性序列：n/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “初出茅庐”中茅庐的本意指谁的住处 : “初出茅庐”中茅庐的本意指谁的住处 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: i/f/n/uj/n/v/RW.RWPersonSingle/n : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: i/f/n/uj/n/v/RW.RWPersonSingle/n : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“初出茅庐”中茅庐的本意指谁的住处】匹配到多个模式：
序号：1
	问题 : 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : i/f/n/uj/n/v/RW.RWPersonSingle/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : i/f/n/uj/n/v/RW.RWPersonSingle/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：5
	问题 : “初出茅庐”中茅庐的本意指谁的住处
	模式 : “初出茅庐”中茅庐的本意指谁的住处
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “初出茅庐”中茅庐的本意指谁的住处
	模式 : “初出茅庐”中茅庐的本意指谁的住处
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : i/f/n/uj/n/v/RW.RWPersonSingle/n
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 初出茅庐/i 中/f 茅庐/n 的/uj 本意/n 指/v 谁的/RW.RWPersonSingle 住处/n 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：4
	问题 : i/f/n/uj/n/v/RW.RWPersonSingle/n
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 77：“初出茅庐”中茅庐的本意指谁的住处 【问题类型：PERSON_NAME】
************************************
************************************
Question “初出茅庐”中茅庐的本意指谁的住处
Question 候选答案：
诸葛亮  1.0
刘备  0.4602254859457092
隆中  0.16111141801888118
曾去隆  0.16109894244296744
博望坡  0.1369106697988706
司马光  0.1128165980608789
司马迁  0.11279392400872598
ExpectAnswerRank: 1

mrr: 65.86111111111111
perfectCount: 62
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 77

MRR：85.53391053391054%
回答完美率：80.51948051948052%
回答不完美率：12.987012987012985%
回答错误率：6.493506493506493%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:金庸原名是什么:查良镛
Question:金庸原名是什么
ExpectAnswer:查良镛
没有从数据库中查询到问题：金庸原名是什么
Question：金庸原名是什么 搜索到Evidence 9 条
将Question：金庸原名是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 金庸原名是什么
问题：金庸原名是什么
词和词性序列：金庸/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
词性序列：nr/nr/v/RW.RWOrdinarySingle
对问题进行分词：金庸原名是什么
分词结果为：金庸 原名 是 什么
句法树: 
句子依存关系：
	nn(原名-2, 金庸-1)
	top(是-3, 原名-2)
	root(ROOT-0, 是-3)
	attr(是-3, 什么-4)
主谓宾：原名 是 什么
主谓宾词和词性序列：原名/nr 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 金庸原名是什么 : 金庸原名是什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 金庸/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 原名/nr 是/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【金庸原名是什么】匹配到多个模式：
序号：1
	问题 : 金庸/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 金庸原名是什么
	模式 : 金庸原名是什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金庸原名是什么
	模式 : 金庸原名是什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金庸/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 78：金庸原名是什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 金庸原名是什么
Question 候选答案：
查良镛  1.0
笔名  0.31339093713903426
老衲  0.21390728303126144
查理斯  0.21390076884457668
华人  0.1786900066366068
作家  0.16858099245876557
主席  0.1682583416040061
名人  0.15339791187752458
宁海人  0.12234604212838027
白鹿  0.12228964939903333
神侠倚  0.12228094530692402
碧血剑  0.12226133218619281
鹿鼎记  0.12224943193380403
琼瑶  0.11620646314419995
真名  0.1062890117159899
ExpectAnswerRank: 1

mrr: 66.86111111111111
perfectCount: 63
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 78

MRR：85.71937321937322%
回答完美率：80.76923076923077%
回答不完美率：12.82051282051282%
回答错误率：6.41025641025641%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:第一个获得国际权威的杰西·欧文斯奖的中国人是谁:王军霞
Question:第一个获得国际权威的杰西·欧文斯奖的中国人是谁
ExpectAnswer:王军霞
没有从数据库中查询到问题：第一个获得国际权威的杰西·欧文斯奖的中国人是谁
Question：第一个获得国际权威的杰西·欧文斯奖的中国人是谁 搜索到Evidence 10 条
将Question：第一个获得国际权威的杰西·欧文斯奖的中国人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
问题：第一个获得国际权威的杰西·欧文斯奖的中国人是谁
词和词性序列：第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：第一个获得国际权威的杰西·欧文斯奖的中国人是谁
分词结果为：第一个 获得 国际 权威 的 杰西 欧文斯 奖 的 中国人 是 谁
句法树: 
句子依存关系：
	nummod(中国人-10, 第一个-1)
	rcmod(中国人-10, 获得-2)
	nn(权威-4, 国际-3)
	assmod(奖-8, 权威-4)
	assm(权威-4, 的-5)
	nn(奖-8, 杰西-6)
	nn(奖-8, 欧文斯-7)
	dobj(获得-2, 奖-8)
	cpm(获得-2, 的-9)
	top(是-11, 中国人-10)
	root(ROOT-0, 是-11)
	attr(是-11, 谁-12)
主谓宾：中国人 是 谁
主谓宾词和词性序列：中国人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一个获得国际权威的杰西·欧文斯奖的中国人是谁 : 第一个获得国际权威的杰西·欧文斯奖的中国人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中国人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 中国人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 中国人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一个获得国际权威的杰西·欧文斯奖的中国人是谁】匹配到多个模式：
序号：1
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
	模式 : 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
	模式 : 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 第一个/m 获得/v 国际/n 权威/n 的/uj 杰西/nr 欧文斯/nr 奖/n 的/uj 中国人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/v/n/n/uj/nr/nr/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 中国人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 79：第一个获得国际权威的杰西·欧文斯奖的中国人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 第一个获得国际权威的杰西·欧文斯奖的中国人是谁
Question 候选答案：
王军霞  1.0
运动员  0.36944448787353024
冠军  0.15328558838965262
文斯  0.09412884372948654
ExpectAnswerRank: 1

mrr: 67.86111111111111
perfectCount: 64
notPerfectCount: 10
wrongCount: 5
unknownTypeCount: 0
questionCount: 79

MRR：85.9001406469761%
回答完美率：81.0126582278481%
回答不完美率：12.658227848101266%
回答错误率：6.329113924050633%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:电视剧《新白娘子传奇》的主演叶童原名是什么:李思思
Question:电视剧《新白娘子传奇》的主演叶童原名是什么
ExpectAnswer:李思思
没有从数据库中查询到问题：电视剧《新白娘子传奇》的主演叶童原名是什么
Question：电视剧《新白娘子传奇》的主演叶童原名是什么 搜索到Evidence 9 条
将Question：电视剧《新白娘子传奇》的主演叶童原名是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 电视剧《新白娘子传奇》的主演叶童原名是什么
问题：电视剧《新白娘子传奇》的主演叶童原名是什么
词和词性序列：电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
词性序列：N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
对问题进行分词：电视剧《新白娘子传奇》的主演叶童原名是什么
分词结果为：电视剧 新白娘子 传奇 的 主演 叶童 原名 是 什么
句法树: 
句子依存关系：
	nn(传奇-3, 电视剧-1)
	nn(传奇-3, 新白娘子-2)
	assmod(原名-7, 传奇-3)
	assm(传奇-3, 的-4)
	nn(原名-7, 主演-5)
	nn(原名-7, 叶童-6)
	top(是-8, 原名-7)
	root(ROOT-0, 是-8)
	attr(是-8, 什么-9)
主谓宾：原名 是 什么
主谓宾词和词性序列：原名/nr 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：nr/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 电视剧《新白娘子传奇》的主演叶童原名是什么 : 电视剧《新白娘子传奇》的主演叶童原名是什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 原名/nr 是/v 什么/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle  : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).* : Object->ArtSingle1
匹配成功: N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).* : Object->ArtSingle1
匹配成功: 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【电视剧《新白娘子传奇》的主演叶童原名是什么】匹配到多个模式：
序号：1
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：6
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：7
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：8
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：9
	问题 : 电视剧《新白娘子传奇》的主演叶童原名是什么
	模式 : 电视剧《新白娘子传奇》的主演叶童原名是什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电视剧《新白娘子传奇》的主演叶童原名是什么
	模式 : 电视剧《新白娘子传奇》的主演叶童原名是什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 原名/nr 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：4
	问题 : nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：5
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：6
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：7
	问题 : 电视剧/N.ObjectArt 新白娘子/n 传奇/n 的/uj 主演/nr 叶童/nr 原名/nr 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：8
	问题 : N.ObjectArt/n/n/uj/nr/nr/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 80：电视剧《新白娘子传奇》的主演叶童原名是什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 电视剧《新白娘子传奇》的主演叶童原名是什么
Question 候选答案：
赵雅芝  1.0
演员  0.9583737715174528
许仙  0.8535000800754481
白蛇传  0.49235714081171306
白娘子  0.4258994253843468
李思思  0.3860296642983904
扮演者  0.333986886354394
美女  0.2925599677564491
白素贞  0.2661892831578411
小白  0.2660358877217597
陈美琪  0.2527613457291145
叶童演  0.15978330972988716
ExpectAnswerRank: 6

mrr: 68.02777777777779
perfectCount: 64
notPerfectCount: 11
wrongCount: 5
unknownTypeCount: 0
questionCount: 80

MRR：85.03472222222224%
回答完美率：80.0%
回答不完美率：13.750000000000002%
回答错误率：6.25%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:电影《英雄》的编剧是谁:王斌
Question:电影《英雄》的编剧是谁
ExpectAnswer:王斌
没有从数据库中查询到问题：电影《英雄》的编剧是谁
Question：电影《英雄》的编剧是谁 搜索到Evidence 9 条
将Question：电影《英雄》的编剧是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 电影《英雄》的编剧是谁
问题：电影《英雄》的编剧是谁
词和词性序列：电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
词性序列：N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
对问题进行分词：电影《英雄》的编剧是谁
分词结果为：电影 英雄 的 编剧 是 谁
句法树: 
句子依存关系：
	nn(英雄-2, 电影-1)
	assmod(编剧-4, 英雄-2)
	assm(英雄-2, 的-3)
	top(是-5, 编剧-4)
	root(ROOT-0, 是-5)
	attr(是-5, 谁-6)
主谓宾：编剧 是 谁
主谓宾词和词性序列：编剧/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 电影《英雄》的编剧是谁 : 电影《英雄》的编剧是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 编剧/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 编剧/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【电影《英雄》的编剧是谁】匹配到多个模式：
序号：1
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 编剧/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 编剧/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 电影《英雄》的编剧是谁
	模式 : 电影《英雄》的编剧是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影《英雄》的编剧是谁
	模式 : 电影《英雄》的编剧是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 编剧/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 电影/N.ObjectArt 英雄/nr 的/uj 编剧/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : N.ObjectArt/nr/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 编剧/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 81：电影《英雄》的编剧是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 电影《英雄》的编剧是谁
Question 候选答案：
导演  1.0
张艺谋  0.6231180084934622
王斌  0.5785664354799703
关公  0.29380752223321194
博客  0.2825322395749938
主演  0.2820904706859292
作者  0.28203164175877465
史杰鹏  0.28203144848195166
李连杰  0.23525592614311552
主持人  0.2232758060469478
武兆堤  0.16481224353769344
高高挂  0.16442310776626853
毛烽  0.15311511694672383
刘世龙  0.15282719032971803
刘尚娴  0.15279414562051394
郭振清  0.1527688473838455
田方  0.15274885610182473
周文彬  0.15273514218104478
西影厂  0.14119422643457658
李冯  0.1410333621466136
扮演者  0.13787764783303458
陈晓东  0.1294613018294935
张曼玉  0.12930848090739658
霍元甲  0.12928947809230643
梁朝伟  0.12928776654660265
章子怡  0.129270903871464
陈道明  0.12925690387142458
甄子丹  0.12924509091596154
王菲  0.12921513742444946
ExpectAnswerRank: 3

mrr: 68.36111111111111
perfectCount: 64
notPerfectCount: 12
wrongCount: 5
unknownTypeCount: 0
questionCount: 81

MRR：84.39643347050755%
回答完美率：79.01234567901234%
回答不完美率：14.814814814814813%
回答错误率：6.172839506172839%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:谁是第一个中国国家总理:周恩来
Question:谁是第一个中国国家总理
ExpectAnswer:周恩来
从数据库中查询到Question：谁是第一个中国国家总理
使用【模式匹配】的方法判断问题类型： 谁是第一个中国国家总理
问题：谁是第一个中国国家总理
词和词性序列：谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
词性序列：RW.RWPersonSingle/v/m/ns/ns/nr
主谓宾词和词性序列：谁/RW.RWPersonSingle 是/v 总理/nr
主谓宾词性序列：RW.RWPersonSingle/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 谁是第一个中国国家总理 : 谁是第一个中国国家总理 : Person
匹配成功: 谁是第一个中国国家总理 : 谁是第一个中国国家总理 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/m/ns/ns/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 总理/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr  : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/m/ns/ns/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: 谁/RW.RWPersonSingle 是/v 总理/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
匹配成功: RW.RWPersonSingle/v/nr : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).* : Person->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【谁是第一个中国国家总理】匹配到多个模式：
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：9
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
序号：10
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
序号：2
	问题 : 谁是第一个中国国家总理
	模式 : 谁是第一个中国国家总理
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 谁/RW.RWPersonSingle 是/v 第一个/m 中国/ns 国家/ns 总理/nr 
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：6
	问题 : RW.RWPersonSingle/v/m/ns/ns/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：7
	问题 : 谁/RW.RWPersonSingle 是/v 总理/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
序号：8
	问题 : RW.RWPersonSingle/v/nr
	模式 : .*(RW.RWPersonSingle).*(V.).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	2
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 82：谁是第一个中国国家总理 【问题类型：PERSON_NAME】
************************************
************************************
Question 谁是第一个中国国家总理
Question 候选答案：
周恩来  1.0
温家宝  0.5096444242071121
主席  0.4523314058403499
外交部长  0.41477210237158824
历界  0.34798102098009615
袁世凯  0.26423264488913367
堵悠悠  0.26405582609721584
宋教仁  0.26404710285421007
国人  0.2639387908498027
大总统  0.2638051071167343
赵秉钧  0.26374144013428374
唐绍仪  0.26372439218372357
连飘  0.24499013677824888
毛泽东  0.20849635689720858
主持人  0.17028153096816603
吴桂贤  0.16987862217614516
桂贤  0.16962880719750242
ExpectAnswerRank: 1

mrr: 69.36111111111111
perfectCount: 65
notPerfectCount: 12
wrongCount: 5
unknownTypeCount: 0
questionCount: 82

MRR：84.58672086720867%
回答完美率：79.26829268292683%
回答不完美率：14.634146341463413%
回答错误率：6.097560975609756%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《洛神赋图》是谁的作品:曹植
Question:《洛神赋图》是谁的作品
ExpectAnswer:曹植
没有从数据库中查询到问题：《洛神赋图》是谁的作品
Question：《洛神赋图》是谁的作品 搜索到Evidence 8 条
将Question：《洛神赋图》是谁的作品 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 《洛神赋图》是谁的作品
问题：《洛神赋图》是谁的作品
词和词性序列：洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
词性序列：nr/n/v/RW.RWPersonSingle/N.ObjectArt
对问题进行分词：《洛神赋图》是谁的作品
分词结果为：洛神赋 图 是 谁的 作品
句法树: 
句子依存关系：
	nn(图-2, 洛神赋-1)
	top(是-3, 图-2)
	root(ROOT-0, 是-3)
	nn(作品-5, 谁的-4)
	attr(是-3, 作品-5)
主谓宾：图 是 作品
主谓宾词和词性序列：图/n 是/v 作品/N.ObjectArt
主谓宾词性序列：n/v/N.ObjectArt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《洛神赋图》是谁的作品 : 《洛神赋图》是谁的作品 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/n/v/RW.RWPersonSingle/N.ObjectArt : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/n/v/RW.RWPersonSingle/N.ObjectArt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/n/v/RW.RWPersonSingle/N.ObjectArt : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt  : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: nr/n/v/RW.RWPersonSingle/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: 图/n 是/v 作品/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: n/v/N.ObjectArt : .*(V).*(N.ObjectArt).* : Object->ArtSong2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《洛神赋图》是谁的作品】匹配到多个模式：
序号：1
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 图/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：10
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：11
	问题 : 《洛神赋图》是谁的作品
	模式 : 《洛神赋图》是谁的作品
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《洛神赋图》是谁的作品
	模式 : 《洛神赋图》是谁的作品
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 洛神赋/nr 图/n 是/v 谁的/RW.RWPersonSingle 作品/N.ObjectArt 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : nr/n/v/RW.RWPersonSingle/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 图/n 是/v 作品/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：10
	问题 : n/v/N.ObjectArt
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 83：《洛神赋图》是谁的作品 【问题类型：PERSON_NAME】
************************************
************************************
Question 《洛神赋图》是谁的作品
Question 候选答案：
顾恺之  1.0
曹植  0.9983724206722736
洛神  0.5968881436432588
作者  0.4806933944711884
曹操  0.4186222748388984
奥赛罗  0.3861646985593527
画家  0.3216449264932483
张华  0.27353064869936927
诗人  0.25744608488521264
女人  0.25720256364358807
人物  0.24277969447964012
谈强强  0.2091901955059154
国曹魏  0.17738134522290896
ExpectAnswerRank: 2

mrr: 69.86111111111111
perfectCount: 65
notPerfectCount: 13
wrongCount: 5
unknownTypeCount: 0
questionCount: 83

MRR：84.17001338688085%
回答完美率：78.3132530120482%
回答不完美率：15.66265060240964%
回答错误率：6.024096385542169%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:诗仙是谁:李白
Question:诗仙是谁
ExpectAnswer:李白
没有从数据库中查询到问题：诗仙是谁
Question：诗仙是谁 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 诗仙是谁
问题：诗仙是谁
词和词性序列：诗仙/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nr/v/RW.RWPersonSingle
对问题进行分词：诗仙是谁
分词结果为：诗仙 是 谁
句法树: 
句子依存关系：
	advmod(是-2, 诗仙-1)
	root(ROOT-0, 是-2)
	attr(是-2, 谁-3)
主谓宾：诗仙 是 谁
主谓宾词和词性序列：诗仙/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 诗仙是谁 : 诗仙是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 诗仙/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【诗仙是谁】匹配到多个模式：
序号：1
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 诗仙是谁
	模式 : 诗仙是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 诗仙是谁
	模式 : 诗仙是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 诗仙/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 84：诗仙是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 诗仙是谁
Question 候选答案：
李白  1.0
杜甫  0.42433037399614876
贺知章  0.23261044934960845
寻仙  0.22233476105167907
王维  0.20732320956150593
小羽  0.20706994949838511
那诗王  0.2011995288720878
明狂客  0.12906625466230953
诗人  0.11414171803806701
高堂  0.10806621232155375
金樽空  0.10198865777072834
ExpectAnswerRank: 1

mrr: 70.86111111111111
perfectCount: 66
notPerfectCount: 13
wrongCount: 5
unknownTypeCount: 0
questionCount: 84

MRR：84.35846560846562%
回答完美率：78.57142857142857%
回答不完美率：15.476190476190476%
回答错误率：5.952380952380952%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:岳不群的女儿叫什么名字:岳灵珊
Question:岳不群的女儿叫什么名字
ExpectAnswer:岳灵珊
没有从数据库中查询到问题：岳不群的女儿叫什么名字
Question：岳不群的女儿叫什么名字 搜索到Evidence 8 条
将Question：岳不群的女儿叫什么名字 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 岳不群的女儿叫什么名字
问题：岳不群的女儿叫什么名字
词和词性序列：岳不群/nr 的/uj 女儿/n 叫/v 什么名字/RW.RWOrdinarySingle 
词性序列：nr/uj/n/v/RW.RWOrdinarySingle
对问题进行分词：岳不群的女儿叫什么名字
分词结果为：岳不群 的 女儿 叫 什么名字
句法树: 
句子依存关系：
	assmod(女儿-3, 岳不群-1)
	assm(岳不群-1, 的-2)
	nsubj(叫-4, 女儿-3)
	root(ROOT-0, 叫-4)
	dobj(叫-4, 什么名字-5)
主谓宾：女儿 叫 什么名字
主谓宾词和词性序列：女儿/n 叫/v 什么名字/RW.RWOrdinarySingle
主谓宾词性序列：n/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 岳不群的女儿叫什么名字 : 岳不群的女儿叫什么名字 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 岳不群/nr 的/uj 女儿/n 叫/v 什么名字/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/uj/n/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【岳不群的女儿叫什么名字】匹配到多个模式：
序号：1
	问题 : 岳不群/nr 的/uj 女儿/n 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 岳不群的女儿叫什么名字
	模式 : 岳不群的女儿叫什么名字
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 岳不群的女儿叫什么名字
	模式 : 岳不群的女儿叫什么名字
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 岳不群/nr 的/uj 女儿/n 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 85：岳不群的女儿叫什么名字 【问题类型：PERSON_NAME】
************************************
************************************
Question 岳不群的女儿叫什么名字
Question 候选答案：
笑傲江湖  1.0
老婆  0.541546108594326
岳灵珊  0.48625503121982494
林平之  0.34124991617315087
妻子  0.3320759974292511
笑傲  0.3318440127540768
宁中则  0.2969454292925833
宁女侠  0.2967542534277685
王伟  0.18204174478811128
演员  0.18051907932731415
女中豪杰  0.17784568975244405
耶律洪基  0.15454251983340234
鹿鼎记  0.1545065786213331
王从希  0.15446692900562306
令狐冲  0.15437328313328638
灵剑  0.15430132713262304
岳夫人  0.11879849692328455
华山派  0.11863639397788027
夫人  0.11861621660600453
杨莲亭  0.07193212875710331
老夫  0.0602901789496267
朱佑樘  0.0602901789496267
ExpectAnswerRank: 3

mrr: 71.19444444444444
perfectCount: 66
notPerfectCount: 14
wrongCount: 5
unknownTypeCount: 0
questionCount: 85

MRR：83.75816993464052%
回答完美率：77.64705882352942%
回答不完美率：16.470588235294116%
回答错误率：5.88235294117647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:我国明代“七下西洋”的航海家是谁:郑和
Question:我国明代“七下西洋”的航海家是谁
ExpectAnswer:郑和
没有从数据库中查询到问题：我国明代“七下西洋”的航海家是谁
Question：我国明代“七下西洋”的航海家是谁 搜索到Evidence 10 条
将Question：我国明代“七下西洋”的航海家是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 我国明代“七下西洋”的航海家是谁
问题：我国明代“七下西洋”的航海家是谁
词和词性序列：我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/t/m/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：我国明代“七下西洋”的航海家是谁
分词结果为：我国 明代 七下 西洋 的 航海家 是 谁
句法树: 
句子依存关系：
	nn(明代-2, 我国-1)
	nn(西洋-4, 明代-2)
	nummod(西洋-4, 七下-3)
	assmod(航海家-6, 西洋-4)
	assm(西洋-4, 的-5)
	top(是-7, 航海家-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：航海家 是 谁
主谓宾词和词性序列：航海家/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 我国明代“七下西洋”的航海家是谁 : 我国明代“七下西洋”的航海家是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/t/m/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 航海家/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/t/m/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 航海家/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/t/m/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 航海家/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【我国明代“七下西洋”的航海家是谁】匹配到多个模式：
序号：1
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 我国明代“七下西洋”的航海家是谁
	模式 : 我国明代“七下西洋”的航海家是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国明代“七下西洋”的航海家是谁
	模式 : 我国明代“七下西洋”的航海家是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 我国/ns 明代/t 七下/m 西洋/n 的/uj 航海家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/t/m/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 航海家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 86：我国明代“七下西洋”的航海家是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 我国明代“七下西洋”的航海家是谁
Question 候选答案：
郑和  1.0
和亚非  0.21880109872150885
姜太公  0.2025082281177898
阿尔杰  0.18012064337779093
中国人  0.1613590695141955
ExpectAnswerRank: 1

mrr: 72.19444444444444
perfectCount: 67
notPerfectCount: 14
wrongCount: 5
unknownTypeCount: 0
questionCount: 86

MRR：83.94702842377261%
回答完美率：77.90697674418605%
回答不完美率：16.27906976744186%
回答错误率：5.813953488372093%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:曹雪芹的《红楼梦》中，葬花的人是谁:林黛玉
Question:曹雪芹的《红楼梦》中，葬花的人是谁
ExpectAnswer:林黛玉
没有从数据库中查询到问题：曹雪芹的《红楼梦》中，葬花的人是谁
Question：曹雪芹的《红楼梦》中，葬花的人是谁 搜索到Evidence 9 条
将Question：曹雪芹的《红楼梦》中，葬花的人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 曹雪芹的《红楼梦》中，葬花的人是谁
问题：曹雪芹的《红楼梦》中，葬花的人是谁
词和词性序列：曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：曹雪芹的《红楼梦》中，葬花的人是谁
分词结果为：曹雪芹 的 红楼梦 中 葬花 的 人 是 谁
句法树: 
句子依存关系：
	assmod(红楼梦-3, 曹雪芹-1)
	assm(曹雪芹-1, 的-2)
	lobj(中-4, 红楼梦-3)
	dep(人-7, 中-4)
	assmod(人-7, 葬花-5)
	assm(葬花-5, 的-6)
	top(是-8, 人-7)
	root(ROOT-0, 是-8)
	attr(是-8, 谁-9)
主谓宾：人 是 谁
主谓宾词和词性序列：人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 曹雪芹的《红楼梦》中，葬花的人是谁 : 曹雪芹的《红楼梦》中，葬花的人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【曹雪芹的《红楼梦》中，葬花的人是谁】匹配到多个模式：
序号：1
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 曹雪芹的《红楼梦》中，葬花的人是谁
	模式 : 曹雪芹的《红楼梦》中，葬花的人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 曹雪芹的《红楼梦》中，葬花的人是谁
	模式 : 曹雪芹的《红楼梦》中，葬花的人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 曹雪芹/nr 的/uj 红楼梦/N.ObjectArt 中/f 葬花/n 的/uj 人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nr/uj/N.ObjectArt/f/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 87：曹雪芹的《红楼梦》中，葬花的人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 曹雪芹的《红楼梦》中，葬花的人是谁
Question 候选答案：
林黛玉  1.0
高中历史  0.4839619191454864
小筱儿  0.3173640289685387
阿尔杰  0.31732154404602436
花吟  0.31454431336343724
贾宝玉  0.19149814159069195
博客  0.17463420478100586
商大杭  0.17457424818205663
卜侬  0.16670028043372576
文学家  0.15084815295332396
杨妃  0.15083842197099454
曹公  0.14291201525601757
花飞飞  0.11134383472777568
红绡香  0.09531226908305661
惜春  0.0952532794421823
ExpectAnswerRank: 1

mrr: 73.19444444444444
perfectCount: 68
notPerfectCount: 14
wrongCount: 5
unknownTypeCount: 0
questionCount: 87

MRR：84.1315453384419%
回答完美率：78.16091954022988%
回答不完美率：16.091954022988507%
回答错误率：5.747126436781609%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:金庸小说《倚天屠龙记》中，金毛狮王叫什么名字:谢逊
Question:金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
ExpectAnswer:谢逊
没有从数据库中查询到问题：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
Question：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字 搜索到Evidence 10 条
将Question：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
问题：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
词和词性序列：金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
词性序列：nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
对问题进行分词：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
分词结果为：金庸 小说 倚 天屠龙 记 中 金毛狮王 叫 什么名字
句法树: 
句子依存关系：
	nn(倚-3, 金庸-1)
	nn(倚-3, 小说-2)
	nsubj(叫-8, 倚-3)
	nummod(记-5, 天屠龙-4)
	lobj(中-6, 记-5)
	loc(叫-8, 中-6)
	advmod(叫-8, 金毛狮王-7)
	root(ROOT-0, 叫-8)
	dobj(叫-8, 什么名字-9)
主谓宾：倚 叫 什么名字
主谓宾词和词性序列：倚/v 叫/v 什么名字/RW.RWOrdinarySingle
主谓宾词性序列：v/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字 : 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
匹配成功: 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
匹配成功: nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
匹配成功: nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【金庸小说《倚天屠龙记》中，金毛狮王叫什么名字】匹配到多个模式：
序号：1
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：4
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：5
	问题 : 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
	模式 : 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
	分类 : Person
序号：6
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：7
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：8
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
	模式 : 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
	分类 : Person
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：2
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：3
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 金庸/nr 小说/N.CONCEPT 倚/v 天屠龙/nr 记/v 中/f 金毛狮王/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：4
	问题 : nr/N.CONCEPT/v/nr/v/f/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 88：金庸小说《倚天屠龙记》中，金毛狮王叫什么名字 【问题类型：PERSON_NAME】
************************************
************************************
Question 金庸小说《倚天屠龙记》中，金毛狮王叫什么名字
Question 候选答案：
谢逊  1.0
沙和尚  0.34099008823399535
唐僧  0.3409051163980922
吴承恩  0.340830931463631
运动员  0.32463046093779907
阿尔杰  0.20549114413283526
里澜城  0.1137175423525917
山口百惠  0.10822573134296347
ExpectAnswerRank: 1

mrr: 74.19444444444444
perfectCount: 69
notPerfectCount: 14
wrongCount: 5
unknownTypeCount: 0
questionCount: 88

MRR：84.31186868686868%
回答完美率：78.4090909090909%
回答不完美率：15.909090909090908%
回答错误率：5.681818181818182%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:第一位扮演邦女郎的亚洲女星是谁:杨紫琼
Question:第一位扮演邦女郎的亚洲女星是谁
ExpectAnswer:杨紫琼
没有从数据库中查询到问题：第一位扮演邦女郎的亚洲女星是谁
Question：第一位扮演邦女郎的亚洲女星是谁 搜索到Evidence 9 条
将Question：第一位扮演邦女郎的亚洲女星是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第一位扮演邦女郎的亚洲女星是谁
问题：第一位扮演邦女郎的亚洲女星是谁
词和词性序列：第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
词性序列：m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
对问题进行分词：第一位扮演邦女郎的亚洲女星是谁
分词结果为：第一位 扮演 邦 女郎 的 亚洲 女星 是 谁
句法树: 
句子依存关系：
	nummod(女星-7, 第一位-1)
	rcmod(女星-7, 扮演-2)
	nn(女郎-4, 邦-3)
	dobj(扮演-2, 女郎-4)
	cpm(扮演-2, 的-5)
	nn(女星-7, 亚洲-6)
	top(是-8, 女星-7)
	root(ROOT-0, 是-8)
	attr(是-8, 谁-9)
主谓宾：女星 是 谁
主谓宾词和词性序列：女星/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一位扮演邦女郎的亚洲女星是谁 : 第一位扮演邦女郎的亚洲女星是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女星/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 女星/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女星/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一位扮演邦女郎的亚洲女星是谁】匹配到多个模式：
序号：1
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 第一位扮演邦女郎的亚洲女星是谁
	模式 : 第一位扮演邦女郎的亚洲女星是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一位扮演邦女郎的亚洲女星是谁
	模式 : 第一位扮演邦女郎的亚洲女星是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 第一位/m 扮演/v 邦/ng 女郎/n 的/uj 亚洲/ns 女星/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : m/v/ng/n/uj/ns/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女星/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 89：第一位扮演邦女郎的亚洲女星是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 第一位扮演邦女郎的亚洲女星是谁
Question 候选答案：
女主角  1.0
角色  0.7521206402439778
演员  0.7189872076019058
邦德  0.7188931401266805
都爱邦  0.7179684706836004
巩俐  0.5934023235993432
西尔维亚  0.5932781850940185
盖森  0.5932558000154485
大姐大  0.593161356854555
格林来  0.5931075019839311
伊娃  0.5930517820325215
明星  0.5684804718535639
杨紫琼  0.5017043197115937
红颜  0.4998965925246649
哈利  0.4372485772457012
贝瑞  0.4372045252703579
金克斯  0.43694961559309203
皮尔斯  0.4369141539243276
位第五任邦  0.4070937780259574
乌苏拉  0.3764259869333947
詹姆斯  0.375128873148793
美女  0.3750395684417924
金鹰  0.37467605055367037
女人  0.3444212491962612
安德丝  0.3128930588319096
扮演者  0.3126441001528649
肖恩  0.31261857228803247
康纳利  0.3126005602114815
ExpectAnswerRank: 13

mrr: 74.27136752136752
perfectCount: 69
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 89

MRR：83.45097474310957%
回答完美率：77.52808988764045%
回答不完美率：16.853932584269664%
回答错误率：5.617977528089887%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:创办“精武门”的中国清末爱国武术家是谁:霍元甲
Question:创办“精武门”的中国清末爱国武术家是谁
ExpectAnswer:霍元甲
没有从数据库中查询到问题：创办“精武门”的中国清末爱国武术家是谁
Question：创办“精武门”的中国清末爱国武术家是谁 搜索到Evidence 10 条
将Question：创办“精武门”的中国清末爱国武术家是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 创办“精武门”的中国清末爱国武术家是谁
问题：创办“精武门”的中国清末爱国武术家是谁
词和词性序列：创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
词性序列：v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
对问题进行分词：创办“精武门”的中国清末爱国武术家是谁
分词结果为：创办 精武门 的 中国 清末 爱国 武术家 是 谁
句法树: 
句子依存关系：
	rcmod(武术家-7, 创办-1)
	dobj(创办-1, 精武门-2)
	cpm(创办-1, 的-3)
	nn(武术家-7, 中国-4)
	nn(武术家-7, 清末-5)
	amod(武术家-7, 爱国-6)
	top(是-8, 武术家-7)
	root(ROOT-0, 是-8)
	attr(是-8, 谁-9)
主谓宾：武术家 是 谁
主谓宾词和词性序列：武术家/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 创办“精武门”的中国清末爱国武术家是谁 : 创办“精武门”的中国清末爱国武术家是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 武术家/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 武术家/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 武术家/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【创办“精武门”的中国清末爱国武术家是谁】匹配到多个模式：
序号：1
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 创办“精武门”的中国清末爱国武术家是谁
	模式 : 创办“精武门”的中国清末爱国武术家是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 创办“精武门”的中国清末爱国武术家是谁
	模式 : 创办“精武门”的中国清末爱国武术家是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 创办/v 精武门/n 的/uj 中国/ns 清末/t 爱国/a 武术家/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : v/n/uj/ns/t/a/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 武术家/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 90：创办“精武门”的中国清末爱国武术家是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 创办“精武门”的中国清末爱国武术家是谁
Question 候选答案：
霍元甲  1.0
运动员  0.3011933709174111
郎平  0.2790764022650568
李小龙  0.24433135467803616
曹雪芹  0.17346130604425594
阿尔杰  0.17333311958665476
民族英雄  0.12027942965176804
林黛玉  0.08847409663742989
保罗  0.08496597226623685
皇帝  0.08495584380184286
ExpectAnswerRank: 1

mrr: 75.27136752136752
perfectCount: 70
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 90

MRR：83.63485280151947%
回答完美率：77.77777777777779%
回答不完美率：16.666666666666664%
回答错误率：5.555555555555555%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁:小柯
Question:由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
ExpectAnswer:小柯
没有从数据库中查询到问题：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
Question：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁 搜索到Evidence 10 条
将Question：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
问题：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
词和词性序列：由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
词性序列：p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
对问题进行分词：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
分词结果为：由 百位 明星 共同 演唱 的 奥运 歌曲 北京 欢迎 你 的 曲作者 是 谁
句法树: 
句子依存关系：
	prep(演唱-5, 由-1)
	nummod(明星-3, 百位-2)
	pobj(由-1, 明星-3)
	advmod(演唱-5, 共同-4)
	rcmod(歌曲-8, 演唱-5)
	cpm(演唱-5, 的-6)
	nn(歌曲-8, 奥运-7)
	nsubj(欢迎-10, 歌曲-8)
	nsubj(欢迎-10, 北京-9)
	root(ROOT-0, 欢迎-10)
	assmod(曲作者-13, 你-11)
	assm(你-11, 的-12)
	dobj(欢迎-10, 曲作者-13)
	dep(欢迎-10, 是-14)
	attr(是-14, 谁-15)
主谓宾：歌曲 欢迎 是
主谓宾词和词性序列：歌曲/N.ObjectArt 欢迎/v 是/v
主谓宾词性序列：N.ObjectArt/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁 : 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle  : .*(V).*(N.ObjectArt).* : Object->ArtSong2
匹配成功: p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle : .*(V).*(N.ObjectArt).* : Object->ArtSong2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁】匹配到多个模式：
序号：1
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：9
	问题 : 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
	模式 : 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
	模式 : 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：4
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：5
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 由/p 百位/m 明星/nr 共同/d 演唱/v 的/uj 奥运/j 歌曲/N.ObjectArt 北京/ns 欢迎/v 你/r 的/uj 曲作者/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
序号：8
	问题 : p/m/nr/d/v/uj/j/N.ObjectArt/ns/v/r/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V).*(N.ObjectArt).*
	分类 : Object->ArtSong2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 91：由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 由百位明星共同演唱的奥运歌曲《北京欢迎你》的曲作者是谁
Question 候选答案：
小柯  1.0
演讲者  0.26020994717741264
豆丁  0.2540192339643554
林夕  0.14559482924572045
岳飞  0.13630191042657785
词作者  0.13629807395330587
豆丁网  0.13319790353397282
翁美玲  0.13257219568539672
女主角  0.13010293772752102
奥黛丽  0.13009961814383864
张仲景  0.12638508266783316
李宇春  0.12392524672386226
李时珍  0.12391741282035126
那英  0.12391719886209117
扁鹊  0.1239129427011465
孙燕姿  0.12391278564960129
华佗  0.12390885907933569
李小龙  0.1239068433488368
由林夕  0.08057794528393727
冠军  0.08054317471540456
ExpectAnswerRank: 1

mrr: 76.27136752136752
perfectCount: 71
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 91

MRR：83.81468958392036%
回答完美率：78.02197802197803%
回答不完美率：16.483516483516482%
回答错误率：5.4945054945054945%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:以“莫须有”罪名毒害了名将岳飞的奸臣是谁:秦桧
Question:以“莫须有”罪名毒害了名将岳飞的奸臣是谁
ExpectAnswer:秦桧
没有从数据库中查询到问题：以“莫须有”罪名毒害了名将岳飞的奸臣是谁
Question：以“莫须有”罪名毒害了名将岳飞的奸臣是谁 搜索到Evidence 10 条
将Question：以“莫须有”罪名毒害了名将岳飞的奸臣是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
问题：以“莫须有”罪名毒害了名将岳飞的奸臣是谁
词和词性序列：以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
词性序列：p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
对问题进行分词：以“莫须有”罪名毒害了名将岳飞的奸臣是谁
分词结果为：以 莫须有 罪名 毒害 了 名将 岳飞 的 奸臣 是 谁
句法树: 
句子依存关系：
	prep(毒害-4, 以-1)
	vmod(罪名-3, 莫须有-2)
	pobj(以-1, 罪名-3)
	rcmod(奸臣-9, 毒害-4)
	asp(毒害-4, 了-5)
	nn(岳飞-7, 名将-6)
	dobj(毒害-4, 岳飞-7)
	cpm(毒害-4, 的-8)
	top(是-10, 奸臣-9)
	root(ROOT-0, 是-10)
	attr(是-10, 谁-11)
主谓宾：奸臣 是 谁
主谓宾词和词性序列：奸臣/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 以“莫须有”罪名毒害了名将岳飞的奸臣是谁 : 以“莫须有”罪名毒害了名将岳飞的奸臣是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 奸臣/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 奸臣/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 奸臣/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【以“莫须有”罪名毒害了名将岳飞的奸臣是谁】匹配到多个模式：
序号：1
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
	模式 : 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
	模式 : 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 以/p 莫须有/i 罪名/n 毒害/v 了/ul 名将/n 岳飞/nr 的/uj 奸臣/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : p/i/n/v/ul/n/nr/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 奸臣/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 92：以“莫须有”罪名毒害了名将岳飞的奸臣是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 以“莫须有”罪名毒害了名将岳飞的奸臣是谁
Question 候选答案：
秦桧  1.0
人物  0.34392614899546603
阿尔杰  0.23524039975572952
美女  0.2316892439746976
包拯  0.22766671681546938
特洛伊  0.22451479698616988
严嵩  0.22451010164422508
海伦  0.22442348355877
豆丁  0.19557653493653226
英雄  0.12003702369146757
画家  0.11946169407704442
毕加索  0.11945630972602768
曹操  0.07604220262872047
ExpectAnswerRank: 1

mrr: 77.27136752136752
perfectCount: 72
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 92

MRR：83.99061687105166%
回答完美率：78.26086956521739%
回答不完美率：16.304347826086957%
回答错误率：5.434782608695652%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁:周慧敏
Question:被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
ExpectAnswer:周慧敏
没有从数据库中查询到问题：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
Question：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁 搜索到Evidence 10 条
将Question：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
问题：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
词和词性序列：被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
词性序列：n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
对问题进行分词：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
分词结果为：被誉为 香港 第一代 玉女 掌门人 与 倪震 结婚 的 女明星 是 谁
句法树: 
句子依存关系：
	nn(香港-2, 被誉为-1)
	nn(结婚-8, 香港-2)
	nummod(结婚-8, 第一代-3)
	nn(结婚-8, 玉女-4)
	conj(结婚-8, 掌门人-5)
	cc(结婚-8, 与-6)
	nn(结婚-8, 倪震-7)
	assmod(女明星-10, 结婚-8)
	assm(结婚-8, 的-9)
	top(是-11, 女明星-10)
	root(ROOT-0, 是-11)
	attr(是-11, 谁-12)
主谓宾：女明星 是 谁
主谓宾词和词性序列：女明星/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁 : 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女明星/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女明星/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁】匹配到多个模式：
序号：1
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女明星/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 女明星/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
	模式 : 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
	模式 : 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女明星/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 被誉为/n 香港/ns 第一代/m 玉女/n 掌门人/n 与/p 倪震/nr 结婚/v 的/uj 女明星/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/ns/m/n/n/p/nr/v/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 女明星/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 93：被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 被誉为香港第一代“玉女掌门人”，与倪震结婚的女明星是谁
Question 候选答案：
周慧敏  1.0
徐克  0.6964913615013776
导演  0.6964728798333931
男主角  0.5619939135886488
宁采臣  0.427615805490389
豆丁网  0.30451511229567907
张国荣  0.28506128088076205
周慧  0.27622423275316593
荆文彬  0.18337145546091213
谷歌  0.13438361398884408
郑渊洁  0.13437934817921884
ExpectAnswerRank: 1

mrr: 78.27136752136752
perfectCount: 73
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 93

MRR：84.162760775664%
回答完美率：78.49462365591397%
回答不完美率：16.129032258064516%
回答错误率：5.376344086021505%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁:赵薇
Question:97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
ExpectAnswer:赵薇
没有从数据库中查询到问题：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
Question：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁 搜索到Evidence 10 条
将Question：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
问题：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
词和词性序列：97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle 
词性序列：m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle
对问题进行分词：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
分词结果为：97年 还珠格格 中 因 饰演 小燕子 一角 而 红遍 亚洲 的 女演员 是 谁
句法树: 
句子依存关系：
	dep(红遍-9, 97年-1)
	lobj(中-3, 还珠格格-2)
	loc(红遍-9, 中-3)
	prep(红遍-9, 因-4)
	pccomp(因-4, 饰演-5)
	nn(一角-7, 小燕子-6)
	dobj(饰演-5, 一角-7)
	prtmod(红遍-9, 而-8)
	rcmod(女演员-12, 红遍-9)
	dobj(红遍-9, 亚洲-10)
	cpm(红遍-9, 的-11)
	top(是-13, 女演员-12)
	root(ROOT-0, 是-13)
	attr(是-13, 谁-14)
主谓宾：女演员 是 谁
主谓宾词和词性序列：女演员/n 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：n/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁 : 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女演员/n 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女演员/n 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁】匹配到多个模式：
序号：1
	问题 : 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女演员/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 女演员/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：9
	问题 : 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
	模式 : 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
	模式 : 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女演员/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 97年/m 还珠格格/nz 中/f 因/p 饰演/v 小燕子/n 一角/n 而/c 红遍/a 亚洲/ns 的/uj 女演员/n 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：6
	问题 : m/nz/f/p/v/n/n/c/a/ns/uj/n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：7
	问题 : 女演员/n 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：8
	问题 : n/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 94：97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 97年《还珠格格》中，因饰演小燕子一角而红遍亚洲的女演员是谁
Question 候选答案：
赵薇  1.0
刘谦  0.27789852720829106
豆丁  0.1886978947798668
宋丹丹  0.10454407830752059
赵本山  0.10454002228123503
孙悟空  0.09687989931994445
博客  0.09435832382867358
黄小行  0.09435029660196957
ExpectAnswerRank: 1

mrr: 79.27136752136752
perfectCount: 74
notPerfectCount: 15
wrongCount: 5
unknownTypeCount: 0
questionCount: 94

MRR：84.33124204400801%
回答完美率：78.72340425531915%
回答不完美率：15.957446808510639%
回答错误率：5.319148936170213%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《西雅图不眠夜》的女主角是谁:安妮
Question:《西雅图不眠夜》的女主角是谁
ExpectAnswer:安妮
没有从数据库中查询到问题：《西雅图不眠夜》的女主角是谁
Question：《西雅图不眠夜》的女主角是谁 搜索到Evidence 10 条
将Question：《西雅图不眠夜》的女主角是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 《西雅图不眠夜》的女主角是谁
问题：《西雅图不眠夜》的女主角是谁
词和词性序列：西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
词性序列：ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
对问题进行分词：《西雅图不眠夜》的女主角是谁
分词结果为：西雅图 不 眠 夜 的 女主角 是 谁
句法树: 
句子依存关系：
	nsubj(眠-3, 西雅图-1)
	neg(眠-3, 不-2)
	rcmod(女主角-6, 眠-3)
	dobj(眠-3, 夜-4)
	cpm(眠-3, 的-5)
	top(是-7, 女主角-6)
	root(ROOT-0, 是-7)
	attr(是-7, 谁-8)
主谓宾：女主角 是 谁
主谓宾词和词性序列：女主角/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《西雅图不眠夜》的女主角是谁 : 《西雅图不眠夜》的女主角是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 女主角/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 女主角/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 女主角/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《西雅图不眠夜》的女主角是谁】匹配到多个模式：
序号：1
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 《西雅图不眠夜》的女主角是谁
	模式 : 《西雅图不眠夜》的女主角是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《西雅图不眠夜》的女主角是谁
	模式 : 《西雅图不眠夜》的女主角是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 西雅图/ns 不/d 眠/vg 夜/tg 的/uj 女主角/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : ns/d/vg/tg/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 女主角/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 95：《西雅图不眠夜》的女主角是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 《西雅图不眠夜》的女主角是谁
Question 候选答案：
帝国大厦  1.0
主角  0.8047175681992007
男人  0.6335225131303129
男主角  0.3334424423910434
女朋友  0.3103332044360353
明星  0.26448713190573186
女人  0.2530353577516536
金玉盟  0.24178946705830281
由诺拉  0.23017124587893031
哈里  0.22990115136960057
埃芙恩  0.20698118932711687
导演  0.2069675816728839
汤姆  0.20695605513328882
汉克斯  0.2069461638917926
主演  0.20693246355716788
金玉萌  0.05782857262557306
ExpectAnswerRank: -1

mrr: 79.27136752136752
perfectCount: 74
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 95

MRR：83.44354475933423%
回答完美率：77.89473684210526%
回答不完美率：15.789473684210526%
回答错误率：6.315789473684211%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:清朝道光年间，在虎门销禁鸦片的民族英雄是谁:林则徐
Question:清朝道光年间，在虎门销禁鸦片的民族英雄是谁
ExpectAnswer:林则徐
没有从数据库中查询到问题：清朝道光年间，在虎门销禁鸦片的民族英雄是谁
Question：清朝道光年间，在虎门销禁鸦片的民族英雄是谁 搜索到Evidence 10 条
将Question：清朝道光年间，在虎门销禁鸦片的民族英雄是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
问题：清朝道光年间，在虎门销禁鸦片的民族英雄是谁
词和词性序列：清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
词性序列：t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
对问题进行分词：清朝道光年间，在虎门销禁鸦片的民族英雄是谁
分词结果为：清朝 道光 年间 在 虎门 销 禁 鸦片 的 民族英雄 是 谁
句法树: 
句子依存关系：
	nn(道光-2, 清朝-1)
	lobj(年间-3, 道光-2)
	loc(禁-7, 年间-3)
	prep(禁-7, 在-4)
	nn(销-6, 虎门-5)
	pobj(在-4, 销-6)
	rcmod(民族英雄-10, 禁-7)
	dobj(禁-7, 鸦片-8)
	cpm(禁-7, 的-9)
	top(是-11, 民族英雄-10)
	root(ROOT-0, 是-11)
	attr(是-11, 谁-12)
主谓宾：民族英雄 是 谁
主谓宾词和词性序列：民族英雄/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 清朝道光年间，在虎门销禁鸦片的民族英雄是谁 : 清朝道光年间，在虎门销禁鸦片的民族英雄是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 民族英雄/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 民族英雄/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 民族英雄/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【清朝道光年间，在虎门销禁鸦片的民族英雄是谁】匹配到多个模式：
序号：1
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
	模式 : 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
	模式 : 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 清朝/t 道光/t 年间/n 在/p 虎门/ns 销/v 禁/v 鸦片/n 的/uj 民族英雄/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : t/t/n/p/ns/v/v/n/uj/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 民族英雄/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 96：清朝道光年间，在虎门销禁鸦片的民族英雄是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 清朝道光年间，在虎门销禁鸦片的民族英雄是谁
Question 候选答案：
林则徐  1.0
画家  0.2634199568252858
阿尔杰  0.2344091085649665
美女  0.1382053830695509
区清英  0.1348924886976388
武进  0.134890999413021
吕布  0.1316894534170023
董卓  0.13168456985452612
豆丁  0.12206541826305763
ExpectAnswerRank: 1

mrr: 80.27136752136752
perfectCount: 75
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 96

MRR：83.61600783475784%
回答完美率：78.125%
回答不完美率：15.625%
回答错误率：6.25%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁:李小龙
Question:一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
ExpectAnswer:李小龙
没有从数据库中查询到问题：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
Question：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁 搜索到Evidence 10 条
将Question：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
问题：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
词和词性序列：一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
词性序列：n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
对问题进行分词：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
分词结果为：一代 武术 宗师 功夫 影帝 截拳道 武 道 哲学 创立 人 好莱坞 首位 华人 演员 是 谁
句法树: 
句子依存关系：
	nummod(宗师-3, 一代-1)
	nn(宗师-3, 武术-2)
	nn(功夫-4, 宗师-3)
	nn(截拳道-6, 功夫-4)
	nn(截拳道-6, 影帝-5)
	nn(道-8, 截拳道-6)
	amod(道-8, 武-7)
	nn(哲学-9, 道-8)
	nsubj(创立-10, 哲学-9)
	root(ROOT-0, 创立-10)
	dobj(创立-10, 人-11)
	nn(首位-13, 好莱坞-12)
	nn(演员-15, 首位-13)
	nn(演员-15, 华人-14)
	top(是-16, 演员-15)
	conj(创立-10, 是-16)
	attr(是-16, 谁-17)
主谓宾：演员 是 谁
主谓宾词和词性序列：演员/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁 : 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 演员/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 演员/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 演员/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁】匹配到多个模式：
序号：1
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
	模式 : 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
	模式 : 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 一代/n 武术/N.ObjectSports 宗师/n 功夫/n 影帝/n 截拳道/i 武/ag 道/q 哲学/n 创立/v 人/nr 好莱坞/ns 首位/m 华人/nr 演员/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : n/N.ObjectSports/n/n/n/i/ag/q/n/v/nr/ns/m/nr/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 演员/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 97：一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 一代武术宗师、功夫影帝、截拳道武道哲学创立人、好莱坞首位华人演员是谁
Question 候选答案：
李小龙  1.0
益智类  0.161603717706854
龙小李  0.1582452251405792
张三丰  0.15756855460023894
豆丁  0.1481539365075622
地主  0.14476765785478668
成龙  0.14476487511976593
邓亚萍  0.14476237439612227
白毛  0.14475789257721514
ExpectAnswerRank: 1

mrr: 81.27136752136752
perfectCount: 76
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 97

MRR：83.78491497048198%
回答完美率：78.35051546391753%
回答不完美率：15.463917525773196%
回答错误率：6.185567010309279%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:电影《白毛女》中，抢走喜儿的地主叫什么名字:黄世仁
Question:电影《白毛女》中，抢走喜儿的地主叫什么名字
ExpectAnswer:黄世仁
没有从数据库中查询到问题：电影《白毛女》中，抢走喜儿的地主叫什么名字
Question：电影《白毛女》中，抢走喜儿的地主叫什么名字 搜索到Evidence 10 条
将Question：电影《白毛女》中，抢走喜儿的地主叫什么名字 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 电影《白毛女》中，抢走喜儿的地主叫什么名字
问题：电影《白毛女》中，抢走喜儿的地主叫什么名字
词和词性序列：电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
词性序列：N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
对问题进行分词：电影《白毛女》中，抢走喜儿的地主叫什么名字
分词结果为：电影 白毛女 中 抢走 喜儿 的 地主 叫 什么名字
句法树: 
句子依存关系：
	nn(白毛女-2, 电影-1)
	lobj(中-3, 白毛女-2)
	loc(叫-8, 中-3)
	rcmod(地主-7, 抢走-4)
	dobj(抢走-4, 喜儿-5)
	cpm(抢走-4, 的-6)
	nsubj(叫-8, 地主-7)
	root(ROOT-0, 叫-8)
	dobj(叫-8, 什么名字-9)
主谓宾：中 叫 什么名字
主谓宾词和词性序列：中/f 叫/v 什么名字/RW.RWOrdinarySingle
主谓宾词性序列：f/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 电影《白毛女》中，抢走喜儿的地主叫什么名字 : 电影《白毛女》中，抢走喜儿的地主叫什么名字 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).* : Object->ArtSingle1
匹配成功: N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).* : Object->ArtSingle1
匹配成功: 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【电影《白毛女》中，抢走喜儿的地主叫什么名字】匹配到多个模式：
序号：1
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：4
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：5
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：6
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：7
	问题 : 电影《白毛女》中，抢走喜儿的地主叫什么名字
	模式 : 电影《白毛女》中，抢走喜儿的地主叫什么名字
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影《白毛女》中，抢走喜儿的地主叫什么名字
	模式 : 电影《白毛女》中，抢走喜儿的地主叫什么名字
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：4
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectArt).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->ArtSingle1
序号：5
	问题 : 电影/N.ObjectArt 白毛女/n 中/f 抢走/v 喜儿/n 的/uj 地主/nr 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：6
	问题 : N.ObjectArt/n/f/v/n/uj/nr/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 98：电影《白毛女》中，抢走喜儿的地主叫什么名字 【问题类型：PERSON_NAME】
************************************
************************************
Question 电影《白毛女》中，抢走喜儿的地主叫什么名字
Question 候选答案：
黄世仁  1.0
角色  0.1615803574269309
知名人士  0.15526230847743566
巴沙尔  0.15524421692951113
阿尔杰  0.15523383991861156
穆仁志  0.09191300807682024
美女  0.08572848976774348
豆丁网  0.08570087299337036
岳不群  0.0793607449383844
玛雅  0.0729110964176663
华山派  0.07290717783231114
幸子  0.07290101221792016
扮演者  0.0728977650102826
笑傲江湖  0.0728977094286606
金庸  0.07289269912318617
山口百惠  0.0728918889181575
英雄  0.07288693270447152
ExpectAnswerRank: 1

mrr: 82.27136752136752
perfectCount: 77
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 98

MRR：83.9503750218036%
回答完美率：78.57142857142857%
回答不完美率：15.306122448979592%
回答错误率：6.122448979591836%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:《封神演义》中，哪吒的父亲托塔李天王名叫什么:李靖
Question:《封神演义》中，哪吒的父亲托塔李天王名叫什么
ExpectAnswer:李靖
没有从数据库中查询到问题：《封神演义》中，哪吒的父亲托塔李天王名叫什么
Question：《封神演义》中，哪吒的父亲托塔李天王名叫什么 搜索到Evidence 10 条
将Question：《封神演义》中，哪吒的父亲托塔李天王名叫什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 《封神演义》中，哪吒的父亲托塔李天王名叫什么
问题：《封神演义》中，哪吒的父亲托塔李天王名叫什么
词和词性序列：封神演义/l 中/f 哪吒/nrt 的/uj 父亲/nr 托塔/nrt 李天王/nr 名叫/v 什么/RW.RWOrdinarySingle 
词性序列：l/f/nrt/uj/nr/nrt/nr/v/RW.RWOrdinarySingle
对问题进行分词：《封神演义》中，哪吒的父亲托塔李天王名叫什么
分词结果为：封神演义 中 哪吒 的 父亲 托塔 李天王 名叫 什么
句法树: 
句子依存关系：
	lobj(中-2, 封神演义-1)
	loc(名叫-8, 中-2)
	assmod(李天王-7, 哪吒-3)
	assm(哪吒-3, 的-4)
	nn(李天王-7, 父亲-5)
	nn(李天王-7, 托塔-6)
	nsubj(名叫-8, 李天王-7)
	root(ROOT-0, 名叫-8)
	dobj(名叫-8, 什么-9)
主谓宾：中 名叫 什么
主谓宾词和词性序列：中/f 名叫/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：f/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《封神演义》中，哪吒的父亲托塔李天王名叫什么 : 《封神演义》中，哪吒的父亲托塔李天王名叫什么 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 封神演义/l 中/f 哪吒/nrt 的/uj 父亲/nr 托塔/nrt 李天王/nr 名叫/v 什么/RW.RWOrdinarySingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: l/f/nrt/uj/nr/nrt/nr/v/RW.RWOrdinarySingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《封神演义》中，哪吒的父亲托塔李天王名叫什么】匹配到多个模式：
序号：1
	问题 : 封神演义/l 中/f 哪吒/nrt 的/uj 父亲/nr 托塔/nrt 李天王/nr 名叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : l/f/nrt/uj/nr/nrt/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 《封神演义》中，哪吒的父亲托塔李天王名叫什么
	模式 : 《封神演义》中，哪吒的父亲托塔李天王名叫什么
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《封神演义》中，哪吒的父亲托塔李天王名叫什么
	模式 : 《封神演义》中，哪吒的父亲托塔李天王名叫什么
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 封神演义/l 中/f 哪吒/nrt 的/uj 父亲/nr 托塔/nrt 李天王/nr 名叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : l/f/nrt/uj/nr/nrt/nr/v/RW.RWOrdinarySingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 99：《封神演义》中，哪吒的父亲托塔李天王名叫什么 【问题类型：PERSON_NAME】
************************************
************************************
Question 《封神演义》中，哪吒的父亲托塔李天王名叫什么
Question 候选答案：
李靖  1.0
豆丁  0.2440162669398061
项羽  0.20530983325531346
刘邦  0.2052896353931878
阿尔杰  0.20130406584080615
人物  0.18593503031570605
李毅  0.11234415336971751
豆丁网  0.10068733094849966
李自成  0.09680449864999716
陈塘关  0.06977653519667248
三太子  0.06971715846015927
ExpectAnswerRank: 1

mrr: 83.27136752136752
perfectCount: 78
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 99

MRR：84.11249244582578%
回答完美率：78.78787878787878%
回答不完美率：15.151515151515152%
回答错误率：6.0606060606060606%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/person_name_questions.txt 中加载Question:中央电视台著名节目《实话实说》的第一任主持人是谁:崔永元
Question:中央电视台著名节目《实话实说》的第一任主持人是谁
ExpectAnswer:崔永元
没有从数据库中查询到问题：中央电视台著名节目《实话实说》的第一任主持人是谁
Question：中央电视台著名节目《实话实说》的第一任主持人是谁 搜索到Evidence 10 条
将Question：中央电视台著名节目《实话实说》的第一任主持人是谁 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 中央电视台著名节目《实话实说》的第一任主持人是谁
问题：中央电视台著名节目《实话实说》的第一任主持人是谁
词和词性序列：中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
词性序列：nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
对问题进行分词：中央电视台著名节目《实话实说》的第一任主持人是谁
分词结果为：中央电视台 著名 节目 实话实说 的 第一任 主持人 是 谁
句法树: 
句子依存关系：
	nn(实话实说-4, 中央电视台-1)
	amod(实话实说-4, 著名-2)
	nn(实话实说-4, 节目-3)
	assmod(主持人-7, 实话实说-4)
	assm(实话实说-4, 的-5)
	nummod(主持人-7, 第一任-6)
	top(是-8, 主持人-7)
	root(ROOT-0, 是-8)
	attr(是-8, 谁-9)
主谓宾：主持人 是 谁
主谓宾词和词性序列：主持人/nr 是/v 谁/RW.RWPersonSingle
主谓宾词性序列：nr/v/RW.RWPersonSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中央电视台著名节目《实话实说》的第一任主持人是谁 : 中央电视台著名节目《实话实说》的第一任主持人是谁 : Person
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: nr/v/RW.RWPersonSingle : .*(RW.RWPersonSingle).* : Person->Single1
匹配成功: 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: nr/v/RW.RWPersonSingle : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).* : Person->Single3
匹配成功: 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle  : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: 主持人/nr 是/v 谁/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
匹配成功: nr/v/RW.RWPersonSingle : .*(V.).*(RW.RWPersonSingle).* : Person->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中央电视台著名节目《实话实说》的第一任主持人是谁】匹配到多个模式：
序号：1
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：13
	问题 : 中央电视台著名节目《实话实说》的第一任主持人是谁
	模式 : 中央电视台著名节目《实话实说》的第一任主持人是谁
	分类 : Person
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中央电视台著名节目《实话实说》的第一任主持人是谁
	模式 : 中央电视台著名节目《实话实说》的第一任主持人是谁
	分类 : Person
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：2
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：3
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：4
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(RW.RWPersonSingle).*
	分类 : Person->Single1
序号：5
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：6
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：7
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：8
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single3
序号：9
	问题 : 中央电视台/nt 著名/a 节目/N.CONCEPT 实话实说/l 的/uj 第一任/m 主持人/nr 是/v 谁/RW.RWPersonSingle 
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：10
	问题 : nt/a/N.CONCEPT/l/uj/m/nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：11
	问题 : 主持人/nr 是/v 谁/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
序号：12
	问题 : nr/v/RW.RWPersonSingle
	模式 : .*(V.).*(RW.RWPersonSingle).*
	分类 : Person->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	PERSON_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：PERSON_NAME
开始处理Question 100：中央电视台著名节目《实话实说》的第一任主持人是谁 【问题类型：PERSON_NAME】
************************************
************************************
Question 中央电视台著名节目《实话实说》的第一任主持人是谁
Question 候选答案：
崔永元  1.0
蒋介石  0.2916226046334581
张国立  0.29155852289392786
豆丁  0.2028323315565497
孙悟空  0.19441244353813988
扮演者  0.19440160555663483
罗久城  0.1901093330731218
鲁斯  0.09719712249348911
汤姆布  0.09719285884911845
六小龄童  0.09719029503301865
ExpectAnswerRank: 1

mrr: 84.27136752136752
perfectCount: 79
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 100

MRR：84.27136752136752%
回答完美率：79.0%
回答不完美率：15.0%
回答错误率：6.0%
未知类型率：0.0%

从Question文件/org/apdplat/qa/files/person_name_questions.txt中加载Question，从baidu中检索到了 100 个Question
从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:“海的女儿”是哪个城市的城徽:哥本哈根
Question:“海的女儿”是哪个城市的城徽
ExpectAnswer:哥本哈根
没有从数据库中查询到问题：“海的女儿”是哪个城市的城徽
Question：“海的女儿”是哪个城市的城徽 搜索到Evidence 9 条
将Question：“海的女儿”是哪个城市的城徽 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “海的女儿”是哪个城市的城徽
问题：“海的女儿”是哪个城市的城徽
词和词性序列：海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
词性序列：ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
对问题进行分词：“海的女儿”是哪个城市的城徽
分词结果为：海 的 女儿 是 哪个 城市 的 城 徽
句法树: 
句子依存关系：
	assmod(女儿-3, 海-1)
	assm(海-1, 的-2)
	top(是-4, 女儿-3)
	root(ROOT-0, 是-4)
	det(城市-6, 哪个-5)
	assmod(徽-9, 城市-6)
	assm(城市-6, 的-7)
	nn(徽-9, 城-8)
	attr(是-4, 徽-9)
主谓宾：女儿 是 徽
主谓宾词和词性序列：女儿/n 是/v 徽/ng
主谓宾词性序列：n/v/ng

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “海的女儿”是哪个城市的城徽 : “海的女儿”是哪个城市的城徽 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“海的女儿”是哪个城市的城徽】匹配到多个模式：
序号：1
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : “海的女儿”是哪个城市的城徽
	模式 : “海的女儿”是哪个城市的城徽
	分类 : Location
序号：8
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “海的女儿”是哪个城市的城徽
	模式 : “海的女儿”是哪个城市的城徽
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 海/ns 的/uj 女儿/n 是/v 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 城/ns 徽/ng 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/n/v/RW.RWOrdinarySingle/ns/uj/ns/ng
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 101：“海的女儿”是哪个城市的城徽 【问题类型：LOCATION_NAME】
************************************
************************************
Question “海的女儿”是哪个城市的城徽
Question 候选答案：
哥本哈根  1.0
丹麦  0.5949315280809837
首都  0.4014939751186821
海滨公园  0.23717023741731014
罗马  0.17881329062119083
丹麦王国  0.17877738040403185
月亮  0.17514458195010865
博物馆  0.1058192157252824
公园  0.10581430153796123
ExpectAnswerRank: 1

mrr: 85.27136752136752
perfectCount: 80
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 101

MRR：84.42709655580943%
回答完美率：79.20792079207921%
回答不完美率：14.85148514851485%
回答错误率：5.9405940594059405%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:阿尔及利亚首都是哪个城市 :阿尔及尔
Question:阿尔及利亚首都是哪个城市 
ExpectAnswer:阿尔及尔
没有从数据库中查询到问题：阿尔及利亚首都是哪个城市 
Question：阿尔及利亚首都是哪个城市  搜索到Evidence 8 条
将Question：阿尔及利亚首都是哪个城市  加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 阿尔及利亚首都是哪个城市 
问题：阿尔及利亚首都是哪个城市
词和词性序列：阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
词性序列：ns/ns/v/RW.RWOrdinarySingle/ns
对问题进行分词：阿尔及利亚首都是哪个城市
分词结果为：阿尔及利亚 首都 是 哪个 城市
句法树: 
句子依存关系：
	nn(首都-2, 阿尔及利亚-1)
	top(是-3, 首都-2)
	root(ROOT-0, 是-3)
	det(城市-5, 哪个-4)
	attr(是-3, 城市-5)
主谓宾：首都 是 城市
主谓宾词和词性序列：首都/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 阿尔及利亚首都是哪个城市 : 阿尔及利亚首都是哪个城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【阿尔及利亚首都是哪个城市 】匹配到多个模式：
序号：1
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 阿尔及利亚首都是哪个城市
	模式 : 阿尔及利亚首都是哪个城市
	分类 : Location
序号：8
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿尔及利亚首都是哪个城市
	模式 : 阿尔及利亚首都是哪个城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 阿尔及利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 102：阿尔及利亚首都是哪个城市  【问题类型：LOCATION_NAME】
************************************
************************************
Question 阿尔及利亚首都是哪个城市 
Question 候选答案：
阿尔及尔  1.0
地中海  0.47936798090322486
马来西亚  0.3703765189857886
非洲  0.3425294715584692
吉隆坡  0.3389104829443693
地方  0.29965773224628073
首府  0.2989827366165731
国家  0.2989520666683599
安哥拉  0.2988133419408699
罗安达  0.29879899480536226
贝宁  0.2987880068903355
海港  0.24956091201004643
山脉  0.2197243676581092
港口城市  0.1399256726335443
群山  0.13952465224358168
古城  0.13948004759869972
海湾  0.0799038001665896
ExpectAnswerRank: 1

mrr: 86.27136752136752
perfectCount: 81
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 102

MRR：84.57977207977208%
回答完美率：79.41176470588235%
回答不完美率：14.705882352941178%
回答错误率：5.88235294117647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:第一台电子计算机在哪里诞生:美国
Question:第一台电子计算机在哪里诞生
ExpectAnswer:美国
没有从数据库中查询到问题：第一台电子计算机在哪里诞生
Question：第一台电子计算机在哪里诞生 搜索到Evidence 9 条
将Question：第一台电子计算机在哪里诞生 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第一台电子计算机在哪里诞生
问题：第一台电子计算机在哪里诞生
词和词性序列：第一台/m 电子计算机/n 在/p 哪里/RW.RWLocationSingle 诞生/v 
词性序列：m/n/p/RW.RWLocationSingle/v
对问题进行分词：第一台电子计算机在哪里诞生
分词结果为：第一台 电子计算机 在 哪里 诞生
句法树: 
句子依存关系：
	nummod(电子计算机-2, 第一台-1)
	nsubj(诞生-5, 电子计算机-2)
	prep(诞生-5, 在-3)
	pobj(在-3, 哪里-4)
	root(ROOT-0, 诞生-5)
主谓宾：电子计算机 诞生 在
主谓宾词和词性序列：电子计算机/n 诞生/v 在/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一台电子计算机在哪里诞生 : 第一台电子计算机在哪里诞生 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一台/m 电子计算机/n 在/p 哪里/RW.RWLocationSingle 诞生/v  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: m/n/p/RW.RWLocationSingle/v : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一台电子计算机在哪里诞生】匹配到多个模式：
序号：1
	问题 : 第一台/m 电子计算机/n 在/p 哪里/RW.RWLocationSingle 诞生/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/n/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第一台电子计算机在哪里诞生
	模式 : 第一台电子计算机在哪里诞生
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一台电子计算机在哪里诞生
	模式 : 第一台电子计算机在哪里诞生
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一台/m 电子计算机/n 在/p 哪里/RW.RWLocationSingle 诞生/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/n/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 103：第一台电子计算机在哪里诞生 【问题类型：LOCATION_NAME】
************************************
************************************
Question 第一台电子计算机在哪里诞生
Question 候选答案：
美国  1.0
费城  0.4050791964594411
国家  0.2081812232439374
巴巴  0.1985954551944236
加州  0.15814344162881835
宾夕法尼亚州  0.1188979390829954
ExpectAnswerRank: 1

mrr: 87.27136752136752
perfectCount: 82
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 103

MRR：84.7294830304539%
回答完美率：79.6116504854369%
回答不完美率：14.563106796116504%
回答错误率：5.825242718446602%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:第一次登上月球的是哪国人:美国
Question:第一次登上月球的是哪国人
ExpectAnswer:美国
没有从数据库中查询到问题：第一次登上月球的是哪国人
Question：第一次登上月球的是哪国人 搜索到Evidence 9 条
将Question：第一次登上月球的是哪国人 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第一次登上月球的是哪国人
问题：第一次登上月球的是哪国人
词和词性序列：第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr 
词性序列：m/v/ns/uj/RW.RWLocationSingle/nr
对问题进行分词：第一次登上月球的是哪国人
分词结果为：第一次 登上 月球 的 是哪 国人
句法树: 
句子依存关系：
	advmod(登上-2, 第一次-1)
	root(ROOT-0, 登上-2)
	assmod(国人-6, 月球-3)
	assm(月球-3, 的-4)
	nn(国人-6, 是哪-5)
	dobj(登上-2, 国人-6)
主谓宾：第一次 登上 国人
主谓宾词和词性序列：第一次/m 登上/v 国人/nr
主谓宾词性序列：m/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一次登上月球的是哪国人 : 第一次登上月球的是哪国人 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: m/v/ns/uj/RW.RWLocationSingle/nr : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr  : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
匹配成功: m/v/ns/uj/RW.RWLocationSingle/nr : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一次登上月球的是哪国人】匹配到多个模式：
序号：1
	问题 : 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/v/ns/uj/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : m/v/ns/uj/RW.RWLocationSingle/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：5
	问题 : 第一次登上月球的是哪国人
	模式 : 第一次登上月球的是哪国人
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一次登上月球的是哪国人
	模式 : 第一次登上月球的是哪国人
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/v/ns/uj/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第一次/m 登上/v 月球/ns 的/uj 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : m/v/ns/uj/RW.RWLocationSingle/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 104：第一次登上月球的是哪国人 【问题类型：LOCATION_NAME】
************************************
************************************
Question 第一次登上月球的是哪国人
Question 候选答案：
美国  1.0
国家  0.24492073616402407
中国  0.22213429367537707
苏联  0.11778296154745999
ExpectAnswerRank: 1

mrr: 88.27136752136752
perfectCount: 83
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 104

MRR：84.87631492439185%
回答完美率：79.8076923076923%
回答不完美率：14.423076923076922%
回答错误率：5.769230769230769%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:2008年奥运会将在哪个城市举行:北京
Question:2008年奥运会将在哪个城市举行
ExpectAnswer:北京
没有从数据库中查询到问题：2008年奥运会将在哪个城市举行
Question：2008年奥运会将在哪个城市举行 搜索到Evidence 9 条
将Question：2008年奥运会将在哪个城市举行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 2008年奥运会将在哪个城市举行
问题：2008年奥运会将在哪个城市举行
词和词性序列：2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v 
词性序列：m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
对问题进行分词：2008年奥运会将在哪个城市举行
分词结果为：2008年 奥运会 将 在 哪个 城市 举行
句法树: 
句子依存关系：
	tmod(举行-7, 2008年-1)
	nsubj(举行-7, 奥运会-2)
	advmod(举行-7, 将-3)
	prep(举行-7, 在-4)
	det(城市-6, 哪个-5)
	pobj(在-4, 城市-6)
	root(ROOT-0, 举行-7)
主谓宾：2008年 举行 在
主谓宾词和词性序列：2008年/m 举行/v 在/p
主谓宾词性序列：m/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 2008年奥运会将在哪个城市举行 : 2008年奥运会将在哪个城市举行 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【2008年奥运会将在哪个城市举行】匹配到多个模式：
序号：1
	问题 : 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : 2008年奥运会将在哪个城市举行
	模式 : 2008年奥运会将在哪个城市举行
	分类 : Location
序号：6
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2008年奥运会将在哪个城市举行
	模式 : 2008年奥运会将在哪个城市举行
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 2008年/m 奥运会/N.CONCEPT 将/d 在/p 哪个/RW.RWOrdinarySingle 城市/ns 举行/v 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : m/N.CONCEPT/d/p/RW.RWOrdinarySingle/ns/v
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 105：2008年奥运会将在哪个城市举行 【问题类型：LOCATION_NAME】
************************************
************************************
Question 2008年奥运会将在哪个城市举行
Question 候选答案：
北京  1.0
青岛  0.47474316206499384
青岛市  0.46517953092571895
上海  0.4557863515662002
香港  0.4414405215224533
西湖  0.30853539189807644
杭州  0.30850499991243235
天津  0.25640207151600714
沈阳  0.25638812839426517
秦皇岛  0.25637600670082916
伦敦  0.1993840298594857
江苏  0.19932366416971897
我国  0.14247573884218784
首都北京  0.13291648311377774
ExpectAnswerRank: 1

mrr: 89.27136752136752
perfectCount: 84
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 105

MRR：85.02035002035002%
回答完美率：80.0%
回答不完美率：14.285714285714285%
回答错误率：5.714285714285714%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:佛教起源于哪个国家:印度
Question:佛教起源于哪个国家
ExpectAnswer:印度
没有从数据库中查询到问题：佛教起源于哪个国家
Question：佛教起源于哪个国家 搜索到Evidence 9 条
将Question：佛教起源于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 佛教起源于哪个国家
问题：佛教起源于哪个国家
词和词性序列：佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle 
词性序列：N.CONCEPT/v/RW.RWLocationSingle
对问题进行分词：佛教起源于哪个国家
分词结果为：佛教 起源于 哪个国家
句法树: 
句子依存关系：
	nsubj(起源于-2, 佛教-1)
	root(ROOT-0, 起源于-2)
	dobj(起源于-2, 哪个国家-3)
主谓宾：佛教 起源于 哪个国家
主谓宾词和词性序列：佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：N.CONCEPT/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 佛教起源于哪个国家 : 佛教起源于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: N.CONCEPT/v/RW.RWLocationSingle : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
匹配成功: N.CONCEPT/v/RW.RWLocationSingle : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: N.CONCEPT/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: N.CONCEPT/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【佛教起源于哪个国家】匹配到多个模式：
序号：1
	问题 : 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 佛教起源于哪个国家
	模式 : 佛教起源于哪个国家
	分类 : Location
序号：6
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：7
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 佛教起源于哪个国家
	模式 : 佛教起源于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：2
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 佛教/N.CONCEPT 起源于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : N.CONCEPT/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 106：佛教起源于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 佛教起源于哪个国家
Question 候选答案：
印度  1.0
中国  0.6320868799341717
西汉时  0.29430312345239834
国家  0.1741186083765273
我国  0.16702673377622348
尼泊尔  0.16322851028621327
天竺  0.07666271317470982
ExpectAnswerRank: 1

mrr: 90.27136752136752
perfectCount: 85
notPerfectCount: 15
wrongCount: 6
unknownTypeCount: 0
questionCount: 106

MRR：85.16166747298823%
回答完美率：80.18867924528303%
回答不完美率：14.150943396226415%
回答错误率：5.660377358490567%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:滑铁卢战役发生在哪个国家:比利时
Question:滑铁卢战役发生在哪个国家
ExpectAnswer:比利时
没有从数据库中查询到问题：滑铁卢战役发生在哪个国家
Question：滑铁卢战役发生在哪个国家 搜索到Evidence 10 条
将Question：滑铁卢战役发生在哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 滑铁卢战役发生在哪个国家
问题：滑铁卢战役发生在哪个国家
词和词性序列：滑铁卢战役/nz 发生/v 在/p 哪个国家/RW.RWLocationSingle 
词性序列：nz/v/p/RW.RWLocationSingle
对问题进行分词：滑铁卢战役发生在哪个国家
分词结果为：滑铁卢战役 发生 在 哪个国家
句法树: 
句子依存关系：
	nsubj(发生-2, 滑铁卢战役-1)
	root(ROOT-0, 发生-2)
	prep(发生-2, 在-3)
	pobj(在-3, 哪个国家-4)
主谓宾：滑铁卢战役 发生 在
主谓宾词和词性序列：滑铁卢战役/nz 发生/v 在/p
主谓宾词性序列：nz/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 滑铁卢战役发生在哪个国家 : 滑铁卢战役发生在哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 滑铁卢战役/nz 发生/v 在/p 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nz/v/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【滑铁卢战役发生在哪个国家】匹配到多个模式：
序号：1
	问题 : 滑铁卢战役/nz 发生/v 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nz/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 滑铁卢战役发生在哪个国家
	模式 : 滑铁卢战役发生在哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 滑铁卢战役发生在哪个国家
	模式 : 滑铁卢战役发生在哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 滑铁卢战役/nz 发生/v 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nz/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 107：滑铁卢战役发生在哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 滑铁卢战役发生在哪个国家
Question 候选答案：
欧洲  1.0
布鲁塞尔  0.8762838259474972
滑铁卢  0.594333505734363
印度  0.4481207743567
比利时  0.4259220444121594
国家  0.3782183995068337
俄罗斯  0.3553126707620206
法兰西  0.26042564772465093
首都  0.2356721277653295
荷兰  0.2355865525384525
波拿巴  0.16604298886239913
英国伦敦  0.11948101403132756
泰晤士河  0.11923534165093523
桥梁  0.1191127375190329
ExpectAnswerRank: 5

mrr: 90.47136752136753
perfectCount: 85
notPerfectCount: 16
wrongCount: 6
unknownTypeCount: 0
questionCount: 107

MRR：84.55267992651171%
回答完美率：79.43925233644859%
回答不完美率：14.953271028037381%
回答错误率：5.607476635514018%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:巴西的首都是哪座城市:巴西利亚
Question:巴西的首都是哪座城市
ExpectAnswer:巴西利亚
没有从数据库中查询到问题：巴西的首都是哪座城市
Question：巴西的首都是哪座城市 搜索到Evidence 10 条
将Question：巴西的首都是哪座城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 巴西的首都是哪座城市
问题：巴西的首都是哪座城市
词和词性序列：巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns 
词性序列：ns/uj/ns/v/RW.RWLocationSingle/ns
对问题进行分词：巴西的首都是哪座城市
分词结果为：巴西 的 首都 是 哪座 城市
句法树: 
句子依存关系：
	assmod(首都-3, 巴西-1)
	assm(巴西-1, 的-2)
	top(是-4, 首都-3)
	root(ROOT-0, 是-4)
	nn(城市-6, 哪座-5)
	attr(是-4, 城市-6)
主谓宾：首都 是 城市
主谓宾词和词性序列：首都/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 巴西的首都是哪座城市 : 巴西的首都是哪座城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/ns/v/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/uj/ns/v/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/uj/ns/v/RW.RWLocationSingle/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【巴西的首都是哪座城市】匹配到多个模式：
序号：1
	问题 : 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 巴西的首都是哪座城市
	模式 : 巴西的首都是哪座城市
	分类 : Location
序号：6
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴西的首都是哪座城市
	模式 : 巴西的首都是哪座城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴西/ns 的/uj 首都/ns 是/v 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/uj/ns/v/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 108：巴西的首都是哪座城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 巴西的首都是哪座城市
Question 候选答案：
巴西利亚  1.0
里约热内卢  0.8983644135232489
地区  0.15582124769785474
印度  0.15579251108835562
新德里  0.15578946743359037
德里  0.1557834322853074
圣保罗  0.11918677263253868
新市镇  0.10541384110580833
内陆地区  0.08708087605521299
ExpectAnswerRank: 1

mrr: 91.47136752136753
perfectCount: 86
notPerfectCount: 16
wrongCount: 6
unknownTypeCount: 0
questionCount: 108

MRR：84.6957106679329%
回答完美率：79.62962962962963%
回答不完美率：14.814814814814813%
回答错误率：5.555555555555555%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:黄梅戏是哪个省的地方戏:安徽
Question:黄梅戏是哪个省的地方戏
ExpectAnswer:安徽
没有从数据库中查询到问题：黄梅戏是哪个省的地方戏
Question：黄梅戏是哪个省的地方戏 搜索到Evidence 9 条
将Question：黄梅戏是哪个省的地方戏 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 黄梅戏是哪个省的地方戏
问题：黄梅戏是哪个省的地方戏
词和词性序列：黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n 
词性序列：n/v/RW.RWOrdinarySingle/ns/uj/n
对问题进行分词：黄梅戏是哪个省的地方戏
分词结果为：黄梅戏 是 哪个 省 的 地方戏
句法树: 
句子依存关系：
	advmod(是-2, 黄梅戏-1)
	root(ROOT-0, 是-2)
	det(省-4, 哪个-3)
	assmod(地方戏-6, 省-4)
	assm(省-4, 的-5)
	attr(是-2, 地方戏-6)
主谓宾：黄梅戏 是 地方戏
主谓宾词和词性序列：黄梅戏/n 是/v 地方戏/n
主谓宾词性序列：n/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 黄梅戏是哪个省的地方戏 : 黄梅戏是哪个省的地方戏 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/v/RW.RWOrdinarySingle/ns/uj/n : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: n/v/RW.RWOrdinarySingle/ns/uj/n : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: n/v/RW.RWOrdinarySingle/ns/uj/n : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【黄梅戏是哪个省的地方戏】匹配到多个模式：
序号：1
	问题 : 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : 黄梅戏是哪个省的地方戏
	模式 : 黄梅戏是哪个省的地方戏
	分类 : Location
序号：6
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 黄梅戏是哪个省的地方戏
	模式 : 黄梅戏是哪个省的地方戏
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 黄梅戏/n 是/v 哪个/RW.RWOrdinarySingle 省/ns 的/uj 地方戏/n 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/v/RW.RWOrdinarySingle/ns/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 109：黄梅戏是哪个省的地方戏 【问题类型：LOCATION_NAME】
************************************
************************************
Question 黄梅戏是哪个省的地方戏
Question 候选答案：
安徽省  1.0
安徽  0.7384454417109496
湖北  0.6435083920238848
江西  0.6434988987018476
福建  0.6434744511762204
江苏  0.643470267397762
浙江  0.46474499754499776
地方  0.44286829828379837
中国  0.43932185102329807
湖北省  0.3218286079716244
台湾  0.2451961109818831
香港地区  0.24519273612389958
涡阳  0.24044192743205137
香港特区  0.21954317990929156
我国  0.2080566230802272
发源地  0.20429923537046918
青岛  0.19406658125896864
黄梅  0.13196679780989487
黄梅县  0.11748856135898994
安庆  0.11746952669170785
ExpectAnswerRank: 2

mrr: 91.97136752136753
perfectCount: 86
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 109

MRR：84.37740139575003%
回答完美率：78.89908256880734%
回答不完美率：15.59633027522936%
回答错误率：5.5045871559633035%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:美国的"自由女神"坐落在哪个城市:纽约
Question:美国的"自由女神"坐落在哪个城市
ExpectAnswer:纽约
没有从数据库中查询到问题：美国的"自由女神"坐落在哪个城市
Question：美国的"自由女神"坐落在哪个城市 搜索到Evidence 10 条
将Question：美国的"自由女神"坐落在哪个城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 美国的"自由女神"坐落在哪个城市
问题：美国的"自由女神"坐落在哪个城市
词和词性序列：美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
词性序列：ns/uj/i/v/p/RW.RWOrdinarySingle/ns
对问题进行分词：美国的"自由女神"坐落在哪个城市
分词结果为：美国 的 自由女神 坐落 在 哪个 城市
句法树: 
句子依存关系：
	assmod(自由女神-3, 美国-1)
	assm(美国-1, 的-2)
	nsubj(坐落-4, 自由女神-3)
	root(ROOT-0, 坐落-4)
	prep(坐落-4, 在-5)
	det(城市-7, 哪个-6)
	pobj(在-5, 城市-7)
主谓宾：自由女神 坐落 在
主谓宾词和词性序列：自由女神/i 坐落/v 在/p
主谓宾词性序列：i/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国的"自由女神"坐落在哪个城市 : 美国的"自由女神"坐落在哪个城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/uj/i/v/p/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国的"自由女神"坐落在哪个城市】匹配到多个模式：
序号：1
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：8
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：9
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：10
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：11
	问题 : 美国的"自由女神"坐落在哪个城市
	模式 : 美国的"自由女神"坐落在哪个城市
	分类 : Location
序号：12
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国的"自由女神"坐落在哪个城市
	模式 : 美国的"自由女神"坐落在哪个城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：8
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：9
	问题 : 美国/ns 的/uj 自由女神/i 坐落/v 在/p 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：10
	问题 : ns/uj/i/v/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 110：美国的"自由女神"坐落在哪个城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 美国的"自由女神"坐落在哪个城市
Question 候选答案：
纽约  1.0
洛克  0.5934154157793554
纽约市  0.2896664884468737
网站  0.18713856430442802
地址  0.17008512347829968
中国  0.17003787002849766
省份  0.17002222781087514
纽约港  0.17001605993716257
北美洲  0.16997953948076305
港口  0.16376739330517331
法国  0.1636917148366932
国家  0.12597618774702085
海港  0.12594499130488532
ExpectAnswerRank: 1

mrr: 92.97136752136753
perfectCount: 87
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 110

MRR：84.51942501942501%
回答完美率：79.0909090909091%
回答不完美率：15.454545454545453%
回答错误率：5.454545454545454%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:青海省主办的自行车赛在哪个湖附近举行:青海湖
Question:青海省主办的自行车赛在哪个湖附近举行
ExpectAnswer:青海湖
没有从数据库中查询到问题：青海省主办的自行车赛在哪个湖附近举行
Question：青海省主办的自行车赛在哪个湖附近举行 搜索到Evidence 9 条
将Question：青海省主办的自行车赛在哪个湖附近举行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 青海省主办的自行车赛在哪个湖附近举行
问题：青海省主办的自行车赛在哪个湖附近举行
词和词性序列：青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
词性序列：ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
对问题进行分词：青海省主办的自行车赛在哪个湖附近举行
分词结果为：青海省 主办 的 自行车赛 在 哪个 湖 附近 举行
句法树: 
句子依存关系：
	nn(自行车赛-4, 青海省-1)
	rcmod(自行车赛-4, 主办-2)
	cpm(主办-2, 的-3)
	nsubj(举行-9, 自行车赛-4)
	prep(举行-9, 在-5)
	det(湖-7, 哪个-6)
	lobj(附近-8, 湖-7)
	plmod(在-5, 附近-8)
	root(ROOT-0, 举行-9)
	rcmod(青海省-1, 主办-2)
主谓宾：自行车赛 举行 在
主谓宾词和词性序列：自行车赛/n 举行/v 在/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 青海省主办的自行车赛在哪个湖附近举行 : 青海省主办的自行车赛在哪个湖附近举行 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【青海省主办的自行车赛在哪个湖附近举行】匹配到多个模式：
序号：1
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：8
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：9
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：10
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：11
	问题 : 青海省主办的自行车赛在哪个湖附近举行
	模式 : 青海省主办的自行车赛在哪个湖附近举行
	分类 : Location
序号：12
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 青海省主办的自行车赛在哪个湖附近举行
	模式 : 青海省主办的自行车赛在哪个湖附近举行
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：8
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：9
	问题 : 青海省/ns 主办/v 的/uj 自行车赛/n 在/p 哪个/RW.RWOrdinarySingle 湖/ns 附近/f 举行/v 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：10
	问题 : ns/v/uj/n/p/RW.RWOrdinarySingle/ns/f/v
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 111：青海省主办的自行车赛在哪个湖附近举行 【问题类型：LOCATION_NAME】
************************************
************************************
Question 青海省主办的自行车赛在哪个湖附近举行
Question 候选答案：
青海湖  1.0
城市  0.16022529309666736
中国  0.13104873030039016
酒店  0.11724003665249264
地点  0.1091864975773364
青海  0.10222488095852222
西宁  0.09446197229118432
广场  0.07299174898584534
南大街  0.06553367756255636
西大街  0.06543562755682301
县城  0.06539491101794494
亚洲  0.0582044770042306
乌克兰  0.05813293768759751
周边地区  0.058125014430450504
国家  0.05812411351187135
省会  0.05099807182325165
源头  0.043879579959480004
天峻县  0.04386714157554854
地方  0.04373748589945376
夏都  0.03659494256107436
ExpectAnswerRank: 1

mrr: 93.97136752136753
perfectCount: 88
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 111

MRR：84.65888965888966%
回答完美率：79.27927927927928%
回答不完美率：15.315315315315313%
回答错误率：5.405405405405405%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:发射第一颗人造卫星的是哪个国家:苏联
Question:发射第一颗人造卫星的是哪个国家
ExpectAnswer:苏联
没有从数据库中查询到问题：发射第一颗人造卫星的是哪个国家
Question：发射第一颗人造卫星的是哪个国家 搜索到Evidence 9 条
将Question：发射第一颗人造卫星的是哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 发射第一颗人造卫星的是哪个国家
问题：发射第一颗人造卫星的是哪个国家
词和词性序列：发射/v 第一颗/m 人造卫星/N.ObjectInstrument 的/uj 是/v 哪个国家/RW.RWLocationSingle 
词性序列：v/m/N.ObjectInstrument/uj/v/RW.RWLocationSingle
对问题进行分词：发射第一颗人造卫星的是哪个国家
分词结果为：发射 第一颗 人造卫星 的 是 哪个国家
句法树: 
句子依存关系：
	top(是-5, 发射-1)
	nummod(人造卫星-3, 第一颗-2)
	dobj(发射-1, 人造卫星-3)
	cpm(发射-1, 的-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪个国家-6)
主谓宾：发射 是 哪个国家
主谓宾词和词性序列：发射/v 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：v/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 发射第一颗人造卫星的是哪个国家 : 发射第一颗人造卫星的是哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 发射/v 第一颗/m 人造卫星/N.ObjectInstrument 的/uj 是/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: v/m/N.ObjectInstrument/uj/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 发射/v 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: v/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【发射第一颗人造卫星的是哪个国家】匹配到多个模式：
序号：1
	问题 : 发射/v 第一颗/m 人造卫星/N.ObjectInstrument 的/uj 是/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : v/m/N.ObjectInstrument/uj/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 发射/v 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 发射第一颗人造卫星的是哪个国家
	模式 : 发射第一颗人造卫星的是哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 发射第一颗人造卫星的是哪个国家
	模式 : 发射第一颗人造卫星的是哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 发射/v 第一颗/m 人造卫星/N.ObjectInstrument 的/uj 是/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : v/m/N.ObjectInstrument/uj/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 发射/v 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 112：发射第一颗人造卫星的是哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 发射第一颗人造卫星的是哪个国家
Question 候选答案：
苏联  1.0
国家  0.7547338890086718
拜科努尔航天中心  0.27863148533665444
河南省  0.1627134492597321
东区  0.16258797249576692
郑州  0.15471669268838623
地球  0.11611929277385198
美国  0.11607535062859789
拜科努尔  0.06974931756593486
ExpectAnswerRank: 1

mrr: 94.97136752136753
perfectCount: 89
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 112

MRR：84.79586385836386%
回答完美率：79.46428571428571%
回答不完美率：15.178571428571427%
回答错误率：5.357142857142857%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:格林尼威天文台位于哪个城市:伦敦
Question:格林尼威天文台位于哪个城市
ExpectAnswer:伦敦
没有从数据库中查询到问题：格林尼威天文台位于哪个城市
Question：格林尼威天文台位于哪个城市 搜索到Evidence 10 条
将Question：格林尼威天文台位于哪个城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 格林尼威天文台位于哪个城市
问题：格林尼威天文台位于哪个城市
词和词性序列：格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
词性序列：nr/nr/n/v/RW.RWOrdinarySingle/ns
对问题进行分词：格林尼威天文台位于哪个城市
分词结果为：格林尼 威 天文台 位于 哪个 城市
句法树: 
句子依存关系：
	nn(天文台-3, 格林尼-1)
	nn(天文台-3, 威-2)
	nsubj(位于-4, 天文台-3)
	root(ROOT-0, 位于-4)
	det(城市-6, 哪个-5)
	dobj(位于-4, 城市-6)
主谓宾：天文台 位于 城市
主谓宾词和词性序列：天文台/n 位于/v 城市/ns
主谓宾词性序列：n/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 格林尼威天文台位于哪个城市 : 格林尼威天文台位于哪个城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: nr/nr/n/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/nr/n/v/RW.RWOrdinarySingle/ns : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: nr/nr/n/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: nr/nr/n/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【格林尼威天文台位于哪个城市】匹配到多个模式：
序号：1
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：4
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：5
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 格林尼威天文台位于哪个城市
	模式 : 格林尼威天文台位于哪个城市
	分类 : Location
序号：8
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 格林尼威天文台位于哪个城市
	模式 : 格林尼威天文台位于哪个城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：4
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：5
	问题 : 格林尼/nr 威/nr 天文台/n 位于/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : nr/nr/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 113：格林尼威天文台位于哪个城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 格林尼威天文台位于哪个城市
Question 候选答案：
伦敦  1.0
英国  0.6817181730904678
格林威治  0.5030492087649031
华盛顿  0.31641796399481126
巴黎  0.3162942783979091
柏林  0.3161936144139009
英格兰  0.2513081524367374
首都  0.21328324407046445
公园  0.20950330680675966
泰晤士河  0.20565776708224476
埃菲尔铁塔  0.15623308663817737
伦敦市  0.11047358012815167
地区  0.10282465152116259
地球  0.10281597961609883
国家  0.10279754073661593
海洋  0.10279695140478577
博物馆  0.10279638835505372
卢浮宫  0.08009705825179672
法国  0.08001077433108829
建筑物  0.07999730680657592
多伦多  0.07617309745103351
莫斯科  0.07616605857849455
我国  0.0761613446598124
ExpectAnswerRank: 1

mrr: 95.97136752136753
perfectCount: 90
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 113

MRR：84.93041373572348%
回答完美率：79.64601769911505%
回答不完美率：15.04424778761062%
回答错误率：5.3097345132743365%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:“玛祖卡舞”起源于哪个国家:波兰
Question:“玛祖卡舞”起源于哪个国家
ExpectAnswer:波兰
没有从数据库中查询到问题：“玛祖卡舞”起源于哪个国家
Question：“玛祖卡舞”起源于哪个国家 搜索到Evidence 9 条
将Question：“玛祖卡舞”起源于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “玛祖卡舞”起源于哪个国家
问题：“玛祖卡舞”起源于哪个国家
词和词性序列：玛祖卡/nr 舞/v 起源于/v 哪个国家/RW.RWLocationSingle 
词性序列：nr/v/v/RW.RWLocationSingle
对问题进行分词：“玛祖卡舞”起源于哪个国家
分词结果为：玛祖卡 舞 起源于 哪个国家
句法树: 
句子依存关系：
	nn(舞-2, 玛祖卡-1)
	nsubj(起源于-3, 舞-2)
	root(ROOT-0, 起源于-3)
	dobj(起源于-3, 哪个国家-4)
主谓宾：舞 起源于 哪个国家
主谓宾词和词性序列：舞/v 起源于/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：v/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “玛祖卡舞”起源于哪个国家 : “玛祖卡舞”起源于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 玛祖卡/nr 舞/v 起源于/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/v/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 舞/v 起源于/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: v/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“玛祖卡舞”起源于哪个国家】匹配到多个模式：
序号：1
	问题 : 玛祖卡/nr 舞/v 起源于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 舞/v 起源于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : “玛祖卡舞”起源于哪个国家
	模式 : “玛祖卡舞”起源于哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “玛祖卡舞”起源于哪个国家
	模式 : “玛祖卡舞”起源于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 玛祖卡/nr 舞/v 起源于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 舞/v 起源于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : v/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 114：“玛祖卡舞”起源于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question “玛祖卡舞”起源于哪个国家
Question 候选答案：
波兰  1.0
地区  0.1592603521499622
欧洲  0.1305923895453535
地方  0.1046017631215353
ExpectAnswerRank: 1

mrr: 96.97136752136753
perfectCount: 91
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 114

MRR：85.06260308891889%
回答完美率：79.82456140350878%
回答不完美率：14.912280701754385%
回答错误率：5.263157894736842%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:“郁金香”是哪个国家的象征:荷兰
Question:“郁金香”是哪个国家的象征
ExpectAnswer:荷兰
没有从数据库中查询到问题：“郁金香”是哪个国家的象征
Question：“郁金香”是哪个国家的象征 搜索到Evidence 9 条
将Question：“郁金香”是哪个国家的象征 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： “郁金香”是哪个国家的象征
问题：“郁金香”是哪个国家的象征
词和词性序列：郁金香/n 是/v 哪个国家/RW.RWLocationSingle 的/uj 象征/v 
词性序列：n/v/RW.RWLocationSingle/uj/v
对问题进行分词：“郁金香”是哪个国家的象征
分词结果为：郁金香 是 哪个国家 的 象征
句法树: 
句子依存关系：
	top(是-2, 郁金香-1)
	root(ROOT-0, 是-2)
	assmod(象征-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 象征-5)
主谓宾：郁金香 是 象征
主谓宾词和词性序列：郁金香/n 是/v 象征/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “郁金香”是哪个国家的象征 : “郁金香”是哪个国家的象征 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 郁金香/n 是/v 哪个国家/RW.RWLocationSingle 的/uj 象征/v  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/RW.RWLocationSingle/uj/v : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“郁金香”是哪个国家的象征】匹配到多个模式：
序号：1
	问题 : 郁金香/n 是/v 哪个国家/RW.RWLocationSingle 的/uj 象征/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/RW.RWLocationSingle/uj/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : “郁金香”是哪个国家的象征
	模式 : “郁金香”是哪个国家的象征
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “郁金香”是哪个国家的象征
	模式 : “郁金香”是哪个国家的象征
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 郁金香/n 是/v 哪个国家/RW.RWLocationSingle 的/uj 象征/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/RW.RWLocationSingle/uj/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 115：“郁金香”是哪个国家的象征 【问题类型：LOCATION_NAME】
************************************
************************************
Question “郁金香”是哪个国家的象征
Question 候选答案：
荷兰  1.0
中国  0.3707151923629981
我国  0.20337476845655567
亚洲  0.19091610977809986
美国  0.15540130620475265
西班牙  0.15531501097256306
国家  0.15042539357262397
原产地  0.14937464082819213
欧洲  0.1432344556237043
土耳其  0.13730281214843323
之国  0.11979134432880027
ExpectAnswerRank: 1

mrr: 97.97136752136753
perfectCount: 92
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 115

MRR：85.19249349684132%
回答完美率：80.0%
回答不完美率：14.782608695652174%
回答错误率：5.217391304347826%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:奔驰汽车原产于哪一个国家:德国
Question:奔驰汽车原产于哪一个国家
ExpectAnswer:德国
没有从数据库中查询到问题：奔驰汽车原产于哪一个国家
Question：奔驰汽车原产于哪一个国家 搜索到Evidence 8 条
将Question：奔驰汽车原产于哪一个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 奔驰汽车原产于哪一个国家
问题：奔驰汽车原产于哪一个国家
词和词性序列：奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
词性序列：v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
对问题进行分词：奔驰汽车原产于哪一个国家
分词结果为：奔驰 汽车 原 产于 哪一个 国家
句法树: 
句子依存关系：
	nn(汽车-2, 奔驰-1)
	nsubj(产于-4, 汽车-2)
	advmod(产于-4, 原-3)
	root(ROOT-0, 产于-4)
	nummod(国家-6, 哪一个-5)
	dobj(产于-4, 国家-6)
主谓宾：汽车 产于 国家
主谓宾词和词性序列：汽车/N.ObjectInstrument 产于/v 国家/ns
主谓宾词性序列：N.ObjectInstrument/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 奔驰汽车原产于哪一个国家 : 奔驰汽车原产于哪一个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【奔驰汽车原产于哪一个国家】匹配到多个模式：
序号：1
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：10
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：11
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：12
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：13
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：14
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：15
	问题 : 奔驰汽车原产于哪一个国家
	模式 : 奔驰汽车原产于哪一个国家
	分类 : Location
序号：16
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 奔驰汽车原产于哪一个国家
	模式 : 奔驰汽车原产于哪一个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：10
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：11
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：12
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：13
	问题 : 奔驰/v 汽车/N.ObjectInstrument 原/b 产于/v 哪一个/RW.RWOrdinarySingle 国家/ns 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：14
	问题 : v/N.ObjectInstrument/b/v/RW.RWOrdinarySingle/ns
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 116：奔驰汽车原产于哪一个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 奔驰汽车原产于哪一个国家
Question 候选答案：
德国  1.0
斯图加特  0.1939153761815886
白金汉宫  0.18061872897129103
南岳  0.14369617651074337
衡山  0.14368495253322716
ExpectAnswerRank: 1

mrr: 98.97136752136753
perfectCount: 93
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 116

MRR：85.320144414972%
回答完美率：80.17241379310344%
回答不完美率：14.655172413793101%
回答错误率：5.172413793103448%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:第一届世界杯足球赛在哪个国家举行:乌拉圭
Question:第一届世界杯足球赛在哪个国家举行
ExpectAnswer:乌拉圭
没有从数据库中查询到问题：第一届世界杯足球赛在哪个国家举行
Question：第一届世界杯足球赛在哪个国家举行 搜索到Evidence 9 条
将Question：第一届世界杯足球赛在哪个国家举行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第一届世界杯足球赛在哪个国家举行
问题：第一届世界杯足球赛在哪个国家举行
词和词性序列：第一届/m 世界杯/N.CONCEPT 足球赛/n 在/p 哪个国家/RW.RWLocationSingle 举行/v 
词性序列：m/N.CONCEPT/n/p/RW.RWLocationSingle/v
对问题进行分词：第一届世界杯足球赛在哪个国家举行
分词结果为：第一届 世界杯 足球赛 在 哪个国家 举行
句法树: 
句子依存关系：
	nummod(足球赛-3, 第一届-1)
	nn(足球赛-3, 世界杯-2)
	nsubj(举行-6, 足球赛-3)
	prep(举行-6, 在-4)
	pobj(在-4, 哪个国家-5)
	root(ROOT-0, 举行-6)
主谓宾：足球赛 举行 在
主谓宾词和词性序列：足球赛/n 举行/v 在/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一届世界杯足球赛在哪个国家举行 : 第一届世界杯足球赛在哪个国家举行 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一届/m 世界杯/N.CONCEPT 足球赛/n 在/p 哪个国家/RW.RWLocationSingle 举行/v  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: m/N.CONCEPT/n/p/RW.RWLocationSingle/v : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一届世界杯足球赛在哪个国家举行】匹配到多个模式：
序号：1
	问题 : 第一届/m 世界杯/N.CONCEPT 足球赛/n 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/N.CONCEPT/n/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第一届世界杯足球赛在哪个国家举行
	模式 : 第一届世界杯足球赛在哪个国家举行
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一届世界杯足球赛在哪个国家举行
	模式 : 第一届世界杯足球赛在哪个国家举行
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一届/m 世界杯/N.CONCEPT 足球赛/n 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/N.CONCEPT/n/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 117：第一届世界杯足球赛在哪个国家举行 【问题类型：LOCATION_NAME】
************************************
************************************
Question 第一届世界杯足球赛在哪个国家举行
Question 候选答案：
乌拉圭  1.0
我国  0.14874950264324066
阿根廷  0.14859117409879063
巴拉圭  0.14858601905487753
比利时  0.1485817496932708
玻利维亚  0.14857815409417596
罗马尼亚  0.14857438430872172
巴西  0.1485712331975198
智利  0.14856759949557355
中华人民共和国  0.1393082144196151
国家  0.10160297394506063
ExpectAnswerRank: 1

mrr: 99.97136752136753
perfectCount: 94
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 117

MRR：85.44561326612609%
回答完美率：80.34188034188034%
回答不完美率：14.529914529914532%
回答错误率：5.128205128205128%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:工业革命发生在哪个国家:英国
Question:工业革命发生在哪个国家
ExpectAnswer:英国
没有从数据库中查询到问题：工业革命发生在哪个国家
Question：工业革命发生在哪个国家 搜索到Evidence 10 条
将Question：工业革命发生在哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 工业革命发生在哪个国家
问题：工业革命发生在哪个国家
词和词性序列：工业革命/l 发生/v 在/p 哪个国家/RW.RWLocationSingle 
词性序列：l/v/p/RW.RWLocationSingle
对问题进行分词：工业革命发生在哪个国家
分词结果为：工业革命 发生 在 哪个国家
句法树: 
句子依存关系：
	nsubj(发生-2, 工业革命-1)
	root(ROOT-0, 发生-2)
	prep(发生-2, 在-3)
	pobj(在-3, 哪个国家-4)
主谓宾：工业革命 发生 在
主谓宾词和词性序列：工业革命/l 发生/v 在/p
主谓宾词性序列：l/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 工业革命发生在哪个国家 : 工业革命发生在哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 工业革命/l 发生/v 在/p 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: l/v/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【工业革命发生在哪个国家】匹配到多个模式：
序号：1
	问题 : 工业革命/l 发生/v 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : l/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 工业革命发生在哪个国家
	模式 : 工业革命发生在哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 工业革命发生在哪个国家
	模式 : 工业革命发生在哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 工业革命/l 发生/v 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : l/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 118：工业革命发生在哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 工业革命发生在哪个国家
Question 候选答案：
英国  1.0
国家  0.6190080410838568
美国  0.2701437165873416
地区  0.2700755726406458
英格兰  0.25132984871308023
日本  0.16815682711168004
大化  0.14898781915858184
德国  0.09338615151798653
欧洲  0.0768810229920889
俄罗斯  0.056352972950700984
ExpectAnswerRank: 1

mrr: 100.97136752136753
perfectCount: 95
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 118

MRR：85.56895552658264%
回答完美率：80.50847457627118%
回答不完美率：14.40677966101695%
回答错误率：5.084745762711865%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:被称为“瓷都”的是我国哪一城市:景德镇
Question:被称为“瓷都”的是我国哪一城市
ExpectAnswer:景德镇
没有从数据库中查询到问题：被称为“瓷都”的是我国哪一城市
Question：被称为“瓷都”的是我国哪一城市 搜索到Evidence 9 条
将Question：被称为“瓷都”的是我国哪一城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 被称为“瓷都”的是我国哪一城市
问题：被称为“瓷都”的是我国哪一城市
词和词性序列：被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
词性序列：p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
对问题进行分词：被称为“瓷都”的是我国哪一城市
分词结果为：被 称为 瓷都 的 是 我国 哪一 城市
句法树: 
句子依存关系：
	pass(称为-2, 被-1)
	top(是-5, 称为-2)
	dobj(称为-2, 瓷都-3)
	cpm(称为-2, 的-4)
	root(ROOT-0, 是-5)
	nn(城市-8, 我国-6)
	nummod(城市-8, 哪一-7)
	attr(是-5, 城市-8)
主谓宾：称为 是 城市
主谓宾词和词性序列：称为/v 是/v 城市/ns
主谓宾词性序列：v/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被称为“瓷都”的是我国哪一城市 : 被称为“瓷都”的是我国哪一城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被称为“瓷都”的是我国哪一城市】匹配到多个模式：
序号：1
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：8
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：9
	问题 : 被称为“瓷都”的是我国哪一城市
	模式 : 被称为“瓷都”的是我国哪一城市
	分类 : Location
序号：10
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被称为“瓷都”的是我国哪一城市
	模式 : 被称为“瓷都”的是我国哪一城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：4
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：5
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：6
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：7
	问题 : 被/p 称为/v 瓷都/ns 的/uj 是/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：8
	问题 : p/v/ns/uj/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 119：被称为“瓷都”的是我国哪一城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 被称为“瓷都”的是我国哪一城市
Question 候选答案：
景德镇  1.0
江西  0.33760704020573495
巴黎  0.24834062138627308
鄱阳湖  0.2483262048723347
广东  0.24831571856553225
佛山  0.2483145113388885
湖北  0.2483128062993503
汉口  0.24831173446781196
河南  0.24831021537541148
新平镇  0.22932813723478904
江西省  0.21657937905799876
中国  0.21647926421549618
ExpectAnswerRank: 1

mrr: 101.97136752136753
perfectCount: 96
notPerfectCount: 17
wrongCount: 6
unknownTypeCount: 0
questionCount: 119

MRR：85.69022480787187%
回答完美率：80.67226890756302%
回答不完美率：14.285714285714285%
回答错误率：5.042016806722689%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:殷墟在中国的哪个古城:安阳
Question:殷墟在中国的哪个古城
ExpectAnswer:安阳
没有从数据库中查询到问题：殷墟在中国的哪个古城
Question：殷墟在中国的哪个古城 搜索到Evidence 9 条
将Question：殷墟在中国的哪个古城 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 殷墟在中国的哪个古城
问题：殷墟在中国的哪个古城
词和词性序列：殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns 
词性序列：n/p/ns/uj/RW.RWOrdinarySingle/ns
对问题进行分词：殷墟在中国的哪个古城
分词结果为：殷墟 在 中国 的 哪个 古城
句法树: 
句子依存关系：
	nsubj(古城-6, 殷墟-1)
	assmod(古城-6, 在-2)
	pobj(在-2, 中国-3)
	assm(在-2, 的-4)
	det(古城-6, 哪个-5)
	root(ROOT-0, 古城-6)
主谓宾：殷墟 古城 哪个
主谓宾词和词性序列：殷墟/n 古城/ns 哪个/RW.RWOrdinarySingle
主谓宾词性序列：n/ns/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 殷墟在中国的哪个古城 : 殷墟在中国的哪个古城 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/p/ns/uj/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: n/p/ns/uj/RW.RWOrdinarySingle/ns : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: n/p/ns/uj/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【殷墟在中国的哪个古城】匹配到多个模式：
序号：1
	问题 : 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : 殷墟在中国的哪个古城
	模式 : 殷墟在中国的哪个古城
	分类 : Location
序号：6
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 殷墟在中国的哪个古城
	模式 : 殷墟在中国的哪个古城
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 殷墟/n 在/p 中国/ns 的/uj 哪个/RW.RWOrdinarySingle 古城/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 120：殷墟在中国的哪个古城 【问题类型：LOCATION_NAME】
************************************
************************************
Question 殷墟在中国的哪个古城
Question 候选答案：
遗址  1.0
河南  0.22698535393335295
安阳  0.2123768089211265
安阳市  0.16853185472050328
大邑  0.12459631415635013
北蒙  0.12458683523836729
都城  0.12455815926984329
河南省  0.07697308492215243
浙江  0.051430686452152166
良渚遗址  0.04399290568561375
浙江省  0.04397019884222259
ExpectAnswerRank: 3

mrr: 102.30470085470085
perfectCount: 96
notPerfectCount: 18
wrongCount: 6
unknownTypeCount: 0
questionCount: 120

MRR：85.25391737891738%
回答完美率：80.0%
回答不完美率：15.0%
回答错误率：5.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:德国最大的城市是哪:柏林
Question:德国最大的城市是哪
ExpectAnswer:柏林
没有从数据库中查询到问题：德国最大的城市是哪
Question：德国最大的城市是哪 搜索到Evidence 8 条
将Question：德国最大的城市是哪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 德国最大的城市是哪
问题：德国最大的城市是哪
词和词性序列：德国/ns 最大/a 的/uj 城市/ns 是哪/RW.RWLocationSingle 
词性序列：ns/a/uj/ns/RW.RWLocationSingle
对问题进行分词：德国最大的城市是哪
分词结果为：德国 最大 的 城市 是哪
句法树: 
句子依存关系：
	nn(城市-4, 德国-1)
	assmod(城市-4, 最大-2)
	assm(最大-2, 的-3)
	nsubj(是哪-5, 城市-4)
	root(ROOT-0, 是哪-5)
主谓宾：城市 是哪 最大
主谓宾词和词性序列：城市/ns 是哪/RW.RWLocationSingle 最大/a
主谓宾词性序列：ns/RW.RWLocationSingle/a

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 德国最大的城市是哪 : 德国最大的城市是哪 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 德国/ns 最大/a 的/uj 城市/ns 是哪/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/a/uj/ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 城市/ns 是哪/RW.RWLocationSingle 最大/a : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle/a : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【德国最大的城市是哪】匹配到多个模式：
序号：1
	问题 : 德国/ns 最大/a 的/uj 城市/ns 是哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/a/uj/ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 城市/ns 是哪/RW.RWLocationSingle 最大/a
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/a
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 德国最大的城市是哪
	模式 : 德国最大的城市是哪
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 德国最大的城市是哪
	模式 : 德国最大的城市是哪
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 德国/ns 最大/a 的/uj 城市/ns 是哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/a/uj/ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 城市/ns 是哪/RW.RWLocationSingle 最大/a
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/a
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 121：德国最大的城市是哪 【问题类型：LOCATION_NAME】
************************************
************************************
Question 德国最大的城市是哪
Question 候选答案：
柏林  1.0
首都  0.6067512027927099
慕尼黑  0.4704365242495295
汉堡  0.470407108762692
大城市  0.4115377510509693
西柏林  0.24364049270914148
车站  0.24344572030420955
勃兰登堡州  0.15123179962828392
科隆  0.12594485332189262
法兰克福  0.1259270061196004
太多  0.1009350918514894
港口城市  0.10091129919407604
波恩  0.10087464717058094
联邦德国  0.10083329355212871
纽伦堡  0.10080248385159682
地方  0.10077589920333319
ExpectAnswerRank: 1

mrr: 103.30470085470085
perfectCount: 97
notPerfectCount: 18
wrongCount: 6
unknownTypeCount: 0
questionCount: 121

MRR：85.37578583033128%
回答完美率：80.16528925619835%
回答不完美率：14.87603305785124%
回答错误率：4.958677685950414%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:美国最大的城市是哪个:纽约州
Question:美国最大的城市是哪个
ExpectAnswer:纽约州
没有从数据库中查询到问题：美国最大的城市是哪个
Question：美国最大的城市是哪个 搜索到Evidence 10 条
将Question：美国最大的城市是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 美国最大的城市是哪个
问题：美国最大的城市是哪个
词和词性序列：美国/ns 最大/a 的/uj 城市/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：ns/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：美国最大的城市是哪个
分词结果为：美国 最大 的 城市 是 哪个
句法树: 
句子依存关系：
	nn(城市-4, 美国-1)
	assmod(城市-4, 最大-2)
	assm(最大-2, 的-3)
	top(是-5, 城市-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪个-6)
主谓宾：城市 是 哪个
主谓宾词和词性序列：城市/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国最大的城市是哪个 : 美国最大的城市是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 最大/a 的/uj 城市/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 城市/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国最大的城市是哪个】匹配到多个模式：
序号：1
	问题 : 美国/ns 最大/a 的/uj 城市/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 城市/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 美国最大的城市是哪个
	模式 : 美国最大的城市是哪个
	分类 : Location
序号：6
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国最大的城市是哪个
	模式 : 美国最大的城市是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 最大/a 的/uj 城市/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 城市/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 122：美国最大的城市是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 美国最大的城市是哪个
Question 候选答案：
纽约  1.0
芝加哥  0.38039284507172766
大城市  0.27025077166958283
洛杉矶  0.19394611791041053
芝加哥市  0.17629262714642854
密歇根湖  0.17620443092141302
地区  0.13799409483176575
纽约市  0.12354028528067953
安庆  0.12349736466645149
都市  0.1234890116163607
大港  0.12344505743244254
大都市  0.12342073792838495
纽约州  0.12339355311336253
特大城市  0.11751931294702118
大城  0.11751824077939109
海港  0.11751808751492476
田纳西州  0.10575552897546577
墨西哥  0.09405340547795529
圣保罗  0.09398630044551325
首府  0.07644326408858473
加利福尼亚  0.0646907666129706
休斯敦  0.06462938367798264
得克萨斯  0.06462634905526163
ExpectAnswerRank: 13

mrr: 103.38162393162393
perfectCount: 97
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 122

MRR：84.73903600952781%
回答完美率：79.50819672131148%
回答不完美率：15.573770491803279%
回答错误率：4.918032786885246%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:美国最古老的国家公园是哪个:黄石
Question:美国最古老的国家公园是哪个
ExpectAnswer:黄石
没有从数据库中查询到问题：美国最古老的国家公园是哪个
Question：美国最古老的国家公园是哪个 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 美国最古老的国家公园是哪个
问题：美国最古老的国家公园是哪个
词和词性序列：美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
对问题进行分词：美国最古老的国家公园是哪个
分词结果为：美国 最 古老 的 国家 公园 是 哪个
句法树: 
句子依存关系：
	nn(公园-6, 美国-1)
	advmod(古老-3, 最-2)
	rcmod(公园-6, 古老-3)
	cpm(古老-3, 的-4)
	nn(公园-6, 国家-5)
	top(是-7, 公园-6)
	root(ROOT-0, 是-7)
	attr(是-7, 哪个-8)
	rcmod(美国-1, 古老-3)
主谓宾：公园 是 哪个
主谓宾词和词性序列：公园/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国最古老的国家公园是哪个 : 美国最古老的国家公园是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 公园/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国最古老的国家公园是哪个】匹配到多个模式：
序号：1
	问题 : 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 公园/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：6
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：7
	问题 : 美国最古老的国家公园是哪个
	模式 : 美国最古老的国家公园是哪个
	分类 : Location
序号：8
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：9
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国最古老的国家公园是哪个
	模式 : 美国最古老的国家公园是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 公园/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 美国/ns 最/RW.RWSuperlativeAdj 古老/a 的/uj 国家/ns 公园/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：6
	问题 : ns/RW.RWSuperlativeAdj/a/uj/ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 123：美国最古老的国家公园是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 美国最古老的国家公园是哪个
Question 候选答案：
黄石  1.0
加拿大  0.38511942548302985
建筑  0.3257903689562299
峡谷  0.22216689399695014
山峰  0.2221540250611691
森林  0.22200691925004534
地球  0.20744726647561323
地图  0.20743506215435006
地方  0.19985591811734885
怀俄明州  0.11855681746388372
ExpectAnswerRank: 1

mrr: 104.38162393162393
perfectCount: 98
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 123

MRR：84.86310888749914%
回答完美率：79.67479674796748%
回答不完美率：15.447154471544716%
回答错误率：4.878048780487805%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:埃塞俄比亚的首都是哪里:亚的斯亚贝巴
Question:埃塞俄比亚的首都是哪里
ExpectAnswer:亚的斯亚贝巴
没有从数据库中查询到问题：埃塞俄比亚的首都是哪里
Question：埃塞俄比亚的首都是哪里 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 埃塞俄比亚的首都是哪里
问题：埃塞俄比亚的首都是哪里
词和词性序列：埃塞俄比亚/ns 的/uj 首都/ns 是/v 哪里/RW.RWLocationSingle 
词性序列：ns/uj/ns/v/RW.RWLocationSingle
对问题进行分词：埃塞俄比亚的首都是哪里
分词结果为：埃塞俄比亚 的 首都 是 哪里
句法树: 
句子依存关系：
	assmod(首都-3, 埃塞俄比亚-1)
	assm(埃塞俄比亚-1, 的-2)
	top(是-4, 首都-3)
	root(ROOT-0, 是-4)
	attr(是-4, 哪里-5)
主谓宾：首都 是 哪里
主谓宾词和词性序列：首都/ns 是/v 哪里/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 埃塞俄比亚的首都是哪里 : 埃塞俄比亚的首都是哪里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 埃塞俄比亚/ns 的/uj 首都/ns 是/v 哪里/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/uj/ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 首都/ns 是/v 哪里/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【埃塞俄比亚的首都是哪里】匹配到多个模式：
序号：1
	问题 : 埃塞俄比亚/ns 的/uj 首都/ns 是/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 是/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 埃塞俄比亚的首都是哪里
	模式 : 埃塞俄比亚的首都是哪里
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 埃塞俄比亚的首都是哪里
	模式 : 埃塞俄比亚的首都是哪里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 埃塞俄比亚/ns 的/uj 首都/ns 是/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 是/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 124：埃塞俄比亚的首都是哪里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 埃塞俄比亚的首都是哪里
Question 候选答案：
亚的斯亚贝巴  1.0
非洲  0.3733923709778367
总部  0.36138352823178976
城市  0.3156225090396883
地方  0.20760830085226947
景点  0.18659824315886897
大都市  0.18659557633335272
山谷  0.17508372806652372
大城市  0.17496511717245372
地图  0.1686105154754929
位置  0.15192833204034606
ExpectAnswerRank: 1

mrr: 105.38162393162393
perfectCount: 99
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 124

MRR：84.98518059001931%
回答完美率：79.83870967741935%
回答不完美率：15.32258064516129%
回答错误率：4.838709677419355%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:澳大利亚首都是哪个城市:堪培拉
Question:澳大利亚首都是哪个城市
ExpectAnswer:堪培拉
没有从数据库中查询到问题：澳大利亚首都是哪个城市
Question：澳大利亚首都是哪个城市 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 澳大利亚首都是哪个城市
问题：澳大利亚首都是哪个城市
词和词性序列：澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
词性序列：ns/ns/v/RW.RWOrdinarySingle/ns
对问题进行分词：澳大利亚首都是哪个城市
分词结果为：澳大利亚 首都 是 哪个 城市
句法树: 
句子依存关系：
	nn(首都-2, 澳大利亚-1)
	top(是-3, 首都-2)
	root(ROOT-0, 是-3)
	det(城市-5, 哪个-4)
	attr(是-3, 城市-5)
主谓宾：首都 是 城市
主谓宾词和词性序列：首都/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 澳大利亚首都是哪个城市 : 澳大利亚首都是哪个城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【澳大利亚首都是哪个城市】匹配到多个模式：
序号：1
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 澳大利亚首都是哪个城市
	模式 : 澳大利亚首都是哪个城市
	分类 : Location
序号：8
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳大利亚首都是哪个城市
	模式 : 澳大利亚首都是哪个城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 澳大利亚/ns 首都/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 125：澳大利亚首都是哪个城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 澳大利亚首都是哪个城市
Question 候选答案：
堪培拉  1.0
墨尔本  0.43085459897347594
澳洲  0.39804430778405536
伦敦  0.39747057245407086
深圳  0.39138370198226685
英国  0.386438430166746
国家  0.36443296216989957
建筑  0.2649147691774689
悉尼  0.24295423546527484
地点  0.16573679228591215
长达  0.16557880510764122
ExpectAnswerRank: 1

mrr: 106.38162393162393
perfectCount: 100
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 125

MRR：85.10529914529916%
回答完美率：80.0%
回答不完美率：15.2%
回答错误率：4.8%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:澳大利亚最大的城市是什么:悉尼
Question:澳大利亚最大的城市是什么
ExpectAnswer:悉尼
没有从数据库中查询到问题：澳大利亚最大的城市是什么
Question：澳大利亚最大的城市是什么 搜索到Evidence 8 条
将Question：澳大利亚最大的城市是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 澳大利亚最大的城市是什么
问题：澳大利亚最大的城市是什么
词和词性序列：澳大利亚/ns 最大/a 的/uj 城市/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：澳大利亚最大的城市是什么
分词结果为：澳大利亚 最大 的 城市 是 什么
句法树: 
句子依存关系：
	nn(城市-4, 澳大利亚-1)
	assmod(城市-4, 最大-2)
	assm(最大-2, 的-3)
	top(是-5, 城市-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：城市 是 什么
主谓宾词和词性序列：城市/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 澳大利亚最大的城市是什么 : 澳大利亚最大的城市是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 澳大利亚/ns 最大/a 的/uj 城市/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 城市/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【澳大利亚最大的城市是什么】匹配到多个模式：
序号：1
	问题 : 澳大利亚/ns 最大/a 的/uj 城市/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 城市/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 澳大利亚最大的城市是什么
	模式 : 澳大利亚最大的城市是什么
	分类 : Location
序号：6
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳大利亚最大的城市是什么
	模式 : 澳大利亚最大的城市是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳大利亚/ns 最大/a 的/uj 城市/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 城市/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 126：澳大利亚最大的城市是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 澳大利亚最大的城市是什么
Question 候选答案：
悉尼  1.0
首都  0.6097208532694318
美国  0.30456702298650123
中国  0.3045510443579185
新西兰  0.2763055982734723
意大利  0.2698083814394691
巴西  0.2542560956716022
加拿大  0.25278720996746035
德国  0.2525079165388482
英国  0.25243195589623735
伦敦  0.24216062613076095
柏林  0.2419967366077585
温哥华  0.24182489240755117
罗马  0.24176031806362525
奥克兰  0.2417249678156666
堪培拉  0.23150852095959432
首府  0.22085115844991107
新南威尔士州  0.22074332273119504
澳洲  0.12628646034331167
地区  0.12612612810885143
墨尔本  0.09470279155605418
ExpectAnswerRank: 1

mrr: 107.38162393162393
perfectCount: 101
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 126

MRR：85.22351105684439%
回答完美率：80.15873015873017%
回答不完美率：15.079365079365079%
回答错误率：4.761904761904762%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:刚果首都是哪里:布拉柴维尔
Question:刚果首都是哪里
ExpectAnswer:布拉柴维尔
没有从数据库中查询到问题：刚果首都是哪里
Question：刚果首都是哪里 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 刚果首都是哪里
问题：刚果首都是哪里
词和词性序列：刚果/ns 首都/ns 是/v 哪里/RW.RWLocationSingle 
词性序列：ns/ns/v/RW.RWLocationSingle
对问题进行分词：刚果首都是哪里
分词结果为：刚果 首都 是 哪里
句法树: 
句子依存关系：
	nn(首都-2, 刚果-1)
	top(是-3, 首都-2)
	root(ROOT-0, 是-3)
	attr(是-3, 哪里-4)
主谓宾：首都 是 哪里
主谓宾词和词性序列：首都/ns 是/v 哪里/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 刚果首都是哪里 : 刚果首都是哪里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 刚果/ns 首都/ns 是/v 哪里/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 首都/ns 是/v 哪里/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【刚果首都是哪里】匹配到多个模式：
序号：1
	问题 : 刚果/ns 首都/ns 是/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 是/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 刚果首都是哪里
	模式 : 刚果首都是哪里
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 刚果首都是哪里
	模式 : 刚果首都是哪里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 刚果/ns 首都/ns 是/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 是/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 127：刚果首都是哪里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 刚果首都是哪里
Question 候选答案：
布拉柴维尔  1.0
刚果民主共和国  0.6068453541183497
刚果共和国  0.5679389655114658
金沙萨  0.4598889288265869
国家  0.4019004148450699
马德里  0.18961306166094438
中华人民共和国  0.14767500405744186
中非地区  0.13404675482029504
中非  0.13385983526296583
地区  0.08058426924389943
扎伊尔  0.06878408325619446
ExpectAnswerRank: 1

mrr: 108.38162393162393
perfectCount: 102
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 127

MRR：85.33986136348342%
回答完美率：80.31496062992126%
回答不完美率：14.960629921259844%
回答错误率：4.724409448818897%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上火山最多的洲是哪个洲:亚洲
Question:世界上火山最多的洲是哪个洲
ExpectAnswer:亚洲
没有从数据库中查询到问题：世界上火山最多的洲是哪个洲
Question：世界上火山最多的洲是哪个洲 搜索到Evidence 10 条
将Question：世界上火山最多的洲是哪个洲 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 世界上火山最多的洲是哪个洲
问题：世界上火山最多的洲是哪个洲
词和词性序列：世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
词性序列：n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
对问题进行分词：世界上火山最多的洲是哪个洲
分词结果为：世界 上 火山 最多 的 洲 是 哪个 洲
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-7, 上-2)
	nn(洲-6, 火山-3)
	rcmod(洲-6, 最多-4)
	cpm(最多-4, 的-5)
	top(是-7, 洲-6)
	root(ROOT-0, 是-7)
	det(洲-9, 哪个-8)
	attr(是-7, 洲-9)
	rcmod(火山-3, 最多-4)
主谓宾：洲 是 洲
主谓宾词和词性序列：洲/ns 是/v 洲/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上火山最多的洲是哪个洲 : 世界上火山最多的洲是哪个洲 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上火山最多的洲是哪个洲】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 世界上火山最多的洲是哪个洲
	模式 : 世界上火山最多的洲是哪个洲
	分类 : Location
序号：8
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上火山最多的洲是哪个洲
	模式 : 世界上火山最多的洲是哪个洲
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界/n 上/f 火山/ns 最多/d 的/uj 洲/ns 是/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : n/f/ns/d/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 128：世界上火山最多的洲是哪个洲 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上火山最多的洲是哪个洲
Question 候选答案：
亚洲  1.0
太平洋  0.6202602586963807
地区  0.5622345271632522
群岛  0.53155461405952
爪哇岛  0.5209338345531925
苏门答腊岛  0.5209231610914875
德干高原  0.5208926809603367
印尼  0.21261621058343366
国家  0.1114838063785335
美国  0.10653422071663193
日本  0.10647140690305901
中国  0.10643551849790898
印度尼西亚  0.10285687925545223
位置  0.09926425184690603
东南亚  0.09925883764924733
大洋洲  0.09924576179501138
印度洋  0.09924129457274117
ExpectAnswerRank: 1

mrr: 109.38162393162393
perfectCount: 103
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 128

MRR：85.45439369658119%
回答完美率：80.46875%
回答不完美率：14.84375%
回答错误率：4.6875%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:美国的首都在哪里:华盛顿
Question:美国的首都在哪里
ExpectAnswer:华盛顿
没有从数据库中查询到问题：美国的首都在哪里
Question：美国的首都在哪里 搜索到Evidence 9 条
将Question：美国的首都在哪里 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 美国的首都在哪里
问题：美国的首都在哪里
词和词性序列：美国/ns 的/uj 首都/ns 在/p 哪里/RW.RWLocationSingle 
词性序列：ns/uj/ns/p/RW.RWLocationSingle
对问题进行分词：美国的首都在哪里
分词结果为：美国 的 首都 在 哪里
句法树: 
句子依存关系：
	assmod(首都-3, 美国-1)
	assm(美国-1, 的-2)
	nsubj(在-4, 首都-3)
	root(ROOT-0, 在-4)
	dobj(在-4, 哪里-5)
主谓宾：首都 在 哪里
主谓宾词和词性序列：首都/ns 在/p 哪里/RW.RWLocationSingle
主谓宾词性序列：ns/p/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国的首都在哪里 : 美国的首都在哪里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 的/uj 首都/ns 在/p 哪里/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/uj/ns/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 首都/ns 在/p 哪里/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国的首都在哪里】匹配到多个模式：
序号：1
	问题 : 美国/ns 的/uj 首都/ns 在/p 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 在/p 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 美国的首都在哪里
	模式 : 美国的首都在哪里
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国的首都在哪里
	模式 : 美国的首都在哪里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 的/uj 首都/ns 在/p 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 首都/ns 在/p 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 129：美国的首都在哪里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 美国的首都在哪里
Question 候选答案：
华盛顿  1.0
哥伦比亚特区  0.5142965213449221
美洲  0.4458123171071838
哥伦布  0.4457930184694517
纽约  0.38197264017208304
大连  0.26686269616716807
美利坚合众国  0.2570654956835059
意大利  0.25689663842496846
特区  0.20449662403305127
马里兰州  0.20448201350290746
地方  0.2044719996347923
城市  0.14599782665092711
机场  0.1418874656381096
韩国  0.14125786988926967
位置  0.07234751944929498
ExpectAnswerRank: 1

mrr: 110.38162393162393
perfectCount: 104
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 129

MRR：85.5671503345922%
回答完美率：80.62015503875969%
回答不完美率：14.728682170542637%
回答错误率：4.651162790697675%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:2000年奥运会上获金牌最多的国家是哪个:美国
Question:2000年奥运会上获金牌最多的国家是哪个
ExpectAnswer:美国
没有从数据库中查询到问题：2000年奥运会上获金牌最多的国家是哪个
Question：2000年奥运会上获金牌最多的国家是哪个 搜索到Evidence 9 条
将Question：2000年奥运会上获金牌最多的国家是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 2000年奥运会上获金牌最多的国家是哪个
问题：2000年奥运会上获金牌最多的国家是哪个
词和词性序列：2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：2000年奥运会上获金牌最多的国家是哪个
分词结果为：2000年 奥运会 上 获 金牌 最多 的 国家 是 哪个
句法树: 
句子依存关系：
	nn(奥运会-2, 2000年-1)
	lobj(上-3, 奥运会-2)
	dep(国家-8, 上-3)
	rcmod(国家-8, 获-4)
	dobj(获-4, 金牌-5)
	advmod(获-4, 最多-6)
	cpm(获-4, 的-7)
	top(是-9, 国家-8)
	root(ROOT-0, 是-9)
	attr(是-9, 哪个-10)
主谓宾：国家 是 哪个
主谓宾词和词性序列：国家/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 2000年奥运会上获金牌最多的国家是哪个 : 2000年奥运会上获金牌最多的国家是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
匹配成功: m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 国家/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
匹配成功: m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【2000年奥运会上获金牌最多的国家是哪个】匹配到多个模式：
序号：1
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：6
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：7
	问题 : 2000年奥运会上获金牌最多的国家是哪个
	模式 : 2000年奥运会上获金牌最多的国家是哪个
	分类 : Location
序号：8
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：9
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：10
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：11
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2000年奥运会上获金牌最多的国家是哪个
	模式 : 2000年奥运会上获金牌最多的国家是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：3
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：4
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 2000年/m 奥运会/N.CONCEPT 上/f 获/v 金牌/N.CONCEPT 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：6
	问题 : m/N.CONCEPT/f/v/N.CONCEPT/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 130：2000年奥运会上获金牌最多的国家是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 2000年奥运会上获金牌最多的国家是哪个
Question 候选答案：
美国  1.0
莫斯科  0.41094959485827304
洛杉矶  0.23629176320138906
京东  0.14882037247704097
中国  0.12043788228744419
雅典  0.097175599425864
希腊  0.09059089162722374
德国  0.09058477267313489
法国  0.09058098846089012
英国  0.0905786690581091
匈牙利  0.0905764590908594
苏联  0.07441080914686299
ExpectAnswerRank: 1

mrr: 111.38162393162393
perfectCount: 105
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 130

MRR：85.67817225509533%
回答完美率：80.76923076923077%
回答不完美率：14.615384615384617%
回答错误率：4.615384615384616%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:春城是指我国哪一城市:昆明
Question:春城是指我国哪一城市
ExpectAnswer:昆明
没有从数据库中查询到问题：春城是指我国哪一城市
Question：春城是指我国哪一城市 搜索到Evidence 9 条
将Question：春城是指我国哪一城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 春城是指我国哪一城市
问题：春城是指我国哪一城市
词和词性序列：春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
词性序列：ns/v/v/ns/RW.RWOrdinarySingle/ns
对问题进行分词：春城是指我国哪一城市
分词结果为：春城 是 指 我国 哪一 城市
句法树: 
句子依存关系：
	top(指-3, 春城-1)
	cop(指-3, 是-2)
	root(ROOT-0, 指-3)
	nn(城市-6, 我国-4)
	nummod(城市-6, 哪一-5)
	dobj(指-3, 城市-6)
	conj(指-3, 是-2)
主谓宾：春城 指 是
主谓宾词和词性序列：春城/ns 指/v 是/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 春城是指我国哪一城市 : 春城是指我国哪一城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/v/ns/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/v/v/ns/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/v/ns/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/v/v/ns/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【春城是指我国哪一城市】匹配到多个模式：
序号：1
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 春城是指我国哪一城市
	模式 : 春城是指我国哪一城市
	分类 : Location
序号：8
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 春城是指我国哪一城市
	模式 : 春城是指我国哪一城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 春城/ns 是/v 指/v 我国/ns 哪一/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/v/ns/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 131：春城是指我国哪一城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 春城是指我国哪一城市
Question 候选答案：
昆明  1.0
云南省  0.30608097140138135
云南昆明  0.20574103208531583
羊城  0.1900513968132591
中国  0.1828181440597009
别称  0.17936920217191352
特大城市  0.17935212601694006
广州  0.14243929428838428
泉城  0.13719889371195068
济南  0.137186514488744
重庆  0.1371742720419043
蓉城  0.13717141861999715
成都  0.13716578023325227
洛阳  0.13715700731371688
长春  0.07407769003386785
杭州  0.0739422277039958
杭城  0.07393177967156066
宁波  0.07392517546455896
甬城  0.07391763856064171
温州  0.07391275230485983
绍兴  0.07390329403001158
嘉兴  0.07389585026478478
石头城  0.05295291786958916
冰城  0.05289429848540133
基地  0.04227849425385493
ExpectAnswerRank: 1

mrr: 112.38162393162393
perfectCount: 106
notPerfectCount: 19
wrongCount: 6
unknownTypeCount: 0
questionCount: 131

MRR：85.78749918444575%
回答完美率：80.91603053435115%
回答不完美率：14.50381679389313%
回答错误率：4.580152671755725%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:阿拉伯世界唯一的岛屿是什么:巴林国
Question:阿拉伯世界唯一的岛屿是什么
ExpectAnswer:巴林国
没有从数据库中查询到问题：阿拉伯世界唯一的岛屿是什么
Question：阿拉伯世界唯一的岛屿是什么 搜索到Evidence 8 条
将Question：阿拉伯世界唯一的岛屿是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 阿拉伯世界唯一的岛屿是什么
问题：阿拉伯世界唯一的岛屿是什么
词和词性序列：阿拉伯/ns 世界/n 唯一/b 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/n/b/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：阿拉伯世界唯一的岛屿是什么
分词结果为：阿拉伯 世界 唯一 的 岛屿 是 什么
句法树: 
句子依存关系：
	nn(世界-2, 阿拉伯-1)
	nn(岛屿-5, 世界-2)
	assmod(岛屿-5, 唯一-3)
	assm(唯一-3, 的-4)
	top(是-6, 岛屿-5)
	root(ROOT-0, 是-6)
	attr(是-6, 什么-7)
主谓宾：岛屿 是 什么
主谓宾词和词性序列：岛屿/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 阿拉伯世界唯一的岛屿是什么 : 阿拉伯世界唯一的岛屿是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/n/b/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 阿拉伯/ns 世界/n 唯一/b 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/n/b/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 岛屿/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【阿拉伯世界唯一的岛屿是什么】匹配到多个模式：
序号：1
	问题 : 阿拉伯/ns 世界/n 唯一/b 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/n/b/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 阿拉伯世界唯一的岛屿是什么
	模式 : 阿拉伯世界唯一的岛屿是什么
	分类 : Location
序号：6
	问题 : ns/n/b/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿拉伯世界唯一的岛屿是什么
	模式 : 阿拉伯世界唯一的岛屿是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/n/b/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿拉伯/ns 世界/n 唯一/b 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/n/b/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 132：阿拉伯世界唯一的岛屿是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 阿拉伯世界唯一的岛屿是什么
Question 候选答案：
巴林  1.0
国家  0.6840817471487128
巴林国  0.6439889856644255
城市  0.3902113215975128
之国  0.2535078202699638
迪拜  0.16473779624444437
阿联酋  0.16453866387220917
阿拉伯联合酋长国  0.1437507942067082
卡塔尔  0.1216043452538836
岛国  0.11698361085661946
波斯湾  0.11663183517071715
沙特阿拉伯  0.11657228445554954
阿拉伯海  0.1164066060548449
南海  0.11640411909163519
红海  0.1163812883792583
ExpectAnswerRank: 3

mrr: 112.71495726495726
perfectCount: 106
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 132

MRR：85.39011914011914%
回答完美率：80.3030303030303%
回答不完美率：15.151515151515152%
回答错误率：4.545454545454546%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:欧洲最大的岛屿是什么:大不列颠
Question:欧洲最大的岛屿是什么
ExpectAnswer:大不列颠
没有从数据库中查询到问题：欧洲最大的岛屿是什么
Question：欧洲最大的岛屿是什么 搜索到Evidence 9 条
将Question：欧洲最大的岛屿是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 欧洲最大的岛屿是什么
问题：欧洲最大的岛屿是什么
词和词性序列：欧洲/ns 最大/a 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：欧洲最大的岛屿是什么
分词结果为：欧洲 最大 的 岛屿 是 什么
句法树: 
句子依存关系：
	nn(岛屿-4, 欧洲-1)
	assmod(岛屿-4, 最大-2)
	assm(最大-2, 的-3)
	top(是-5, 岛屿-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：岛屿 是 什么
主谓宾词和词性序列：岛屿/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 欧洲最大的岛屿是什么 : 欧洲最大的岛屿是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 欧洲/ns 最大/a 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 岛屿/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【欧洲最大的岛屿是什么】匹配到多个模式：
序号：1
	问题 : 欧洲/ns 最大/a 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 欧洲最大的岛屿是什么
	模式 : 欧洲最大的岛屿是什么
	分类 : Location
序号：6
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 欧洲最大的岛屿是什么
	模式 : 欧洲最大的岛屿是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 欧洲/ns 最大/a 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 133：欧洲最大的岛屿是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 欧洲最大的岛屿是什么
Question 候选答案：
大不列颠  1.0
格陵兰岛  0.6921378739153935
大西洋  0.3089564086726344
英国  0.308898849663445
不列颠  0.1978427893876108
苏州  0.1936570445189257
英格兰  0.19361254865137065
苏格兰  0.19360525869077203
北大西洋  0.18902236158477514
北欧  0.18901459059969242
丹麦  0.1890076685457532
首府  0.18899733415519016
地方  0.11525511593352497
西临  0.1152447479342273
ExpectAnswerRank: 1

mrr: 113.71495726495726
perfectCount: 107
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 133

MRR：85.49996786838892%
回答完美率：80.45112781954887%
回答不完美率：15.037593984962406%
回答错误率：4.511278195488721%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最大的沙漠在哪:撒哈拉沙漠
Question:世界上最大的沙漠在哪
ExpectAnswer:撒哈拉沙漠
没有从数据库中查询到问题：世界上最大的沙漠在哪
Question：世界上最大的沙漠在哪 搜索到Evidence 9 条
将Question：世界上最大的沙漠在哪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上最大的沙漠在哪
问题：世界上最大的沙漠在哪
词和词性序列：世界/n 上/f 最大/a 的/uj 沙漠/ns 在哪/RW.RWLocationSingle 
词性序列：n/f/a/uj/ns/RW.RWLocationSingle
对问题进行分词：世界上最大的沙漠在哪
分词结果为：世界 上 最大 的 沙漠 在哪
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(在哪-6, 上-2)
	assmod(沙漠-5, 最大-3)
	assm(最大-3, 的-4)
	nsubj(在哪-6, 沙漠-5)
	root(ROOT-0, 在哪-6)
主谓宾：上 在哪 沙漠
主谓宾词和词性序列：上/f 在哪/RW.RWLocationSingle 沙漠/ns
主谓宾词性序列：f/RW.RWLocationSingle/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最大的沙漠在哪 : 世界上最大的沙漠在哪 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: f/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最大/a 的/uj 沙漠/ns 在哪/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/f/a/uj/ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 上/f 在哪/RW.RWLocationSingle 沙漠/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: f/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最大的沙漠在哪】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最大/a 的/uj 沙漠/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/a/uj/ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 上/f 在哪/RW.RWLocationSingle 沙漠/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : f/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 世界上最大的沙漠在哪
	模式 : 世界上最大的沙漠在哪
	分类 : Location
序号：6
	问题 : f/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最大的沙漠在哪
	模式 : 世界上最大的沙漠在哪
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : f/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最大/a 的/uj 沙漠/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/a/uj/ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 上/f 在哪/RW.RWLocationSingle 沙漠/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : f/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 134：世界上最大的沙漠在哪 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最大的沙漠在哪
Question 候选答案：
撒哈拉沙漠  1.0
非洲  0.5716347419641168
山脉  0.5351308451931703
地中海  0.4013307409599536
大西洋  0.4012313181202868
中国  0.3721275897666573
地图  0.2857806618727669
景点  0.19486344329553704
阿拉伯  0.18868413875384593
阿拉伯半岛  0.1886033193729519
区域  0.18854598074866533
塔克拉玛干沙漠  0.18850965760037397
南极洲  0.15853327284170673
地球  0.15815243498191806
地方  0.15811982786235765
北非  0.13393295548479894
南至  0.1337745100501061
苏丹  0.13377209554220063
ExpectAnswerRank: 1

mrr: 114.71495726495726
perfectCount: 108
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 134

MRR：85.60817706340094%
回答完美率：80.59701492537313%
回答不完美率：14.925373134328357%
回答错误率：4.477611940298507%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上人口最多的岛屿是什么:爪哇岛
Question:世界上人口最多的岛屿是什么
ExpectAnswer:爪哇岛
没有从数据库中查询到问题：世界上人口最多的岛屿是什么
Question：世界上人口最多的岛屿是什么 搜索到Evidence 9 条
将Question：世界上人口最多的岛屿是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上人口最多的岛屿是什么
问题：世界上人口最多的岛屿是什么
词和词性序列：世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上人口最多的岛屿是什么
分词结果为：世界 上 人口 最多 的 岛屿 是 什么
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(最多-4, 上-2)
	nsubj(最多-4, 人口-3)
	rcmod(岛屿-6, 最多-4)
	cpm(最多-4, 的-5)
	top(是-7, 岛屿-6)
	root(ROOT-0, 是-7)
	attr(是-7, 什么-8)
主谓宾：岛屿 是 什么
主谓宾词和词性序列：岛屿/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上人口最多的岛屿是什么 : 世界上人口最多的岛屿是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 岛屿/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上人口最多的岛屿是什么】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：8
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：9
	问题 : 世界上人口最多的岛屿是什么
	模式 : 世界上人口最多的岛屿是什么
	分类 : Location
序号：10
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：11
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上人口最多的岛屿是什么
	模式 : 世界上人口最多的岛屿是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 岛屿/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 世界/n 上/f 人口/N.NumberCountOfConcept 最多/d 的/uj 岛屿/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：8
	问题 : n/f/N.NumberCountOfConcept/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 135：世界上人口最多的岛屿是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上人口最多的岛屿是什么
Question 候选答案：
爪哇岛  1.0
印度尼西亚  0.5699401077067352
复活节岛  0.16292348157249426
秘鲁  0.15325287708388496
美国  0.14999281005420756
位置  0.1397123326404361
东南亚  0.13725807285854158
爪哇海  0.13724987201138703
群岛  0.13723594404946507
印度洋  0.13722949551314143
马来群岛  0.13722608085232155
地址  0.137211116256891
重庆  0.09258950992054074
城市  0.08937548176491959
ExpectAnswerRank: 1

mrr: 115.71495726495726
perfectCount: 109
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 135

MRR：85.71478315922761%
回答完美率：80.74074074074075%
回答不完美率：14.814814814814813%
回答错误率：4.444444444444445%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最大半岛是哪个:阿拉伯半岛
Question:世界上最大半岛是哪个
ExpectAnswer:阿拉伯半岛
没有从数据库中查询到问题：世界上最大半岛是哪个
Question：世界上最大半岛是哪个 搜索到Evidence 9 条
将Question：世界上最大半岛是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上最大半岛是哪个
问题：世界上最大半岛是哪个
词和词性序列：世界/n 上/f 最大/a 半岛/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：n/f/a/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最大半岛是哪个
分词结果为：世界 上 最大 半岛 是 哪个
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-5, 上-2)
	amod(半岛-4, 最大-3)
	top(是-5, 半岛-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪个-6)
主谓宾：半岛 是 哪个
主谓宾词和词性序列：半岛/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最大半岛是哪个 : 世界上最大半岛是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/a/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最大/a 半岛/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/a/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 半岛/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最大半岛是哪个】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最大/a 半岛/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 半岛/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上最大半岛是哪个
	模式 : 世界上最大半岛是哪个
	分类 : Location
序号：6
	问题 : n/f/a/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最大半岛是哪个
	模式 : 世界上最大半岛是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/a/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最大/a 半岛/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 半岛/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 136：世界上最大半岛是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最大半岛是哪个
Question 候选答案：
阿拉伯半岛  1.0
亚洲  0.5938142063415673
岛屿  0.4961206920373355
红海  0.4702090011692188
西和  0.3564778416325567
南和  0.35644513861570076
格陵兰岛  0.35163539514918546
湖泊  0.32113341512682775
珠穆朗玛峰  0.31963429590717507
里海  0.315833255523207
贝加尔湖  0.31571359323442894
群岛  0.3050664950827708
马来群岛  0.305000674671123
山峰  0.30483680673847874
大洲  0.23371413135461325
阿拉伯海  0.15498131665485254
波斯湾  0.15497373733143663
大陆  0.13950197704807207
保定  0.13220175755307806
拉伯  0.12401632064330251
非洲  0.12258251159738333
苏伊士运河  0.11379646030567235
印度洋  0.11375548460621236
中东  0.11372265311764063
海峡  0.11372149820570325
中国  0.11370696835200252
地区  0.11368906754231117
沙漠  0.11368262755764828
印度尼西亚  0.0827767487036657
阿拉伯  0.08191033883345857
国家  0.07756506832152395
沙特阿拉伯  0.07755640377399099
也门共和国  0.07754311407533827
台湾岛  0.07753933647109235
阿曼  0.07753337499904525
阿拉伯联合酋长国  0.0775294144841135
ExpectAnswerRank: 1

mrr: 116.71495726495726
perfectCount: 110
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 136

MRR：85.81982151835092%
回答完美率：80.88235294117648%
回答不完美率：14.705882352941178%
回答错误率：4.411764705882353%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上面积最大的淡水湖是哪个:苏必利尔湖
Question:世界上面积最大的淡水湖是哪个
ExpectAnswer:苏必利尔湖
没有从数据库中查询到问题：世界上面积最大的淡水湖是哪个
Question：世界上面积最大的淡水湖是哪个 搜索到Evidence 8 条
将Question：世界上面积最大的淡水湖是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界上面积最大的淡水湖是哪个
问题：世界上面积最大的淡水湖是哪个
词和词性序列：世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上面积最大的淡水湖是哪个
分词结果为：世界 上 面积 最大 的 淡水湖 是 哪个
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-7, 上-2)
	nn(淡水湖-6, 面积-3)
	assmod(淡水湖-6, 最大-4)
	assm(最大-4, 的-5)
	top(是-7, 淡水湖-6)
	root(ROOT-0, 是-7)
	attr(是-7, 哪个-8)
主谓宾：淡水湖 是 哪个
主谓宾词和词性序列：淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上面积最大的淡水湖是哪个 : 世界上面积最大的淡水湖是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上面积最大的淡水湖是哪个】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上面积最大的淡水湖是哪个
	模式 : 世界上面积最大的淡水湖是哪个
	分类 : Location
序号：6
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上面积最大的淡水湖是哪个
	模式 : 世界上面积最大的淡水湖是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 淡水湖/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 137：世界上面积最大的淡水湖是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上面积最大的淡水湖是哪个
Question 候选答案：
苏必利尔湖  1.0
五大湖  0.881093843426452
北美洲  0.6943570397720918
湖泊  0.5661607024730848
美国  0.49288322723460926
贝加尔湖  0.4633181491306604
里海  0.3021227334961339
地球  0.22854024282115437
中国  0.21080437720739212
北美  0.18742777927645182
大陆  0.18742666597991195
密执安  0.1874099364318404
休伦湖  0.18740864526302983
伊利湖  0.18740773836342417
安大略湖  0.1874069246558634
密歇根湖  0.15625060073352554
夏威夷州  0.15274605137051034
群岛  0.1527349896181528
加拿大  0.15273373018408637
太平洋  0.15273017087937
岛屿  0.15272389801724587
喀喀湖  0.11460336478649866
ExpectAnswerRank: 1

mrr: 117.71495726495726
perfectCount: 111
notPerfectCount: 20
wrongCount: 6
unknownTypeCount: 0
questionCount: 137

MRR：85.92332647077173%
回答完美率：81.02189781021897%
回答不完美率：14.5985401459854%
回答错误率：4.37956204379562%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上面积最大的湖是哪一个:里海
Question:世界上面积最大的湖是哪一个
ExpectAnswer:里海
没有从数据库中查询到问题：世界上面积最大的湖是哪一个
Question：世界上面积最大的湖是哪一个 搜索到Evidence 9 条
将Question：世界上面积最大的湖是哪一个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上面积最大的湖是哪一个
问题：世界上面积最大的湖是哪一个
词和词性序列：世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 湖/ns 是哪/RW.RWLocationSingle 一个/m 
词性序列：n/f/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
对问题进行分词：世界上面积最大的湖是哪一个
分词结果为：世界 上 面积 最大 的 湖 是哪 一个
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是哪-7, 上-2)
	nn(湖-6, 面积-3)
	assmod(湖-6, 最大-4)
	assm(最大-4, 的-5)
	nsubj(是哪-7, 湖-6)
	root(ROOT-0, 是哪-7)
	range(是哪-7, 一个-8)
主谓宾：上 是哪 一个
主谓宾词和词性序列：上/f 是哪/RW.RWLocationSingle 一个/m
主谓宾词性序列：f/RW.RWLocationSingle/m

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上面积最大的湖是哪一个 : 世界上面积最大的湖是哪一个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 湖/ns 是哪/RW.RWLocationSingle 一个/m  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/f/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 上/f 是哪/RW.RWLocationSingle 一个/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: f/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上面积最大的湖是哪一个】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 湖/ns 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 上/f 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : f/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 世界上面积最大的湖是哪一个
	模式 : 世界上面积最大的湖是哪一个
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上面积最大的湖是哪一个
	模式 : 世界上面积最大的湖是哪一个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 面积/N.NumberAreaOfConcept 最大/a 的/uj 湖/ns 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 上/f 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : f/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 138：世界上面积最大的湖是哪一个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上面积最大的湖是哪一个
Question 候选答案：
淡水湖  1.0
苏必利尔湖  0.7505677138039281
五大湖  0.7408731508359899
湖泊  0.6624461573514383
北美洲  0.582604532023522
里海  0.4847543918413652
贝加尔湖  0.3358360962377092
美国  0.28417178069268606
亚洲  0.22380889660108036
洞庭湖  0.22370129123900614
黑海  0.21894429752805802
地球  0.20040445516502722
中国  0.1869008864674632
北美  0.15837489396594925
大陆  0.15837381207845996
密执安  0.15835373460418162
休伦湖  0.15835147851299627
伊利湖  0.15834953944072727
安大略湖  0.15834781284255586
中亚  0.13975876910175405
欧洲  0.13975273963211032
高加索  0.1397442471766246
山脉  0.1397419206106517
加拿大  0.12581687046636192
ExpectAnswerRank: 6

mrr: 117.88162393162393
perfectCount: 111
notPerfectCount: 21
wrongCount: 6
unknownTypeCount: 0
questionCount: 138

MRR：85.4214666171188%
回答完美率：80.43478260869566%
回答不完美率：15.217391304347828%
回答错误率：4.3478260869565215%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:黑龙江的省会是哪个城市:哈尔滨
Question:黑龙江的省会是哪个城市
ExpectAnswer:哈尔滨
没有从数据库中查询到问题：黑龙江的省会是哪个城市
Question：黑龙江的省会是哪个城市 搜索到Evidence 8 条
将Question：黑龙江的省会是哪个城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 黑龙江的省会是哪个城市
问题：黑龙江的省会是哪个城市
词和词性序列：黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
词性序列：ns/uj/ns/v/RW.RWOrdinarySingle/ns
对问题进行分词：黑龙江的省会是哪个城市
分词结果为：黑龙江 的 省会 是 哪个 城市
句法树: 
句子依存关系：
	assmod(省会-3, 黑龙江-1)
	assm(黑龙江-1, 的-2)
	top(是-4, 省会-3)
	root(ROOT-0, 是-4)
	det(城市-6, 哪个-5)
	attr(是-4, 城市-6)
主谓宾：省会 是 城市
主谓宾词和词性序列：省会/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 黑龙江的省会是哪个城市 : 黑龙江的省会是哪个城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【黑龙江的省会是哪个城市】匹配到多个模式：
序号：1
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 黑龙江的省会是哪个城市
	模式 : 黑龙江的省会是哪个城市
	分类 : Location
序号：8
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 黑龙江的省会是哪个城市
	模式 : 黑龙江的省会是哪个城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 黑龙江/ns 的/uj 省会/ns 是/v 哪个/RW.RWOrdinarySingle 城市/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 139：黑龙江的省会是哪个城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 黑龙江的省会是哪个城市
Question 候选答案：
哈尔滨  1.0
中国  0.5766494877026083
黑龙江省  0.5723330616708944
鸡西  0.1312219193801427
大庆  0.1311676975852223
齐齐哈尔  0.13116470301129585
直辖市  0.13115992326549536
基地  0.12506794371833807
亚洲  0.11321291940585695
我国  0.10142101137958943
特大城市  0.09532861202034225
齐齐哈尔市  0.08430166885800941
嫩江  0.07158175798326195
松江省  0.07152763402527079
松花江  0.07152117734600238
绥宁  0.07150414522194178
ExpectAnswerRank: 1

mrr: 118.88162393162393
perfectCount: 112
notPerfectCount: 21
wrongCount: 6
unknownTypeCount: 0
questionCount: 139

MRR：85.52634815224744%
回答完美率：80.57553956834532%
回答不完美率：15.107913669064748%
回答错误率：4.316546762589928%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:江西省的省会是哪个城市:南昌
Question:江西省的省会是哪个城市
ExpectAnswer:南昌
没有从数据库中查询到问题：江西省的省会是哪个城市
搜索出错
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.7.0_45]
	at java.net.SocketInputStream.read(SocketInputStream.java:152) ~[na:1.7.0_45]
	at java.net.SocketInputStream.read(SocketInputStream.java:122) ~[na:1.7.0_45]
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:235) ~[na:1.7.0_45]
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:275) ~[na:1.7.0_45]
	at java.io.BufferedInputStream.read(BufferedInputStream.java:334) ~[na:1.7.0_45]
	at sun.net.www.http.ChunkedInputStream.readAheadBlocking(ChunkedInputStream.java:552) ~[na:1.7.0_45]
	at sun.net.www.http.ChunkedInputStream.readAhead(ChunkedInputStream.java:609) ~[na:1.7.0_45]
	at sun.net.www.http.ChunkedInputStream.read(ChunkedInputStream.java:696) ~[na:1.7.0_45]
	at java.io.FilterInputStream.read(FilterInputStream.java:133) ~[na:1.7.0_45]
	at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3053) ~[na:1.7.0_45]
	at java.util.zip.InflaterInputStream.fill(InflaterInputStream.java:238) ~[na:1.7.0_45]
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158) ~[na:1.7.0_45]
	at java.util.zip.GZIPInputStream.read(GZIPInputStream.java:116) ~[na:1.7.0_45]
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:273) ~[na:1.7.0_45]
	at java.io.BufferedInputStream.read(BufferedInputStream.java:334) ~[na:1.7.0_45]
	at java.io.FilterInputStream.read(FilterInputStream.java:107) ~[na:1.7.0_45]
	at org.jsoup.helper.DataUtil.readToByteBuffer(DataUtil.java:124) ~[jsoup-1.7.2.jar:na]
	at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:464) ~[jsoup-1.7.2.jar:na]
	at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:410) ~[jsoup-1.7.2.jar:na]
	at org.jsoup.helper.HttpConnection.execute(HttpConnection.java:164) ~[jsoup-1.7.2.jar:na]
	at org.jsoup.helper.HttpConnection.get(HttpConnection.java:153) ~[jsoup-1.7.2.jar:na]
	at org.apdplat.qa.datasource.BaiduDataSource.searchBaidu(BaiduDataSource.java:226) [classes/:na]
	at org.apdplat.qa.datasource.BaiduDataSource.getAndAnswerQuestion(BaiduDataSource.java:189) [classes/:na]
	at org.apdplat.qa.datasource.BaiduDataSource.getQuestion(BaiduDataSource.java:82) [classes/:na]
	at org.apdplat.qa.datasource.BaiduDataSource.getAndAnswerQuestions(BaiduDataSource.java:127) [classes/:na]
	at org.apdplat.qa.system.QuestionAnsweringSystemImpl.answerQuestions(QuestionAnsweringSystemImpl.java:165) [classes/:na]
	at org.apdplat.qa.BaiduDemo.main(BaiduDemo.java:53) [classes/:na]
结果页 1 没有搜索到结果
Question：江西省的省会是哪个城市 搜索到Evidence 0 条
从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:卢浮宫在哪座城市:巴黎
Question:卢浮宫在哪座城市
ExpectAnswer:巴黎
没有从数据库中查询到问题：卢浮宫在哪座城市
Question：卢浮宫在哪座城市 搜索到Evidence 9 条
将Question：卢浮宫在哪座城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 卢浮宫在哪座城市
问题：卢浮宫在哪座城市
词和词性序列：卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns 
词性序列：ns/p/RW.RWLocationSingle/ns
对问题进行分词：卢浮宫在哪座城市
分词结果为：卢浮宫 在 哪座 城市
句法树: 
句子依存关系：
	root(ROOT-0, 卢浮宫-1)
	prep(卢浮宫-1, 在-2)
	nn(城市-4, 哪座-3)
	pobj(在-2, 城市-4)
主谓宾：卢浮宫 在 城市
主谓宾词和词性序列：卢浮宫/ns 在/p 城市/ns
主谓宾词性序列：ns/p/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 卢浮宫在哪座城市 : 卢浮宫在哪座城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/p/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/p/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns  : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single6
匹配成功: ns/p/RW.RWLocationSingle/ns : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【卢浮宫在哪座城市】匹配到多个模式：
序号：1
	问题 : 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：4
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：5
	问题 : 卢浮宫在哪座城市
	模式 : 卢浮宫在哪座城市
	分类 : Location
序号：6
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 卢浮宫在哪座城市
	模式 : 卢浮宫在哪座城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 卢浮宫/ns 在/p 哪座/RW.RWLocationSingle 城市/ns 
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：4
	问题 : ns/p/RW.RWLocationSingle/ns
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 140：卢浮宫在哪座城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 卢浮宫在哪座城市
Question 候选答案：
博物馆  1.0
巴黎  0.5364748166452332
法国巴黎  0.29796246164568146
河北  0.28420902234877726
罗浮宫  0.07845821106226447
区域  0.06840912305600776
建筑  0.06808650766949997
塞纳河  0.06160126712145287
欧洲  0.061357309543812154
湖北  0.061090092140578985
法国  0.06103946536389937
朗斯  0.061037071262477934
海峡  0.06102604679828359
ExpectAnswerRank: 2

mrr: 119.38162393162393
perfectCount: 112
notPerfectCount: 22
wrongCount: 6
unknownTypeCount: 0
questionCount: 140

MRR：85.27258852258852%
回答完美率：80.0%
回答不完美率：15.714285714285714%
回答错误率：4.285714285714286%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:哪个城市被称为“国际会议之都”:日内瓦
Question:哪个城市被称为“国际会议之都”
ExpectAnswer:日内瓦
没有从数据库中查询到问题：哪个城市被称为“国际会议之都”
Question：哪个城市被称为“国际会议之都” 搜索到Evidence 10 条
将Question：哪个城市被称为“国际会议之都” 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪个城市被称为“国际会议之都”
问题：哪个城市被称为“国际会议之都”
词和词性序列：哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
词性序列：RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
对问题进行分词：哪个城市被称为“国际会议之都”
分词结果为：哪个 城市 被 称为 国际 会议 之 都
句法树: 
句子依存关系：
	det(城市-2, 哪个-1)
	nsubjpass(称为-4, 城市-2)
	pass(称为-4, 被-3)
	root(ROOT-0, 称为-4)
	nn(会议-6, 国际-5)
	assmod(都-8, 会议-6)
	assm(会议-6, 之-7)
	dobj(称为-4, 都-8)
主谓宾：城市 称为 都
主谓宾词和词性序列：城市/ns 称为/v 都/d
主谓宾词性序列：ns/v/d

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个城市被称为“国际会议之都” : 哪个城市被称为“国际会议之都” : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d  : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d : .*(N.ObjectEvent).* : ObjectSOB->Event2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d  : .*(V).*(N.ObjectEvent).* : Object->Event5
匹配成功: RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d : .*(V).*(N.ObjectEvent).* : Object->Event5
匹配成功: 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d  : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).* : Object->Event6
匹配成功: RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).* : Object->Event6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个城市被称为“国际会议之都”】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(V).*(N.ObjectEvent).*
	分类 : Object->Event5
序号：4
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(V).*(N.ObjectEvent).*
	分类 : Object->Event5
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).*
	分类 : Object->Event6
序号：6
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).*
	分类 : Object->Event6
序号：7
	问题 : 哪个城市被称为“国际会议之都”
	模式 : 哪个城市被称为“国际会议之都”
	分类 : Location
序号：8
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：10
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个城市被称为“国际会议之都”
	模式 : 哪个城市被称为“国际会议之都”
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：3
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(V).*(N.ObjectEvent).*
	分类 : Object->Event5
序号：4
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(V).*(N.ObjectEvent).*
	分类 : Object->Event5
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 被/p 称为/v 国际/n 会议/N.ObjectEvent 之/u 都/d 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).*
	分类 : Object->Event6
序号：6
	问题 : RW.RWOrdinarySingle/ns/p/v/n/N.ObjectEvent/u/d
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectEvent).*
	分类 : Object->Event6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 141：哪个城市被称为“国际会议之都” 【问题类型：LOCATION_NAME】
************************************
************************************
Question 哪个城市被称为“国际会议之都”
Question 候选答案：
日内瓦  1.0
瑞士  0.9283778373967163
大都市  0.23050545223622107
上海  0.1951232687731894
澳大利亚  0.1714224426229351
首府  0.14779237413231133
国家  0.1359952373212085
大城市  0.12415048381569756
总部  0.12411982019225548
ExpectAnswerRank: 1

mrr: 120.38162393162393
perfectCount: 113
notPerfectCount: 22
wrongCount: 6
unknownTypeCount: 0
questionCount: 141

MRR：85.37703824937867%
回答完美率：80.1418439716312%
回答不完美率：15.602836879432624%
回答错误率：4.25531914893617%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最深的湖泊是什么:贝加尔湖
Question:世界上最深的湖泊是什么
ExpectAnswer:贝加尔湖
没有从数据库中查询到问题：世界上最深的湖泊是什么
Question：世界上最深的湖泊是什么 搜索到Evidence 9 条
将Question：世界上最深的湖泊是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上最深的湖泊是什么
问题：世界上最深的湖泊是什么
词和词性序列：世界/n 上/f 最深/d 的/uj 湖泊/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/f/d/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最深的湖泊是什么
分词结果为：世界 上 最深 的 湖泊 是 什么
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-6, 上-2)
	assmod(湖泊-5, 最深-3)
	assm(最深-3, 的-4)
	top(是-6, 湖泊-5)
	root(ROOT-0, 是-6)
	attr(是-6, 什么-7)
主谓宾：湖泊 是 什么
主谓宾词和词性序列：湖泊/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最深的湖泊是什么 : 世界上最深的湖泊是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最深/d 的/uj 湖泊/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 湖泊/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最深的湖泊是什么】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最深/d 的/uj 湖泊/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 湖泊/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上最深的湖泊是什么
	模式 : 世界上最深的湖泊是什么
	分类 : Location
序号：6
	问题 : n/f/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最深的湖泊是什么
	模式 : 世界上最深的湖泊是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最深/d 的/uj 湖泊/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 湖泊/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 142：世界上最深的湖泊是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最深的湖泊是什么
Question 候选答案：
贝加尔湖  1.0
俄罗斯  0.7367681765429381
西伯利亚  0.4090002848650523
苏必利尔湖  0.16734229286210708
坦噶尼喀湖  0.161937963935756
网站  0.11512784859278152
北美  0.09812772735174656
大奴湖  0.09811534701111241
布隆迪  0.097982807648268
南至  0.09798012059197782
赞比亚  0.09797888774419171
ExpectAnswerRank: 1

mrr: 121.38162393162393
perfectCount: 114
notPerfectCount: 22
wrongCount: 6
unknownTypeCount: 0
questionCount: 142

MRR：85.48001685325629%
回答完美率：80.28169014084507%
回答不完美率：15.492957746478872%
回答错误率：4.225352112676056%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:苏格兰属于哪个洲:欧洲
Question:苏格兰属于哪个洲
ExpectAnswer:欧洲
没有从数据库中查询到问题：苏格兰属于哪个洲
Question：苏格兰属于哪个洲 搜索到Evidence 9 条
将Question：苏格兰属于哪个洲 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 苏格兰属于哪个洲
问题：苏格兰属于哪个洲
词和词性序列：苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
词性序列：ns/v/RW.RWOrdinarySingle/ns
对问题进行分词：苏格兰属于哪个洲
分词结果为：苏格兰 属于 哪个 洲
句法树: 
句子依存关系：
	nsubj(属于-2, 苏格兰-1)
	root(ROOT-0, 属于-2)
	det(洲-4, 哪个-3)
	dobj(属于-2, 洲-4)
主谓宾：苏格兰 属于 洲
主谓宾词和词性序列：苏格兰/ns 属于/v 洲/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 苏格兰属于哪个洲 : 苏格兰属于哪个洲 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【苏格兰属于哪个洲】匹配到多个模式：
序号：1
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 苏格兰属于哪个洲
	模式 : 苏格兰属于哪个洲
	分类 : Location
序号：8
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 苏格兰属于哪个洲
	模式 : 苏格兰属于哪个洲
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 苏格兰/ns 属于/v 哪个/RW.RWOrdinarySingle 洲/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 143：苏格兰属于哪个洲 【问题类型：LOCATION_NAME】
************************************
************************************
Question 苏格兰属于哪个洲
Question 候选答案：
英国  1.0
欧洲  0.5439117648654005
北爱尔兰  0.5146870819334621
英格兰  0.5052217125563097
威尔士  0.5049701255770985
大不列颠  0.4074749680101572
爱尔兰岛  0.2908514725251192
大洋洲  0.27205106426843934
大不列颠及北爱尔兰联合王国  0.21470863253816094
北京  0.1874621209984499
亚洲  0.1745300178675861
旅游指南  0.16489462962752152
堪培拉  0.13607539001686497
斐济  0.13603373660975318
悉尼  0.1360269375767388
澳大利亚  0.13596614588753422
新西兰  0.13595473167330074
地区  0.1166259786948089
大陆  0.11632099191457046
不列颠  0.11631187294598994
国家  0.08767226243400775
ExpectAnswerRank: 2

mrr: 121.88162393162393
perfectCount: 114
notPerfectCount: 23
wrongCount: 6
unknownTypeCount: 0
questionCount: 143

MRR：85.23190484728946%
回答完美率：79.72027972027972%
回答不完美率：16.083916083916083%
回答错误率：4.195804195804196%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最大的岛屿叫什么:格陵兰岛
Question:世界上最大的岛屿叫什么
ExpectAnswer:格陵兰岛
没有从数据库中查询到问题：世界上最大的岛屿叫什么
Question：世界上最大的岛屿叫什么 搜索到Evidence 8 条
将Question：世界上最大的岛屿叫什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界上最大的岛屿叫什么
问题：世界上最大的岛屿叫什么
词和词性序列：世界/n 上/f 最大/a 的/uj 岛屿/ns 叫/v 什么/RW.RWOrdinarySingle 
词性序列：n/f/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最大的岛屿叫什么
分词结果为：世界 上 最大 的 岛屿 叫 什么
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(叫-6, 上-2)
	assmod(岛屿-5, 最大-3)
	assm(最大-3, 的-4)
	nsubj(叫-6, 岛屿-5)
	root(ROOT-0, 叫-6)
	dobj(叫-6, 什么-7)
主谓宾：上 叫 什么
主谓宾词和词性序列：上/f 叫/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：f/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最大的岛屿叫什么 : 世界上最大的岛屿叫什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最大/a 的/uj 岛屿/ns 叫/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最大的岛屿叫什么】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最大/a 的/uj 岛屿/ns 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 世界上最大的岛屿叫什么
	模式 : 世界上最大的岛屿叫什么
	分类 : Location
序号：4
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最大的岛屿叫什么
	模式 : 世界上最大的岛屿叫什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最大/a 的/uj 岛屿/ns 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 144：世界上最大的岛屿叫什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最大的岛屿叫什么
Question 候选答案：
格陵兰岛  1.0
大陆  0.8460445640881522
地球  0.8281655703443782
澳大利亚  0.4407269105430275
北美洲  0.4166465568969042
北冰洋  0.4165788919044145
大西洋  0.41656045401177444
半岛  0.35464176406554243
海洋  0.34895494547738626
非洲  0.3489377291107627
大洲  0.2645636888371623
大洋  0.26455491240793994
冰岛  0.20261802824877181
澳洲  0.18574445991951166
最高点  0.18574005442655142
ExpectAnswerRank: 1

mrr: 122.88162393162393
perfectCount: 115
notPerfectCount: 23
wrongCount: 6
unknownTypeCount: 0
questionCount: 144

MRR：85.33446106362773%
回答完美率：79.86111111111111%
回答不完美率：15.972222222222221%
回答错误率：4.166666666666666%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:阿尔卑斯山脉的最高峰是什么:勃朗峰
Question:阿尔卑斯山脉的最高峰是什么
ExpectAnswer:勃朗峰
没有从数据库中查询到问题：阿尔卑斯山脉的最高峰是什么
Question：阿尔卑斯山脉的最高峰是什么 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 阿尔卑斯山脉的最高峰是什么
问题：阿尔卑斯山脉的最高峰是什么
词和词性序列：阿尔卑斯山脉/ns 的/uj 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：阿尔卑斯山脉的最高峰是什么
分词结果为：阿尔卑斯山脉 的 最高峰 是 什么
句法树: 
句子依存关系：
	assmod(最高峰-3, 阿尔卑斯山脉-1)
	assm(阿尔卑斯山脉-1, 的-2)
	top(是-4, 最高峰-3)
	root(ROOT-0, 是-4)
	attr(是-4, 什么-5)
主谓宾：最高峰 是 什么
主谓宾词和词性序列：最高峰/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 阿尔卑斯山脉的最高峰是什么 : 阿尔卑斯山脉的最高峰是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 阿尔卑斯山脉/ns 的/uj 最高峰/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 最高峰/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【阿尔卑斯山脉的最高峰是什么】匹配到多个模式：
序号：1
	问题 : 阿尔卑斯山脉/ns 的/uj 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 阿尔卑斯山脉的最高峰是什么
	模式 : 阿尔卑斯山脉的最高峰是什么
	分类 : Location
序号：6
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿尔卑斯山脉的最高峰是什么
	模式 : 阿尔卑斯山脉的最高峰是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿尔卑斯山脉/ns 的/uj 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 145：阿尔卑斯山脉的最高峰是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 阿尔卑斯山脉的最高峰是什么
Question 候选答案：
欧洲  1.0
高峰  0.9546732036016571
意大利  0.9196211517182624
法国  0.9195678179863819
瑞士  0.6176701001733195
阿尔卑斯山  0.23016512177352577
山脉  0.23007437565047556
奥地利  0.2299650670574901
德国  0.22993467729183759
匈牙利  0.22992158229647364
南斯拉夫  0.22990864766114258
国家  0.2299043339685599
西欧  0.2289283815129554
ExpectAnswerRank: -1

mrr: 122.88162393162393
perfectCount: 115
notPerfectCount: 23
wrongCount: 7
unknownTypeCount: 0
questionCount: 145

MRR：84.74594753905099%
回答完美率：79.3103448275862%
回答不完美率：15.862068965517242%
回答错误率：4.827586206896552%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:非洲最高峰是什么:乞力马扎罗山
Question:非洲最高峰是什么
ExpectAnswer:乞力马扎罗山
没有从数据库中查询到问题：非洲最高峰是什么
Question：非洲最高峰是什么 搜索到Evidence 9 条
将Question：非洲最高峰是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 非洲最高峰是什么
问题：非洲最高峰是什么
词和词性序列：非洲/ns 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/ns/v/RW.RWOrdinarySingle
对问题进行分词：非洲最高峰是什么
分词结果为：非洲 最高峰 是 什么
句法树: 
句子依存关系：
	nn(最高峰-2, 非洲-1)
	top(是-3, 最高峰-2)
	root(ROOT-0, 是-3)
	attr(是-3, 什么-4)
主谓宾：最高峰 是 什么
主谓宾词和词性序列：最高峰/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 非洲最高峰是什么 : 非洲最高峰是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 非洲/ns 最高峰/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 最高峰/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【非洲最高峰是什么】匹配到多个模式：
序号：1
	问题 : 非洲/ns 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 非洲最高峰是什么
	模式 : 非洲最高峰是什么
	分类 : Location
序号：6
	问题 : ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 非洲最高峰是什么
	模式 : 非洲最高峰是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 非洲/ns 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 146：非洲最高峰是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 非洲最高峰是什么
Question 候选答案：
乞力马扎罗山  1.0
坦桑尼亚  0.41502118664478094
珠穆朗玛峰  0.19841364113443352
阿尔卑斯山  0.18569250938133003
山峰  0.1852036533249423
肯亚  0.18500179075026135
罗山  0.17368502463906949
七大洲  0.12775814098547272
高峰  0.09280912814482654
ExpectAnswerRank: 1

mrr: 123.88162393162393
perfectCount: 116
notPerfectCount: 23
wrongCount: 7
unknownTypeCount: 0
questionCount: 146

MRR：84.85042735042735%
回答完美率：79.45205479452055%
回答不完美率：15.753424657534246%
回答错误率：4.794520547945205%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最长的山脉是哪个:安第斯山脉
Question:世界上最长的山脉是哪个
ExpectAnswer:安第斯山脉
没有从数据库中查询到问题：世界上最长的山脉是哪个
Question：世界上最长的山脉是哪个 搜索到Evidence 9 条
将Question：世界上最长的山脉是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上最长的山脉是哪个
问题：世界上最长的山脉是哪个
词和词性序列：世界/n 上/f 最长/a 的/uj 山脉/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：n/f/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最长的山脉是哪个
分词结果为：世界 上 最长 的 山脉 是 哪个
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-6, 上-2)
	assmod(山脉-5, 最长-3)
	assm(最长-3, 的-4)
	top(是-6, 山脉-5)
	root(ROOT-0, 是-6)
	attr(是-6, 哪个-7)
主谓宾：山脉 是 哪个
主谓宾词和词性序列：山脉/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最长的山脉是哪个 : 世界上最长的山脉是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最长/a 的/uj 山脉/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 山脉/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最长的山脉是哪个】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最长/a 的/uj 山脉/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 山脉/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上最长的山脉是哪个
	模式 : 世界上最长的山脉是哪个
	分类 : Location
序号：6
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最长的山脉是哪个
	模式 : 世界上最长的山脉是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最长/a 的/uj 山脉/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 山脉/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 147：世界上最长的山脉是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最长的山脉是哪个
Question 候选答案：
安第斯山脉  1.0
南美洲  0.6761110479764947
大陆  0.3580443894916623
亚洲  0.2806024936399892
大洲  0.27766372629225244
太平洋  0.2369011456102486
南美  0.23649285782420518
喜马拉雅山脉  0.13606807303913454
地区  0.11846887741165697
加勒比  0.11496078309896711
七国  0.1115223785392337
智利  0.07320594047917552
ExpectAnswerRank: 1

mrr: 124.88162393162393
perfectCount: 117
notPerfectCount: 23
wrongCount: 7
unknownTypeCount: 0
questionCount: 147

MRR：84.95348566777139%
回答完美率：79.59183673469387%
回答不完美率：15.646258503401361%
回答错误率：4.761904761904762%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最高的山峰叫什么:喜马拉雅山脉
Question:世界上最高的山峰叫什么
ExpectAnswer:喜马拉雅山脉
没有从数据库中查询到问题：世界上最高的山峰叫什么
Question：世界上最高的山峰叫什么 搜索到Evidence 9 条
将Question：世界上最高的山峰叫什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上最高的山峰叫什么
问题：世界上最高的山峰叫什么
词和词性序列：世界/n 上/f 最高/a 的/uj 山峰/ns 叫/v 什么/RW.RWOrdinarySingle 
词性序列：n/f/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最高的山峰叫什么
分词结果为：世界 上 最高 的 山峰 叫 什么
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(叫-6, 上-2)
	assmod(山峰-5, 最高-3)
	assm(最高-3, 的-4)
	nsubj(叫-6, 山峰-5)
	root(ROOT-0, 叫-6)
	dobj(叫-6, 什么-7)
主谓宾：上 叫 什么
主谓宾词和词性序列：上/f 叫/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：f/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最高的山峰叫什么 : 世界上最高的山峰叫什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最高/a 的/uj 山峰/ns 叫/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最高的山峰叫什么】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最高/a 的/uj 山峰/ns 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 世界上最高的山峰叫什么
	模式 : 世界上最高的山峰叫什么
	分类 : Location
序号：4
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最高的山峰叫什么
	模式 : 世界上最高的山峰叫什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最高/a 的/uj 山峰/ns 叫/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 148：世界上最高的山峰叫什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最高的山峰叫什么
Question 候选答案：
珠穆朗玛峰  1.0
山脉  0.6348740112387566
高峰  0.6135035617412452
地球  0.4773492361209557
中国  0.4260953891565445
尼泊尔  0.42025833188166395
亚山  0.24443185480412527
夏威夷  0.23860532222435943
青藏高原  0.1988070992176317
印度  0.19878191571450085
不丹  0.19877812482043014
锡金  0.19877093229219334
喜马拉雅山  0.0852951789735471
狼牙山  0.0852605466819485
ExpectAnswerRank: -1

mrr: 124.88162393162393
perfectCount: 117
notPerfectCount: 23
wrongCount: 8
unknownTypeCount: 0
questionCount: 148

MRR：84.37947562947564%
回答完美率：79.05405405405406%
回答不完美率：15.54054054054054%
回答错误率：5.405405405405405%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:哪个城市的电话区号是010:北京
Question:哪个城市的电话区号是010
ExpectAnswer:北京
没有从数据库中查询到问题：哪个城市的电话区号是010
Question：哪个城市的电话区号是010 搜索到Evidence 9 条
将Question：哪个城市的电话区号是010 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪个城市的电话区号是010
问题：哪个城市的电话区号是010
词和词性序列：哪个/RW.RWOrdinarySingle 城市/ns 的/uj 电话/N.NumberCodeOfConcept 区号/N.NumberCodeOfConcept 是/v 010/m 
词性序列：RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m
对问题进行分词：哪个城市的电话区号是010
分词结果为：哪个 城市 的 电话 区号 是 010
句法树: 
句子依存关系：
	det(城市-2, 哪个-1)
	assmod(区号-5, 城市-2)
	assm(城市-2, 的-3)
	nn(区号-5, 电话-4)
	top(是-6, 区号-5)
	root(ROOT-0, 是-6)
	attr(是-6, 010-7)
主谓宾：区号 是 010
主谓宾词和词性序列：区号/N.NumberCodeOfConcept 是/v 010/m
主谓宾词性序列：N.NumberCodeOfConcept/v/m

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个城市的电话区号是010 : 哪个城市的电话区号是010 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 电话/N.NumberCodeOfConcept 区号/N.NumberCodeOfConcept 是/v 010/m  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个城市的电话区号是010】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 电话/N.NumberCodeOfConcept 区号/N.NumberCodeOfConcept 是/v 010/m 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个城市的电话区号是010
	模式 : 哪个城市的电话区号是010
	分类 : Location
序号：4
	问题 : RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个城市的电话区号是010
	模式 : 哪个城市的电话区号是010
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 城市/ns 的/uj 电话/N.NumberCodeOfConcept 区号/N.NumberCodeOfConcept 是/v 010/m 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/ns/uj/N.NumberCodeOfConcept/N.NumberCodeOfConcept/v/m
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 149：哪个城市的电话区号是010 【问题类型：LOCATION_NAME】
************************************
************************************
Question 哪个城市的电话区号是010
Question 候选答案：
北京市  1.0
省份  0.7981417461651581
中国  0.6321256640266086
首都  0.4613527855753742
北京  0.39443320169868623
直辖市  0.39358363507871424
长沙  0.3484384996769741
地方  0.2810863166568178
大陆  0.28104435097640235
上海市  0.22491800012204635
天津市  0.22484385326640258
重庆市  0.22480474598585806
河北省  0.22478058748925694
石家庄市  0.22477284674437178
特区  0.21359301807474848
地区  0.21357992638792622
东城区  0.1836852024458732
中华人民共和国  0.18025987944338276
华北平原  0.17984881398706334
西城区  0.15820488252035647
崇文区  0.15789826212350536
宣武区  0.15774228963967046
朝阳区  0.1576447116719921
大城市  0.1469605546601291
上海  0.13547413741725586
天津  0.1352839642119614
重庆  0.13517841280162693
沈阳  0.1351111923863729
南京  0.13506460635500503
武汉  0.13503040871299668
成都  0.13500423399296138
西安  0.13498355348931387
广州  0.1349668006962793
ExpectAnswerRank: 5

mrr: 125.08162393162394
perfectCount: 117
notPerfectCount: 24
wrongCount: 8
unknownTypeCount: 0
questionCount: 149

MRR：83.94739861182815%
回答完美率：78.52348993288591%
回答不完美率：16.10738255033557%
回答错误率：5.369127516778524%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:哪座城市是乌干达的首都:坎帕拉
Question:哪座城市是乌干达的首都
ExpectAnswer:坎帕拉
没有从数据库中查询到问题：哪座城市是乌干达的首都
Question：哪座城市是乌干达的首都 搜索到Evidence 10 条
将Question：哪座城市是乌干达的首都 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪座城市是乌干达的首都
问题：哪座城市是乌干达的首都
词和词性序列：哪座/RW.RWLocationSingle 城市/ns 是/v 乌干达/ns 的/uj 首都/ns 
词性序列：RW.RWLocationSingle/ns/v/ns/uj/ns
对问题进行分词：哪座城市是乌干达的首都
分词结果为：哪座 城市 是 乌干达 的 首都
句法树: 
句子依存关系：
	nn(城市-2, 哪座-1)
	top(是-3, 城市-2)
	root(ROOT-0, 是-3)
	assmod(首都-6, 乌干达-4)
	assm(乌干达-4, 的-5)
	attr(是-3, 首都-6)
主谓宾：城市 是 首都
主谓宾词和词性序列：城市/ns 是/v 首都/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪座城市是乌干达的首都 : 哪座城市是乌干达的首都 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWLocationSingle/ns/v/ns/uj/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪座/RW.RWLocationSingle 城市/ns 是/v 乌干达/ns 的/uj 首都/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: RW.RWLocationSingle/ns/v/ns/uj/ns : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪座城市是乌干达的首都】匹配到多个模式：
序号：1
	问题 : 哪座/RW.RWLocationSingle 城市/ns 是/v 乌干达/ns 的/uj 首都/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : RW.RWLocationSingle/ns/v/ns/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 哪座城市是乌干达的首都
	模式 : 哪座城市是乌干达的首都
	分类 : Location
序号：4
	问题 : RW.RWLocationSingle/ns/v/ns/uj/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪座城市是乌干达的首都
	模式 : 哪座城市是乌干达的首都
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWLocationSingle/ns/v/ns/uj/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪座/RW.RWLocationSingle 城市/ns 是/v 乌干达/ns 的/uj 首都/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : RW.RWLocationSingle/ns/v/ns/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 150：哪座城市是乌干达的首都 【问题类型：LOCATION_NAME】
************************************
************************************
Question 哪座城市是乌干达的首都
Question 候选答案：
坎帕拉  1.0
巴西  0.9750434490114075
巴西利亚  0.888436142469047
澳大利亚  0.661595090275654
俄罗斯  0.5523843515567024
堪培拉  0.5232450230571803
莫斯科  0.4972236151129892
里约热内卢  0.49624221701866333
地区  0.49611164570552263
印度  0.4959521707877665
新德里  0.4959311694830924
德里  0.4958871381683753
圣彼得堡  0.4699469280865675
大都市  0.46986392735279575
美国  0.449524464017791
华盛顿  0.4457502650148146
丹麦  0.4221786622694709
楚国  0.42094955474623186
哥本哈根  0.3661374475945859
哥伦比亚特区  0.36574911629740003
美洲  0.3655289273893616
内陆地区  0.3655265315053788
哥伦布  0.3655050688152768
肯尼亚  0.3399463906471779
非洲  0.33971818648342544
大城市  0.3137585156019368
地方  0.3133878070390487
索马里  0.28735161763007966
布琼布拉  0.26179314466312464
布隆迪  0.26167390413439573
摩加迪沙  0.2614241790227743
ExpectAnswerRank: 1

mrr: 126.08162393162394
perfectCount: 118
notPerfectCount: 24
wrongCount: 8
unknownTypeCount: 0
questionCount: 150

MRR：84.05441595441596%
回答完美率：78.66666666666666%
回答不完美率：16.0%
回答错误率：5.333333333333334%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:大本钟在哪里:英国
Question:大本钟在哪里
ExpectAnswer:英国
没有从数据库中查询到问题：大本钟在哪里
Question：大本钟在哪里 搜索到Evidence 8 条
将Question：大本钟在哪里 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 大本钟在哪里
问题：大本钟在哪里
词和词性序列：大本钟/ns 在/p 哪里/RW.RWLocationSingle 
词性序列：ns/p/RW.RWLocationSingle
对问题进行分词：大本钟在哪里
分词结果为：大本钟 在 哪里
句法树: 
句子依存关系：
	root(ROOT-0, 大本钟-1)
	prep(大本钟-1, 在-2)
	pobj(在-2, 哪里-3)
主谓宾：大本钟 在 哪里
主谓宾词和词性序列：大本钟/ns 在/p 哪里/RW.RWLocationSingle
主谓宾词性序列：ns/p/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 大本钟在哪里 : 大本钟在哪里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 大本钟/ns 在/p 哪里/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 大本钟/ns 在/p 哪里/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【大本钟在哪里】匹配到多个模式：
序号：1
	问题 : 大本钟/ns 在/p 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大本钟/ns 在/p 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 大本钟在哪里
	模式 : 大本钟在哪里
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 大本钟在哪里
	模式 : 大本钟在哪里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 大本钟/ns 在/p 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大本钟/ns 在/p 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 151：大本钟在哪里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 大本钟在哪里
Question 候选答案：
伦敦  1.0
地图  0.3489847699170921
英国  0.32521216057987234
英国伦敦  0.3083776683645454
威斯敏斯特  0.243189870582889
北京  0.164821030989921
金字塔  0.1301310273346357
埃菲尔铁塔  0.13008294005243015
地方  0.12948905373961664
地址  0.12606670484009785
西敏寺  0.11354866232283321
旅游指南  0.0980146068093481
ExpectAnswerRank: 3

mrr: 126.41495726495727
perfectCount: 118
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 151

MRR：83.71851474500481%
回答完美率：78.1456953642384%
回答不完美率：16.55629139072848%
回答错误率：5.298013245033113%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:阿斯旺大坝是哪个国家的:埃及
Question:阿斯旺大坝是哪个国家的
ExpectAnswer:埃及
没有从数据库中查询到问题：阿斯旺大坝是哪个国家的
Question：阿斯旺大坝是哪个国家的 搜索到Evidence 9 条
将Question：阿斯旺大坝是哪个国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 阿斯旺大坝是哪个国家的
问题：阿斯旺大坝是哪个国家的
词和词性序列：阿斯旺/ns 大坝/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
词性序列：ns/ns/v/RW.RWLocationSingle/uj
对问题进行分词：阿斯旺大坝是哪个国家的
分词结果为：阿斯旺 大坝 是 哪个国家 的
句法树: 
句子依存关系：
	nn(大坝-2, 阿斯旺-1)
	top(是-3, 大坝-2)
	root(ROOT-0, 是-3)
	attr(是-3, 哪个国家-4)
	cpm(哪个国家-4, 的-5)
主谓宾：大坝 是 哪个国家
主谓宾词和词性序列：大坝/ns 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 阿斯旺大坝是哪个国家的 : 阿斯旺大坝是哪个国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 阿斯旺/ns 大坝/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/ns/v/RW.RWLocationSingle/uj : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 大坝/ns 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【阿斯旺大坝是哪个国家的】匹配到多个模式：
序号：1
	问题 : 阿斯旺/ns 大坝/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大坝/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 阿斯旺大坝是哪个国家的
	模式 : 阿斯旺大坝是哪个国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿斯旺大坝是哪个国家的
	模式 : 阿斯旺大坝是哪个国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 阿斯旺/ns 大坝/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大坝/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 152：阿斯旺大坝是哪个国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 阿斯旺大坝是哪个国家的
Question 候选答案：
埃及  1.0
国家  0.5163748443992141
我国  0.42169243601436635
河流  0.3715540595548546
中国  0.3713175628127167
尼罗河  0.2584763916938432
沙漠  0.1772385631864519
ExpectAnswerRank: 1

mrr: 127.41495726495727
perfectCount: 119
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 152

MRR：83.82562977957716%
回答完美率：78.28947368421053%
回答不完美率：16.447368421052634%
回答错误率：5.263157894736842%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:中国面积最大的省份是哪一个:新疆
Question:中国面积最大的省份是哪一个
ExpectAnswer:新疆
没有从数据库中查询到问题：中国面积最大的省份是哪一个
Question：中国面积最大的省份是哪一个 搜索到Evidence 9 条
将Question：中国面积最大的省份是哪一个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国面积最大的省份是哪一个
问题：中国面积最大的省份是哪一个
词和词性序列：中国/ns 面积/N.NumberAreaOfConcept 最大/a 的/uj 省份/ns 是哪/RW.RWLocationSingle 一个/m 
词性序列：ns/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
对问题进行分词：中国面积最大的省份是哪一个
分词结果为：中国 面积 最大 的 省份 是哪 一个
句法树: 
句子依存关系：
	nn(面积-2, 中国-1)
	nn(省份-5, 面积-2)
	assmod(省份-5, 最大-3)
	assm(最大-3, 的-4)
	nsubj(是哪-6, 省份-5)
	root(ROOT-0, 是哪-6)
	range(是哪-6, 一个-7)
主谓宾：省份 是哪 一个
主谓宾词和词性序列：省份/ns 是哪/RW.RWLocationSingle 一个/m
主谓宾词性序列：ns/RW.RWLocationSingle/m

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国面积最大的省份是哪一个 : 中国面积最大的省份是哪一个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 面积/N.NumberAreaOfConcept 最大/a 的/uj 省份/ns 是哪/RW.RWLocationSingle 一个/m  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 省份/ns 是哪/RW.RWLocationSingle 一个/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国面积最大的省份是哪一个】匹配到多个模式：
序号：1
	问题 : 中国/ns 面积/N.NumberAreaOfConcept 最大/a 的/uj 省份/ns 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 省份/ns 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 中国面积最大的省份是哪一个
	模式 : 中国面积最大的省份是哪一个
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国面积最大的省份是哪一个
	模式 : 中国面积最大的省份是哪一个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 面积/N.NumberAreaOfConcept 最大/a 的/uj 省份/ns 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/N.NumberAreaOfConcept/a/uj/ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 省份/ns 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 153：中国面积最大的省份是哪一个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 中国面积最大的省份是哪一个
Question 候选答案：
新疆  1.0
我国  0.7986262232162933
新疆维吾尔自治区  0.5289528678113318
西藏自治区  0.4021978815463999
内蒙古自治区  0.4021892590275626
四川省  0.28156451443100977
河南  0.2699954039812239
广东  0.2699835659470231
黑龙江  0.2699760808819301
河流  0.2699717509663688
青海  0.17246248701229297
海南省  0.1380937981899684
青海省  0.13220546917164316
海洋  0.12641377980697704
ExpectAnswerRank: 1

mrr: 128.41495726495725
perfectCount: 120
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 153

MRR：83.93134461761912%
回答完美率：78.43137254901961%
回答不完美率：16.33986928104575%
回答错误率：5.228758169934641%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:“冰城”是我国的哪一座城市:哈尔滨
Question:“冰城”是我国的哪一座城市
ExpectAnswer:哈尔滨
没有从数据库中查询到问题：“冰城”是我国的哪一座城市
Question：“冰城”是我国的哪一座城市 搜索到Evidence 10 条
将Question：“冰城”是我国的哪一座城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： “冰城”是我国的哪一座城市
问题：“冰城”是我国的哪一座城市
词和词性序列：冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns 
词性序列：ns/v/ns/uj/RW.RWLocationSingle/ns
对问题进行分词：“冰城”是我国的哪一座城市
分词结果为：冰城 是 我国 的 哪一座 城市
句法树: 
句子依存关系：
	advmod(是-2, 冰城-1)
	root(ROOT-0, 是-2)
	assmod(城市-6, 我国-3)
	assm(我国-3, 的-4)
	nummod(城市-6, 哪一座-5)
	attr(是-2, 城市-6)
主谓宾：冰城 是 城市
主谓宾词和词性序列：冰城/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: “冰城”是我国的哪一座城市 : “冰城”是我国的哪一座城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/ns/uj/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/ns/uj/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/v/ns/uj/RW.RWLocationSingle/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【“冰城”是我国的哪一座城市】匹配到多个模式：
序号：1
	问题 : 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : “冰城”是我国的哪一座城市
	模式 : “冰城”是我国的哪一座城市
	分类 : Location
序号：6
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : “冰城”是我国的哪一座城市
	模式 : “冰城”是我国的哪一座城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 冰城/ns 是/v 我国/ns 的/uj 哪一座/RW.RWLocationSingle 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/ns/uj/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 154：“冰城”是我国的哪一座城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question “冰城”是我国的哪一座城市
Question 候选答案：
哈尔滨  1.0
黑龙江省  0.24977064854693337
省会  0.17624121304960572
哈尔滨市  0.14680750253151192
东北地区  0.11020723492834784
中国  0.08799900661684798
松嫩平原  0.07342761583375701
松花江  0.07341598041710787
发源地  0.07334125005871886
亚布力  0.07333582882471473
ExpectAnswerRank: 1

mrr: 129.41495726495725
perfectCount: 121
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 154

MRR：84.03568653568652%
回答完美率：78.57142857142857%
回答不完美率：16.233766233766232%
回答错误率：5.194805194805195%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上流经国家最多的河流是哪个:多瑙河
Question:世界上流经国家最多的河流是哪个
ExpectAnswer:多瑙河
没有从数据库中查询到问题：世界上流经国家最多的河流是哪个
Question：世界上流经国家最多的河流是哪个 搜索到Evidence 8 条
将Question：世界上流经国家最多的河流是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界上流经国家最多的河流是哪个
问题：世界上流经国家最多的河流是哪个
词和词性序列：世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河流/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上流经国家最多的河流是哪个
分词结果为：世界 上 流经 国家 最多 的 河流 是 哪个
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-8, 上-2)
	rcmod(河流-7, 流经-3)
	dobj(流经-3, 国家-4)
	advmod(流经-3, 最多-5)
	cpm(流经-3, 的-6)
	top(是-8, 河流-7)
	root(ROOT-0, 是-8)
	attr(是-8, 哪个-9)
主谓宾：河流 是 哪个
主谓宾词和词性序列：河流/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上流经国家最多的河流是哪个 : 世界上流经国家最多的河流是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河流/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 河流/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上流经国家最多的河流是哪个】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河流/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 河流/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上流经国家最多的河流是哪个
	模式 : 世界上流经国家最多的河流是哪个
	分类 : Location
序号：6
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上流经国家最多的河流是哪个
	模式 : 世界上流经国家最多的河流是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河流/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 河流/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 155：世界上流经国家最多的河流是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上流经国家最多的河流是哪个
Question 候选答案：
多瑙河  1.0
欧洲  0.8790496355062737
伏尔加河  0.37063074813528335
奥地利  0.23731837456282898
斯洛伐克  0.23728845771551263
匈牙利  0.2372756151950825
克罗地亚  0.23726815527277328
保加利亚  0.23725409017775148
东南亚  0.23078706273057417
莱茵河  0.1656355877495764
捷克  0.15928165747989814
南斯拉夫  0.15925021992240493
罗马尼亚  0.15924397035497675
乌克兰  0.15924174038640582
尼罗河  0.13267792638899628
德国  0.07803071204052525
东坡  0.0780244956254926
塞尔维亚  0.07800907893561194
ExpectAnswerRank: 1

mrr: 130.41495726495725
perfectCount: 122
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 155

MRR：84.13868210642403%
回答完美率：78.70967741935485%
回答不完美率：16.129032258064516%
回答错误率：5.161290322580645%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上流经国家最多的河是哪一条:多瑙河
Question:世界上流经国家最多的河是哪一条
ExpectAnswer:多瑙河
没有从数据库中查询到问题：世界上流经国家最多的河是哪一条
Question：世界上流经国家最多的河是哪一条 搜索到Evidence 8 条
将Question：世界上流经国家最多的河是哪一条 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界上流经国家最多的河是哪一条
问题：世界上流经国家最多的河是哪一条
词和词性序列：世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河/ns 是/v 哪一条/RW.RWLocationSingle 
词性序列：n/f/v/ns/d/uj/ns/v/RW.RWLocationSingle
对问题进行分词：世界上流经国家最多的河是哪一条
分词结果为：世界 上 流经 国家 最多 的 河 是 哪一条
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-8, 上-2)
	rcmod(河-7, 流经-3)
	dobj(流经-3, 国家-4)
	advmod(流经-3, 最多-5)
	cpm(流经-3, 的-6)
	top(是-8, 河-7)
	root(ROOT-0, 是-8)
	attr(是-8, 哪一条-9)
主谓宾：河 是 哪一条
主谓宾词和词性序列：河/ns 是/v 哪一条/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上流经国家最多的河是哪一条 : 世界上流经国家最多的河是哪一条 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河/ns 是/v 哪一条/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/f/v/ns/d/uj/ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 河/ns 是/v 哪一条/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上流经国家最多的河是哪一条】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河/ns 是/v 哪一条/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 河/ns 是/v 哪一条/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 世界上流经国家最多的河是哪一条
	模式 : 世界上流经国家最多的河是哪一条
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上流经国家最多的河是哪一条
	模式 : 世界上流经国家最多的河是哪一条
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 流经/v 国家/ns 最多/d 的/uj 河/ns 是/v 哪一条/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/f/v/ns/d/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 河/ns 是/v 哪一条/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 156：世界上流经国家最多的河是哪一条 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上流经国家最多的河是哪一条
Question 候选答案：
多瑙河  1.0
奥地利  0.7106824135215003
河流  0.6471749303041593
欧洲  0.5118509725182419
捷克  0.4879311851286444
斯洛伐克  0.4879131577705129
匈牙利  0.4719832505706474
南斯拉夫  0.4719574113876709
保加利亚  0.47194864336023556
罗马尼亚  0.47194155690054335
伏尔加河  0.3765463684189465
克罗地亚  0.376521598757309
乌克兰  0.37648886800493825
德国  0.23865441182613045
中国  0.1693268133038498
大河  0.1643835006900164
位置  0.1272760463881221
莱茵河  0.12131905925040687
亚洲  0.11402105050323552
山东  0.11137552430101272
地方  0.11136924382008044
德意志联邦共和国  0.09545983628779041
黑林山  0.09545554606224799
捷克斯洛伐克  0.09545192428262345
苏联  0.09544683239310904
ExpectAnswerRank: 1

mrr: 131.41495726495725
perfectCount: 123
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 156

MRR：84.24035722112644%
回答完美率：78.84615384615384%
回答不完美率：16.025641025641026%
回答错误率：5.128205128205128%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上最长的河流是什么:尼罗河
Question:世界上最长的河流是什么
ExpectAnswer:尼罗河
没有从数据库中查询到问题：世界上最长的河流是什么
Question：世界上最长的河流是什么 搜索到Evidence 8 条
将Question：世界上最长的河流是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界上最长的河流是什么
问题：世界上最长的河流是什么
词和词性序列：世界/n 上/f 最长/a 的/uj 河流/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/f/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界上最长的河流是什么
分词结果为：世界 上 最长 的 河流 是 什么
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-6, 上-2)
	assmod(河流-5, 最长-3)
	assm(最长-3, 的-4)
	top(是-6, 河流-5)
	root(ROOT-0, 是-6)
	attr(是-6, 什么-7)
主谓宾：河流 是 什么
主谓宾词和词性序列：河流/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上最长的河流是什么 : 世界上最长的河流是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 上/f 最长/a 的/uj 河流/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/f/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 河流/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界上最长的河流是什么】匹配到多个模式：
序号：1
	问题 : 世界/n 上/f 最长/a 的/uj 河流/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 河流/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界上最长的河流是什么
	模式 : 世界上最长的河流是什么
	分类 : Location
序号：6
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上最长的河流是什么
	模式 : 世界上最长的河流是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 上/f 最长/a 的/uj 河流/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/f/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 河流/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 157：世界上最长的河流是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上最长的河流是什么
Question 候选答案：
尼罗河  1.0
非洲  0.7799444043853345
布隆迪  0.37244293736332335
卢旺达  0.35997434703982695
坦桑尼亚  0.35996185806141007
埃及  0.31042751309856353
亚马逊河  0.3047187924178958
乌干达  0.29794828849451865
苏丹  0.29794119843164796
峡谷  0.24660113375872517
中非地区  0.22970576498155518
西非地区  0.22966330509451646
尼日尔河  0.22965955213695957
雅鲁藏布  0.22787730259700775
大峡谷  0.2235848524013982
长江  0.2111038577847958
雅鲁藏布江  0.20478865867524818
东非  0.186208403541938
肯尼亚  0.17377659215208932
扎伊尔  0.17377075535167308
埃塞俄比亚  0.17376664546647408
国家  0.17376151080013608
中国  0.14296957331489468
非洲大陆  0.12418600587828448
撒哈拉沙漠  0.12416217121015986
地中海  0.12414944385979897
亚马孙河  0.09317007353965465
ExpectAnswerRank: 1

mrr: 132.41495726495725
perfectCount: 124
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 157

MRR：84.34073711143773%
回答完美率：78.98089171974523%
回答不完美率：15.92356687898089%
回答错误率：5.095541401273886%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:中国最长的运河是哪一条:京杭
Question:中国最长的运河是哪一条
ExpectAnswer:京杭
没有从数据库中查询到问题：中国最长的运河是哪一条
Question：中国最长的运河是哪一条 搜索到Evidence 9 条
将Question：中国最长的运河是哪一条 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国最长的运河是哪一条
问题：中国最长的运河是哪一条
词和词性序列：中国/ns 最长/a 的/uj 运河/ns 是/v 哪一条/RW.RWLocationSingle 
词性序列：ns/a/uj/ns/v/RW.RWLocationSingle
对问题进行分词：中国最长的运河是哪一条
分词结果为：中国 最长 的 运河 是 哪一条
句法树: 
句子依存关系：
	nn(最长-2, 中国-1)
	assmod(运河-4, 最长-2)
	assm(最长-2, 的-3)
	top(是-5, 运河-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪一条-6)
主谓宾：运河 是 哪一条
主谓宾词和词性序列：运河/ns 是/v 哪一条/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国最长的运河是哪一条 : 中国最长的运河是哪一条 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 最长/a 的/uj 运河/ns 是/v 哪一条/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/a/uj/ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 运河/ns 是/v 哪一条/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国最长的运河是哪一条】匹配到多个模式：
序号：1
	问题 : 中国/ns 最长/a 的/uj 运河/ns 是/v 哪一条/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/a/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 运河/ns 是/v 哪一条/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 中国最长的运河是哪一条
	模式 : 中国最长的运河是哪一条
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国最长的运河是哪一条
	模式 : 中国最长的运河是哪一条
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 最长/a 的/uj 运河/ns 是/v 哪一条/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/a/uj/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 运河/ns 是/v 哪一条/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 158：中国最长的运河是哪一条 【问题类型：LOCATION_NAME】
************************************
************************************
Question 中国最长的运河是哪一条
Question 候选答案：
京杭  1.0
首都  0.7597069913179412
洛阳  0.7596321041050432
长江  0.5700948102184668
黄河  0.5443834022272873
淮河  0.5443382418301597
我国  0.46867622392719266
巴拿马运河  0.443189826071699
长安  0.4431130471812446
北京  0.32931754410962555
ExpectAnswerRank: 1

mrr: 133.41495726495725
perfectCount: 125
notPerfectCount: 25
wrongCount: 8
unknownTypeCount: 0
questionCount: 158

MRR：84.4398463702261%
回答完美率：79.11392405063292%
回答不完美率：15.822784810126583%
回答错误率：5.063291139240507%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:故宫位于哪里:北京市
Question:故宫位于哪里
ExpectAnswer:北京市
没有从数据库中查询到问题：故宫位于哪里
Question：故宫位于哪里 搜索到Evidence 8 条
将Question：故宫位于哪里 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 故宫位于哪里
问题：故宫位于哪里
词和词性序列：故宫/ns 位于/v 哪里/RW.RWLocationSingle 
词性序列：ns/v/RW.RWLocationSingle
对问题进行分词：故宫位于哪里
分词结果为：故宫 位于 哪里
句法树: 
句子依存关系：
	nsubj(位于-2, 故宫-1)
	root(ROOT-0, 位于-2)
	dobj(位于-2, 哪里-3)
主谓宾：故宫 位于 哪里
主谓宾词和词性序列：故宫/ns 位于/v 哪里/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 故宫位于哪里 : 故宫位于哪里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 故宫/ns 位于/v 哪里/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 故宫/ns 位于/v 哪里/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【故宫位于哪里】匹配到多个模式：
序号：1
	问题 : 故宫/ns 位于/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 故宫/ns 位于/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 故宫位于哪里
	模式 : 故宫位于哪里
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 故宫位于哪里
	模式 : 故宫位于哪里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 故宫/ns 位于/v 哪里/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 故宫/ns 位于/v 哪里/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 159：故宫位于哪里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 故宫位于哪里
Question 候选答案：
北京  1.0
北京市  0.5982603142959967
中国  0.4623486885193228
北京故宫  0.4165095152573478
地方  0.3901717560680469
宁波  0.23598030817303664
山西  0.19410579523577398
皇宫  0.18035480197957113
建筑  0.18021149553461555
大宫  0.18004200801959694
法国  0.18000983566272996
通州  0.13870899457758584
东城区  0.12504614115909646
ExpectAnswerRank: 2

mrr: 133.91495726495725
perfectCount: 125
notPerfectCount: 26
wrongCount: 8
unknownTypeCount: 0
questionCount: 159

MRR：84.2232435628662%
回答完美率：78.61635220125787%
回答不完美率：16.352201257861633%
回答错误率：5.031446540880504%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:龙门石窟在哪个省:河南
Question:龙门石窟在哪个省
ExpectAnswer:河南
没有从数据库中查询到问题：龙门石窟在哪个省
Question：龙门石窟在哪个省 搜索到Evidence 8 条
将Question：龙门石窟在哪个省 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 龙门石窟在哪个省
问题：龙门石窟在哪个省
词和词性序列：龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
词性序列：ns/p/RW.RWOrdinarySingle/ns
对问题进行分词：龙门石窟在哪个省
分词结果为：龙门石窟 在 哪个 省
句法树: 
句子依存关系：
	root(ROOT-0, 龙门石窟-1)
	prep(龙门石窟-1, 在-2)
	det(省-4, 哪个-3)
	pobj(在-2, 省-4)
主谓宾：龙门石窟 在 省
主谓宾词和词性序列：龙门石窟/ns 在/p 省/ns
主谓宾词性序列：ns/p/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 龙门石窟在哪个省 : 龙门石窟在哪个省 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/p/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: ns/p/RW.RWOrdinarySingle/ns : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/p/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/p/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【龙门石窟在哪个省】匹配到多个模式：
序号：1
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 龙门石窟在哪个省
	模式 : 龙门石窟在哪个省
	分类 : Location
序号：8
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 龙门石窟在哪个省
	模式 : 龙门石窟在哪个省
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 龙门石窟/ns 在/p 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/p/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 160：龙门石窟在哪个省 【问题类型：LOCATION_NAME】
************************************
************************************
Question 龙门石窟在哪个省
Question 候选答案：
洛阳  1.0
河南  0.9567900979075382
河南省  0.931495443281628
省份  0.6251229158402346
洛阳市  0.5973309453853959
郑州  0.4728116123764385
郑州市  0.457901286916593
洛阳城  0.45405003067008987
峡谷  0.38440602813496133
城南  0.3697047691184983
伊河  0.3694647337828529
香山  0.36940495469855145
龙门山  0.3693930640442485
山上  0.3693658874519377
北京  0.3646276440647
旅游指南  0.31038574757319454
大同  0.20724140144604705
云岗石窟  0.2072025507751623
敦煌  0.20712656684679268
莫高窟  0.2071024013715692
我国  0.2070443448165029
北流  0.2068903970415025
中原  0.1931916549713286
国家  0.13488886668765723
中国  0.13455072397068435
ExpectAnswerRank: 2

mrr: 134.41495726495725
perfectCount: 125
notPerfectCount: 27
wrongCount: 8
unknownTypeCount: 0
questionCount: 160

MRR：84.00934829059828%
回答完美率：78.125%
回答不完美率：16.875%
回答错误率：5.0%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:鲁是我国哪个省份的简称:山东
Question:鲁是我国哪个省份的简称
ExpectAnswer:山东
没有从数据库中查询到问题：鲁是我国哪个省份的简称
Question：鲁是我国哪个省份的简称 搜索到Evidence 8 条
将Question：鲁是我国哪个省份的简称 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 鲁是我国哪个省份的简称
问题：鲁是我国哪个省份的简称
词和词性序列：鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
词性序列：n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
对问题进行分词：鲁是我国哪个省份的简称
分词结果为：鲁 是 我国 哪个 省份 的 简称
句法树: 
句子依存关系：
	top(是-2, 鲁-1)
	root(ROOT-0, 是-2)
	nn(省份-5, 我国-3)
	det(省份-5, 哪个-4)
	assmod(简称-7, 省份-5)
	assm(省份-5, 的-6)
	attr(是-2, 简称-7)
主谓宾：鲁 是 简称
主谓宾词和词性序列：鲁/n 是/v 简称/N.CONCEPT
主谓宾词性序列：n/v/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 鲁是我国哪个省份的简称 : 鲁是我国哪个省份的简称 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
匹配成功: 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
匹配成功: n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
匹配成功: n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【鲁是我国哪个省份的简称】匹配到多个模式：
序号：1
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：7
	问题 : 鲁是我国哪个省份的简称
	模式 : 鲁是我国哪个省份的简称
	分类 : Location
序号：8
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：9
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：10
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 鲁是我国哪个省份的简称
	模式 : 鲁是我国哪个省份的简称
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
序号：2
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：3
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : 鲁/n 是/v 我国/ns 哪个/RW.RWOrdinarySingle 省份/ns 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : n/v/ns/RW.RWOrdinarySingle/ns/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 161：鲁是我国哪个省份的简称 【问题类型：LOCATION_NAME】
************************************
************************************
Question 鲁是我国哪个省份的简称
Question 候选答案：
山东  1.0
山东省  0.28423997389592126
中国  0.26953135888709906
罗本  0.21300620420353622
鲁国  0.15301445554150803
北京市  0.08746597225725308
天津市  0.08745064383386708
ExpectAnswerRank: 1

mrr: 135.41495726495725
perfectCount: 126
notPerfectCount: 27
wrongCount: 8
unknownTypeCount: 0
questionCount: 161

MRR：84.1086691086691%
回答完美率：78.26086956521739%
回答不完美率：16.77018633540373%
回答错误率：4.968944099378882%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:尼亚加拉瀑布在加拿大的哪个省:安大略省
Question:尼亚加拉瀑布在加拿大的哪个省
ExpectAnswer:安大略省
没有从数据库中查询到问题：尼亚加拉瀑布在加拿大的哪个省
Question：尼亚加拉瀑布在加拿大的哪个省 搜索到Evidence 8 条
将Question：尼亚加拉瀑布在加拿大的哪个省 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 尼亚加拉瀑布在加拿大的哪个省
问题：尼亚加拉瀑布在加拿大的哪个省
词和词性序列：尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
词性序列：ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
对问题进行分词：尼亚加拉瀑布在加拿大的哪个省
分词结果为：尼亚加拉 瀑布 在 加拿大 的 哪个 省
句法树: 
句子依存关系：
	root(ROOT-0, 尼亚加拉-1)
	nn(省-7, 瀑布-2)
	assmod(省-7, 在-3)
	pobj(在-3, 加拿大-4)
	assm(在-3, 的-5)
	det(省-7, 哪个-6)
	dobj(尼亚加拉-1, 省-7)
主谓宾：尼亚加拉 省 哪个
主谓宾词和词性序列：尼亚加拉/ns 省/ns 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/ns/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 尼亚加拉瀑布在加拿大的哪个省 : 尼亚加拉瀑布在加拿大的哪个省 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns  : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single5
匹配成功: 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns  : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
匹配成功: ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【尼亚加拉瀑布在加拿大的哪个省】匹配到多个模式：
序号：1
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：8
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：9
	问题 : 尼亚加拉瀑布在加拿大的哪个省
	模式 : 尼亚加拉瀑布在加拿大的哪个省
	分类 : Location
序号：10
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 尼亚加拉瀑布在加拿大的哪个省
	模式 : 尼亚加拉瀑布在加拿大的哪个省
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：2
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single5
序号：3
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 尼亚加拉/ns 瀑布/N.Object 在/p 加拿大/ns 的/uj 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：8
	问题 : ns/N.Object/p/ns/uj/RW.RWOrdinarySingle/ns
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 162：尼亚加拉瀑布在加拿大的哪个省 【问题类型：LOCATION_NAME】
************************************
************************************
Question 尼亚加拉瀑布在加拿大的哪个省
Question 候选答案：
城市  1.0
安大略省  0.8226175116207542
印第安  0.7143909912613357
北美洲  0.7021451623055793
区域  0.6617094387386324
五大湖  0.6155190341963394
伊利湖  0.6153584840307621
安大略湖  0.6153401580384577
尼亚加拉大瀑布  0.5041575099360954
地区  0.4070609614120194
杭州  0.3083300256373931
上海  0.30818668206789734
欧洲  0.307991999058001
天津  0.3079759880084647
北京  0.30793777103344205
多伦多  0.29658746209810205
地方  0.2838834999004339
中转站  0.28324188261236327
国家  0.18608107732675236
艾伯塔省  0.18537468098269144
美国  0.14782842026280554
旅游指南  0.1110200659612507
纽约州  0.11088612648682417
俄罗斯  0.08666836942105016
ExpectAnswerRank: 2

mrr: 135.91495726495725
perfectCount: 126
notPerfectCount: 28
wrongCount: 8
unknownTypeCount: 0
questionCount: 162

MRR：83.89812176849213%
回答完美率：77.77777777777779%
回答不完美率：17.28395061728395%
回答错误率：4.938271604938271%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:白求恩来自于哪个国家:加拿大
Question:白求恩来自于哪个国家
ExpectAnswer:加拿大
没有从数据库中查询到问题：白求恩来自于哪个国家
Question：白求恩来自于哪个国家 搜索到Evidence 8 条
将Question：白求恩来自于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 白求恩来自于哪个国家
问题：白求恩来自于哪个国家
词和词性序列：白求恩/n 来自/v 于/p 哪个国家/RW.RWLocationSingle 
词性序列：n/v/p/RW.RWLocationSingle
对问题进行分词：白求恩来自于哪个国家
分词结果为：白求恩 来自 于 哪个国家
句法树: 
句子依存关系：
	nsubj(来自-2, 白求恩-1)
	root(ROOT-0, 来自-2)
	prep(来自-2, 于-3)
	pobj(于-3, 哪个国家-4)
主谓宾：白求恩 来自 于
主谓宾词和词性序列：白求恩/n 来自/v 于/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 白求恩来自于哪个国家 : 白求恩来自于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 白求恩/n 来自/v 于/p 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【白求恩来自于哪个国家】匹配到多个模式：
序号：1
	问题 : 白求恩/n 来自/v 于/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 白求恩来自于哪个国家
	模式 : 白求恩来自于哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白求恩来自于哪个国家
	模式 : 白求恩来自于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白求恩/n 来自/v 于/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 163：白求恩来自于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 白求恩来自于哪个国家
Question 候选答案：
加拿大  1.0
中国  0.5732026622438776
国家  0.24863782479411461
美国  0.1783678778714449
俄国  0.17815403389557688
故乡  0.16721884740129486
北京  0.12493891299592931
ExpectAnswerRank: 1

mrr: 136.91495726495725
perfectCount: 127
notPerfectCount: 28
wrongCount: 8
unknownTypeCount: 0
questionCount: 163

MRR：83.99690629751979%
回答完美率：77.91411042944786%
回答不完美率：17.177914110429448%
回答错误率：4.9079754601226995%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:白求恩是哪国人:加拿大
Question:白求恩是哪国人
ExpectAnswer:加拿大
没有从数据库中查询到问题：白求恩是哪国人
Question：白求恩是哪国人 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： 白求恩是哪国人
问题：白求恩是哪国人
词和词性序列：白求恩/nr 是哪/RW.RWLocationSingle 国人/nr 
词性序列：nr/RW.RWLocationSingle/nr
对问题进行分词：白求恩是哪国人
分词结果为：白求恩 是哪 国人
句法树: 
句子依存关系：
	nsubj(是哪-2, 白求恩-1)
	root(ROOT-0, 是哪-2)
	dobj(是哪-2, 国人-3)
主谓宾：白求恩 是哪 国人
主谓宾词和词性序列：白求恩/nr 是哪/RW.RWLocationSingle 国人/nr
主谓宾词性序列：nr/RW.RWLocationSingle/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 白求恩是哪国人 : 白求恩是哪国人 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/RW.RWLocationSingle/nr : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/RW.RWLocationSingle/nr : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【白求恩是哪国人】匹配到多个模式：
序号：1
	问题 : 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nr/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 白求恩是哪国人
	模式 : 白求恩是哪国人
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白求恩是哪国人
	模式 : 白求恩是哪国人
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 白求恩/nr 是哪/RW.RWLocationSingle 国人/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nr/RW.RWLocationSingle/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 164：白求恩是哪国人 【问题类型：LOCATION_NAME】
************************************
************************************
Question 白求恩是哪国人
Question 候选答案：
加拿大  1.0
国家  0.2997232288947431
安大略省  0.20554749872136538
中国  0.1468204961016044
美国  0.11216326732676797
俄国  0.11186291137520633
ExpectAnswerRank: 1

mrr: 137.91495726495725
perfectCount: 128
notPerfectCount: 28
wrongCount: 8
unknownTypeCount: 0
questionCount: 164

MRR：84.09448613716906%
回答完美率：78.04878048780488%
回答不完美率：17.073170731707318%
回答错误率：4.878048780487805%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:安南是哪个国家的人:加纳
Question:安南是哪个国家的人
ExpectAnswer:加纳
没有从数据库中查询到问题：安南是哪个国家的人
Question：安南是哪个国家的人 搜索到Evidence 8 条
将Question：安南是哪个国家的人 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 安南是哪个国家的人
问题：安南是哪个国家的人
词和词性序列：安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr 
词性序列：nr/v/RW.RWLocationSingle/uj/nr
对问题进行分词：安南是哪个国家的人
分词结果为：安南 是 哪个国家 的 人
句法树: 
句子依存关系：
	top(是-2, 安南-1)
	root(ROOT-0, 是-2)
	assmod(人-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 人-5)
主谓宾：安南 是 人
主谓宾词和词性序列：安南/nr 是/v 人/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 安南是哪个国家的人 : 安南是哪个国家的人 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/v/RW.RWLocationSingle/uj/nr : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr  : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
匹配成功: nr/v/RW.RWLocationSingle/uj/nr : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【安南是哪个国家的人】匹配到多个模式：
序号：1
	问题 : 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：5
	问题 : 安南是哪个国家的人
	模式 : 安南是哪个国家的人
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 安南是哪个国家的人
	模式 : 安南是哪个国家的人
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 安南/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 人/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 165：安南是哪个国家的人 【问题类型：LOCATION_NAME】
************************************
************************************
Question 安南是哪个国家的人
Question 候选答案：
南非  1.0
加纳  0.9104902051331636
国家  0.5409963080444027
越国  0.212123640286654
库马  0.21058944303003943
ExpectAnswerRank: 2

mrr: 138.41495726495725
perfectCount: 128
notPerfectCount: 29
wrongCount: 8
unknownTypeCount: 0
questionCount: 165

MRR：83.88785288785287%
回答完美率：77.57575757575758%
回答不完美率：17.575757575757574%
回答错误率：4.848484848484849%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:奥斯卡金像奖是哪个国家的奖项:美国
Question:奥斯卡金像奖是哪个国家的奖项
ExpectAnswer:美国
没有从数据库中查询到问题：奥斯卡金像奖是哪个国家的奖项
Question：奥斯卡金像奖是哪个国家的奖项 搜索到Evidence 8 条
将Question：奥斯卡金像奖是哪个国家的奖项 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 奥斯卡金像奖是哪个国家的奖项
问题：奥斯卡金像奖是哪个国家的奖项
词和词性序列：奥斯卡金像奖/nz 是/v 哪个国家/RW.RWLocationSingle 的/uj 奖项/N.ObjectAward 
词性序列：nz/v/RW.RWLocationSingle/uj/N.ObjectAward
对问题进行分词：奥斯卡金像奖是哪个国家的奖项
分词结果为：奥斯卡金像奖 是 哪个国家 的 奖项
句法树: 
句子依存关系：
	top(是-2, 奥斯卡金像奖-1)
	root(ROOT-0, 是-2)
	assmod(奖项-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 奖项-5)
主谓宾：奥斯卡金像奖 是 奖项
主谓宾词和词性序列：奥斯卡金像奖/nz 是/v 奖项/N.ObjectAward
主谓宾词性序列：nz/v/N.ObjectAward

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 奥斯卡金像奖是哪个国家的奖项 : 奥斯卡金像奖是哪个国家的奖项 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 奥斯卡金像奖/nz 是/v 哪个国家/RW.RWLocationSingle 的/uj 奖项/N.ObjectAward  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nz/v/RW.RWLocationSingle/uj/N.ObjectAward : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【奥斯卡金像奖是哪个国家的奖项】匹配到多个模式：
序号：1
	问题 : 奥斯卡金像奖/nz 是/v 哪个国家/RW.RWLocationSingle 的/uj 奖项/N.ObjectAward 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nz/v/RW.RWLocationSingle/uj/N.ObjectAward
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 奥斯卡金像奖是哪个国家的奖项
	模式 : 奥斯卡金像奖是哪个国家的奖项
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 奥斯卡金像奖是哪个国家的奖项
	模式 : 奥斯卡金像奖是哪个国家的奖项
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 奥斯卡金像奖/nz 是/v 哪个国家/RW.RWLocationSingle 的/uj 奖项/N.ObjectAward 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nz/v/RW.RWLocationSingle/uj/N.ObjectAward
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 166：奥斯卡金像奖是哪个国家的奖项 【问题类型：LOCATION_NAME】
************************************
************************************
Question 奥斯卡金像奖是哪个国家的奖项
Question 候选答案：
美国  1.0
别称  0.4098510956537243
肥城  0.38238280646907064
欧美  0.30075827617262446
国家  0.2851120633693147
ExpectAnswerRank: 1

mrr: 139.41495726495725
perfectCount: 129
notPerfectCount: 29
wrongCount: 8
unknownTypeCount: 0
questionCount: 166

MRR：83.98491401503449%
回答完美率：77.71084337349397%
回答不完美率：17.46987951807229%
回答错误率：4.819277108433735%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:澳门隶属于哪个国家:中国
Question:澳门隶属于哪个国家
ExpectAnswer:中国
没有从数据库中查询到问题：澳门隶属于哪个国家
Question：澳门隶属于哪个国家 搜索到Evidence 8 条
将Question：澳门隶属于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 澳门隶属于哪个国家
问题：澳门隶属于哪个国家
词和词性序列：澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle 
词性序列：ns/n/RW.RWLocationSingle
对问题进行分词：澳门隶属于哪个国家
分词结果为：澳门 隶属于 哪个国家
句法树: 
句子依存关系：
	nsubj(隶属于-2, 澳门-1)
	root(ROOT-0, 隶属于-2)
	dobj(隶属于-2, 哪个国家-3)
主谓宾：澳门 隶属于 哪个国家
主谓宾词和词性序列：澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/n/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 澳门隶属于哪个国家 : 澳门隶属于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/n/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/n/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【澳门隶属于哪个国家】匹配到多个模式：
序号：1
	问题 : 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/n/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/n/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 澳门隶属于哪个国家
	模式 : 澳门隶属于哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳门隶属于哪个国家
	模式 : 澳门隶属于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/n/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 澳门/ns 隶属于/n 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/n/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 167：澳门隶属于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 澳门隶属于哪个国家
Question 候选答案：
中国  1.0
北京  0.619050784891234
国家  0.4420741780660141
旅游指南  0.20317432389805504
欧洲  0.16377799779567886
东亚  0.1622639717079044
香港  0.1489045167774879
中华人民共和国  0.13354397805339274
英国  0.1315482526685887
殖民地  0.13145656661861768
大陆  0.13130377706359775
澳门半岛  0.13121259938797475
珠江口  0.13109087415653634
南中国海  0.131058788171473
葡萄牙  0.11661574090417388
ExpectAnswerRank: 1

mrr: 140.41495726495725
perfectCount: 130
notPerfectCount: 29
wrongCount: 8
unknownTypeCount: 0
questionCount: 167

MRR：84.08081273350734%
回答完美率：77.84431137724552%
回答不完美率：17.365269461077844%
回答错误率：4.790419161676647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:巴塞罗那是哪个国家的城市:西班牙
Question:巴塞罗那是哪个国家的城市
ExpectAnswer:西班牙
没有从数据库中查询到问题：巴塞罗那是哪个国家的城市
Question：巴塞罗那是哪个国家的城市 搜索到Evidence 9 条
将Question：巴塞罗那是哪个国家的城市 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 巴塞罗那是哪个国家的城市
问题：巴塞罗那是哪个国家的城市
词和词性序列：巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns 
词性序列：ns/v/RW.RWLocationSingle/uj/ns
对问题进行分词：巴塞罗那是哪个国家的城市
分词结果为：巴塞罗那 是 哪个国家 的 城市
句法树: 
句子依存关系：
	top(是-2, 巴塞罗那-1)
	root(ROOT-0, 是-2)
	assmod(城市-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 城市-5)
主谓宾：巴塞罗那 是 城市
主谓宾词和词性序列：巴塞罗那/ns 是/v 城市/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 巴塞罗那是哪个国家的城市 : 巴塞罗那是哪个国家的城市 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle/uj/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/v/RW.RWLocationSingle/uj/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【巴塞罗那是哪个国家的城市】匹配到多个模式：
序号：1
	问题 : 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 巴塞罗那是哪个国家的城市
	模式 : 巴塞罗那是哪个国家的城市
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴塞罗那是哪个国家的城市
	模式 : 巴塞罗那是哪个国家的城市
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴塞罗那/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 城市/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 168：巴塞罗那是哪个国家的城市 【问题类型：LOCATION_NAME】
************************************
************************************
Question 巴塞罗那是哪个国家的城市
Question 候选答案：
西班牙  1.0
地中海  0.6598422907537672
大连  0.4434935456357167
伊比利亚  0.4262835416309205
半岛  0.4261884300526132
港口  0.4261409528532564
南非  0.4220087849318628
韩国  0.38547088906328864
国家  0.3627504434325519
加泰罗尼亚  0.34577830171263446
首府  0.3250729387238838
大城市  0.22324610126579955
纳省  0.10155785022217884
ExpectAnswerRank: 1

mrr: 141.41495726495725
perfectCount: 131
notPerfectCount: 29
wrongCount: 8
unknownTypeCount: 0
questionCount: 168

MRR：84.17556980056979%
回答完美率：77.97619047619048%
回答不完美率：17.261904761904763%
回答错误率：4.761904761904762%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:巴西曾经是哪个国家的殖民地:葡萄牙
Question:巴西曾经是哪个国家的殖民地
ExpectAnswer:葡萄牙
没有从数据库中查询到问题：巴西曾经是哪个国家的殖民地
Question：巴西曾经是哪个国家的殖民地 搜索到Evidence 9 条
将Question：巴西曾经是哪个国家的殖民地 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 巴西曾经是哪个国家的殖民地
问题：巴西曾经是哪个国家的殖民地
词和词性序列：巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns 
词性序列：ns/d/v/RW.RWLocationSingle/uj/ns
对问题进行分词：巴西曾经是哪个国家的殖民地
分词结果为：巴西 曾经 是 哪个国家 的 殖民地
句法树: 
句子依存关系：
	nsubj(是-3, 巴西-1)
	advmod(是-3, 曾经-2)
	root(ROOT-0, 是-3)
	assmod(殖民地-6, 哪个国家-4)
	assm(哪个国家-4, 的-5)
	attr(是-3, 殖民地-6)
主谓宾：巴西 是 殖民地
主谓宾词和词性序列：巴西/ns 是/v 殖民地/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 巴西曾经是哪个国家的殖民地 : 巴西曾经是哪个国家的殖民地 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/d/v/RW.RWLocationSingle/uj/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/d/v/RW.RWLocationSingle/uj/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【巴西曾经是哪个国家的殖民地】匹配到多个模式：
序号：1
	问题 : 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/d/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/d/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 巴西曾经是哪个国家的殖民地
	模式 : 巴西曾经是哪个国家的殖民地
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴西曾经是哪个国家的殖民地
	模式 : 巴西曾经是哪个国家的殖民地
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/d/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴西/ns 曾经/d 是/v 哪个国家/RW.RWLocationSingle 的/uj 殖民地/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/d/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 169：巴西曾经是哪个国家的殖民地 【问题类型：LOCATION_NAME】
************************************
************************************
Question 巴西曾经是哪个国家的殖民地
Question 候选答案：
葡萄牙  1.0
拉丁美洲  0.3161501676341764
国家  0.30463486394633943
东莞  0.3016218530290294
足球王国  0.28799205647109855
南美洲  0.26582661515819905
西欧  0.26578501820589434
美国  0.21792709078916064
南美  0.20836408250245303
城市  0.17244760600769143
圣保罗  0.1724110828762535
欧洲  0.10938410163685608
西班牙  0.10830161251948985
英国  0.10802475317359916
巴西联邦共和国  0.10788718830247689
中南美洲  0.10776596036028628
大西洋  0.10775506896998506
俄罗斯  0.10772879866542358
加拿大  0.10772470335131815
中国  0.10771851331642304
两国  0.07191163301084152
ExpectAnswerRank: 1

mrr: 142.41495726495725
perfectCount: 132
notPerfectCount: 29
wrongCount: 8
unknownTypeCount: 0
questionCount: 169

MRR：84.26920548222323%
回答完美率：78.10650887573965%
回答不完美率：17.159763313609467%
回答错误率：4.733727810650888%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:柏林是哪个国家的:德意志联邦共和国
Question:柏林是哪个国家的
ExpectAnswer:德意志联邦共和国
没有从数据库中查询到问题：柏林是哪个国家的
Question：柏林是哪个国家的 搜索到Evidence 8 条
将Question：柏林是哪个国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 柏林是哪个国家的
问题：柏林是哪个国家的
词和词性序列：柏林/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
词性序列：ns/v/RW.RWLocationSingle/uj
对问题进行分词：柏林是哪个国家的
分词结果为：柏林 是 哪个国家 的
句法树: 
句子依存关系：
	top(是-2, 柏林-1)
	root(ROOT-0, 是-2)
	attr(是-2, 哪个国家-3)
	cpm(哪个国家-3, 的-4)
主谓宾：柏林 是 哪个国家
主谓宾词和词性序列：柏林/ns 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 柏林是哪个国家的 : 柏林是哪个国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 柏林/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle/uj : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 柏林/ns 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【柏林是哪个国家的】匹配到多个模式：
序号：1
	问题 : 柏林/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 柏林/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 柏林是哪个国家的
	模式 : 柏林是哪个国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 柏林是哪个国家的
	模式 : 柏林是哪个国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 柏林/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 柏林/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 170：柏林是哪个国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 柏林是哪个国家的
Question 候选答案：
首都  1.0
德国  0.9522173038665936
城市  0.5544581978287282
国家  0.2862047813529881
宁夏  0.252006603225449
德意志联邦共和国  0.16576226711325823
伦敦  0.16320137500676787
巴黎  0.16262228994954087
华盛顿  0.1621839580565379
东西欧  0.1512322678377419
地方  0.14844318153194805
法国  0.14146308177748543
美国  0.14145869327647154
英国  0.14145347451850906
宁波  0.12106549384988885
ExpectAnswerRank: 6

mrr: 142.5816239316239
perfectCount: 132
notPerfectCount: 30
wrongCount: 8
unknownTypeCount: 0
questionCount: 170

MRR：83.87154348919054%
回答完美率：77.64705882352942%
回答不完美率：17.647058823529413%
回答错误率：4.705882352941177%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:被誉为“风车之国”是哪个国家:荷兰
Question:被誉为“风车之国”是哪个国家
ExpectAnswer:荷兰
没有从数据库中查询到问题：被誉为“风车之国”是哪个国家
Question：被誉为“风车之国”是哪个国家 搜索到Evidence 8 条
将Question：被誉为“风车之国”是哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 被誉为“风车之国”是哪个国家
问题：被誉为“风车之国”是哪个国家
词和词性序列：被誉为/n 风车之国/ns 是/v 哪个国家/RW.RWLocationSingle 
词性序列：n/ns/v/RW.RWLocationSingle
对问题进行分词：被誉为“风车之国”是哪个国家
分词结果为：被誉为 风车之国 是 哪个国家
句法树: 
句子依存关系：
	nsubj(是-3, 被誉为-1)
	advmod(是-3, 风车之国-2)
	root(ROOT-0, 是-3)
	attr(是-3, 哪个国家-4)
主谓宾：被誉为 是 哪个国家
主谓宾词和词性序列：被誉为/n 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：n/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 被誉为“风车之国”是哪个国家 : 被誉为“风车之国”是哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 被誉为/n 风车之国/ns 是/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 被誉为/n 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【被誉为“风车之国”是哪个国家】匹配到多个模式：
序号：1
	问题 : 被誉为/n 风车之国/ns 是/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 被誉为/n 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 被誉为“风车之国”是哪个国家
	模式 : 被誉为“风车之国”是哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为“风车之国”是哪个国家
	模式 : 被誉为“风车之国”是哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 被誉为/n 风车之国/ns 是/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 被誉为/n 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 171：被誉为“风车之国”是哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 被誉为“风车之国”是哪个国家
Question 候选答案：
荷兰  1.0
欧洲  0.5633819991754334
国家  0.3699343746641561
北海  0.11676862427954678
德国  0.11675688396392041
比利时  0.11674902515243378
向海  0.11673166753160695
家园  0.11669393035000007
ExpectAnswerRank: 1

mrr: 143.5816239316239
perfectCount: 133
notPerfectCount: 30
wrongCount: 8
unknownTypeCount: 0
questionCount: 171

MRR：83.96586194831808%
回答完美率：77.77777777777779%
回答不完美率：17.543859649122805%
回答错误率：4.678362573099415%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:布莱尔是哪个国家的首相:英国
Question:布莱尔是哪个国家的首相
ExpectAnswer:英国
没有从数据库中查询到问题：布莱尔是哪个国家的首相
Question：布莱尔是哪个国家的首相 搜索到Evidence 9 条
将Question：布莱尔是哪个国家的首相 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 布莱尔是哪个国家的首相
问题：布莱尔是哪个国家的首相
词和词性序列：布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr 
词性序列：nr/v/RW.RWLocationSingle/uj/nr
对问题进行分词：布莱尔是哪个国家的首相
分词结果为：布莱尔 是 哪个国家 的 首相
句法树: 
句子依存关系：
	top(是-2, 布莱尔-1)
	root(ROOT-0, 是-2)
	assmod(首相-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 首相-5)
主谓宾：布莱尔 是 首相
主谓宾词和词性序列：布莱尔/nr 是/v 首相/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 布莱尔是哪个国家的首相 : 布莱尔是哪个国家的首相 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/v/RW.RWLocationSingle/uj/nr : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr  : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
匹配成功: nr/v/RW.RWLocationSingle/uj/nr : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).* : Location->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【布莱尔是哪个国家的首相】匹配到多个模式：
序号：1
	问题 : 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：5
	问题 : 布莱尔是哪个国家的首相
	模式 : 布莱尔是哪个国家的首相
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 布莱尔是哪个国家的首相
	模式 : 布莱尔是哪个国家的首相
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 布莱尔/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 首相/nr 
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
序号：4
	问题 : nr/v/RW.RWLocationSingle/uj/nr
	模式 : .*(V.).*(RW.RWLocationSingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Location->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 172：布莱尔是哪个国家的首相 【问题类型：LOCATION_NAME】
************************************
************************************
Question 布莱尔是哪个国家的首相
Question 候选答案：
英国  1.0
国家  0.8434417390670058
欧洲  0.45688636913698727
罗本  0.19389107690855664
爱丁堡  0.17173023150093505
中国  0.1354714570139462
中东  0.13060855498209803
阿拉伯  0.0938101682104938
阿富汗  0.08051008025167714
中东国家  0.08037848725637751
俄罗斯  0.08022144197535108
ExpectAnswerRank: 1

mrr: 144.5816239316239
perfectCount: 134
notPerfectCount: 30
wrongCount: 8
unknownTypeCount: 0
questionCount: 172

MRR：84.05908368117669%
回答完美率：77.90697674418605%
回答不完美率：17.441860465116278%
回答错误率：4.651162790697675%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:产钨最多的国家是哪个:中国
Question:产钨最多的国家是哪个
ExpectAnswer:中国
没有从数据库中查询到问题：产钨最多的国家是哪个
Question：产钨最多的国家是哪个 搜索到Evidence 9 条
将Question：产钨最多的国家是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 产钨最多的国家是哪个
问题：产钨最多的国家是哪个
词和词性序列：产/v 钨/n 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：v/n/d/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：产钨最多的国家是哪个
分词结果为：产 钨 最多 的 国家 是 哪个
句法树: 
句子依存关系：
	rcmod(国家-5, 产-1)
	dobj(产-1, 钨-2)
	advmod(产-1, 最多-3)
	cpm(产-1, 的-4)
	top(是-6, 国家-5)
	root(ROOT-0, 是-6)
	attr(是-6, 哪个-7)
主谓宾：国家 是 哪个
主谓宾词和词性序列：国家/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 产钨最多的国家是哪个 : 产钨最多的国家是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: v/n/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 产/v 钨/n 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: v/n/d/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 国家/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【产钨最多的国家是哪个】匹配到多个模式：
序号：1
	问题 : 产/v 钨/n 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : v/n/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 产钨最多的国家是哪个
	模式 : 产钨最多的国家是哪个
	分类 : Location
序号：6
	问题 : v/n/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 产钨最多的国家是哪个
	模式 : 产钨最多的国家是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : v/n/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 产/v 钨/n 最多/d 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : v/n/d/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 173：产钨最多的国家是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 产钨最多的国家是哪个
Question 候选答案：
中国  1.0
地方  0.9841866385098118
桥梁  0.3523569152222754
城市  0.32516038623804
阿拉伯  0.31615663476405403
比亚  0.31614176630346175
我国  0.17175857260753305
ExpectAnswerRank: 1

mrr: 145.5816239316239
perfectCount: 135
notPerfectCount: 30
wrongCount: 8
unknownTypeCount: 0
questionCount: 173

MRR：84.15122770614099%
回答完美率：78.03468208092485%
回答不完美率：17.341040462427745%
回答错误率：4.624277456647398%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:长江、黄河是哪个国家的:中国
Question:长江、黄河是哪个国家的
ExpectAnswer:中国
没有从数据库中查询到问题：长江、黄河是哪个国家的
Question：长江、黄河是哪个国家的 搜索到Evidence 10 条
将Question：长江、黄河是哪个国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 长江、黄河是哪个国家的
问题：长江、黄河是哪个国家的
词和词性序列：长江/ns 黄河/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
词性序列：ns/ns/v/RW.RWLocationSingle/uj
对问题进行分词：长江、黄河是哪个国家的
分词结果为：长江 黄河 是 哪个国家 的
句法树: 
句子依存关系：
	nn(黄河-2, 长江-1)
	top(是-3, 黄河-2)
	root(ROOT-0, 是-3)
	attr(是-3, 哪个国家-4)
	cpm(哪个国家-4, 的-5)
主谓宾：黄河 是 哪个国家
主谓宾词和词性序列：黄河/ns 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 长江、黄河是哪个国家的 : 长江、黄河是哪个国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 长江/ns 黄河/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/ns/v/RW.RWLocationSingle/uj : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 黄河/ns 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【长江、黄河是哪个国家的】匹配到多个模式：
序号：1
	问题 : 长江/ns 黄河/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 黄河/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 长江、黄河是哪个国家的
	模式 : 长江、黄河是哪个国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长江、黄河是哪个国家的
	模式 : 长江、黄河是哪个国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长江/ns 黄河/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 黄河/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 174：长江、黄河是哪个国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 长江、黄河是哪个国家的
Question 候选答案：
中国  1.0
我国  0.5695480700264227
黑龙江  0.4968443947698418
尼罗河  0.3877629480748768
密西西比河  0.3875259392228687
长江黄河  0.34048353154723093
国家  0.30953119780581817
亚马逊河  0.2011536595770433
多瑙河  0.20110648709299292
湄公河  0.18644759673727193
青海  0.1856680207528276
巴颜喀拉山  0.1856110029064211
黄河流域  0.18558287844191185
东海  0.18327321896910168
扬子江  0.17005994455564774
从江  0.1699050688899032
大河  0.15637983552975798
大海  0.13936147818636635
地区  0.13923201577132197
荆州  0.13917634770232523
雅鲁藏布江  0.12473381362006924
南海  0.12433477381608286
黄海  0.12421058374858202
澜沧江  0.12395566282831591
怒江  0.1238914245934877
ExpectAnswerRank: 1

mrr: 146.5816239316239
perfectCount: 136
notPerfectCount: 30
wrongCount: 8
unknownTypeCount: 0
questionCount: 174

MRR：84.24231260438155%
回答完美率：78.16091954022988%
回答不完美率：17.24137931034483%
回答错误率：4.597701149425287%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:车臣是哪个国家的加盟共和国:苏联
Question:车臣是哪个国家的加盟共和国
ExpectAnswer:苏联
没有从数据库中查询到问题：车臣是哪个国家的加盟共和国
Question：车臣是哪个国家的加盟共和国 搜索到Evidence 10 条
将Question：车臣是哪个国家的加盟共和国 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 车臣是哪个国家的加盟共和国
问题：车臣是哪个国家的加盟共和国
词和词性序列：车臣/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 加盟/vn 共和国/n 
词性序列：ns/v/RW.RWLocationSingle/uj/vn/n
对问题进行分词：车臣是哪个国家的加盟共和国
分词结果为：车臣 是 哪个国家 的 加盟 共和国
句法树: 
句子依存关系：
	top(是-2, 车臣-1)
	root(ROOT-0, 是-2)
	assmod(共和国-6, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	nn(共和国-6, 加盟-5)
	attr(是-2, 共和国-6)
主谓宾：车臣 是 共和国
主谓宾词和词性序列：车臣/ns 是/v 共和国/n
主谓宾词性序列：ns/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 车臣是哪个国家的加盟共和国 : 车臣是哪个国家的加盟共和国 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 车臣/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 加盟/vn 共和国/n  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle/uj/vn/n : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【车臣是哪个国家的加盟共和国】匹配到多个模式：
序号：1
	问题 : 车臣/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 加盟/vn 共和国/n 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/vn/n
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 车臣是哪个国家的加盟共和国
	模式 : 车臣是哪个国家的加盟共和国
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 车臣是哪个国家的加盟共和国
	模式 : 车臣是哪个国家的加盟共和国
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 车臣/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 加盟/vn 共和国/n 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/vn/n
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 175：车臣是哪个国家的加盟共和国 【问题类型：LOCATION_NAME】
************************************
************************************
Question 车臣是哪个国家的加盟共和国
Question 候选答案：
俄罗斯  1.0
国家  0.897451990472789
俄罗斯联邦  0.48234525190261907
苏联  0.4590568288024629
我国  0.41780320120844394
原苏联  0.3227618098284788
台湾  0.2787446355363615
俄国  0.258710421352662
高加索地区  0.25860857096439294
乌克兰  0.16914798847424709
白俄罗斯  0.1691344018308112
普京  0.1595207129700615
车臣共和国  0.15948953115687312
德国  0.15902437925683777
欧洲  0.1494010361915137
曼联  0.12962073817393316
中国  0.09952851458821986
北高加索地区  0.08958608237642214
高加索  0.05977878503756933
ExpectAnswerRank: 4

mrr: 146.8316239316239
perfectCount: 136
notPerfectCount: 31
wrongCount: 8
unknownTypeCount: 0
questionCount: 175

MRR：83.90378510378508%
回答完美率：77.71428571428571%
回答不完美率：17.71428571428571%
回答错误率：4.571428571428571%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:大阪是哪个国家的:日本
Question:大阪是哪个国家的
ExpectAnswer:日本
没有从数据库中查询到问题：大阪是哪个国家的
Question：大阪是哪个国家的 搜索到Evidence 9 条
将Question：大阪是哪个国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 大阪是哪个国家的
问题：大阪是哪个国家的
词和词性序列：大阪/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
词性序列：ns/v/RW.RWLocationSingle/uj
对问题进行分词：大阪是哪个国家的
分词结果为：大阪 是 哪个国家 的
句法树: 
句子依存关系：
	top(是-2, 大阪-1)
	root(ROOT-0, 是-2)
	attr(是-2, 哪个国家-3)
	cpm(哪个国家-3, 的-4)
主谓宾：大阪 是 哪个国家
主谓宾词和词性序列：大阪/ns 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 大阪是哪个国家的 : 大阪是哪个国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 大阪/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle/uj : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 大阪/ns 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【大阪是哪个国家的】匹配到多个模式：
序号：1
	问题 : 大阪/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大阪/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 大阪是哪个国家的
	模式 : 大阪是哪个国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 大阪是哪个国家的
	模式 : 大阪是哪个国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 大阪/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大阪/ns 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 176：大阪是哪个国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 大阪是哪个国家的
Question 候选答案：
日本  1.0
河南  0.30256116276377243
关西  0.30187645574246597
郑州  0.28585820555890984
大城市  0.2856412422022465
宁波  0.17547339741513907
国家  0.1206167288207532
中国  0.0953629398773424
城市  0.09371666992276653
公园  0.09121822841266278
名古屋  0.07458734688937682
大阪市  0.07456969831938301
金城  0.07420224362733108
锦城  0.07409775142239096
桃山  0.07402757600734369
上海  0.06566499313139022
韩国  0.05613224386335486
金田  0.05599657859404809
深圳  0.05567160076769007
首都  0.05552543192329078
ExpectAnswerRank: 1

mrr: 147.8316239316239
perfectCount: 137
notPerfectCount: 31
wrongCount: 8
unknownTypeCount: 0
questionCount: 176

MRR：83.99524087024086%
回答完美率：77.8409090909091%
回答不完美率：17.613636363636363%
回答错误率：4.545454545454546%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:道教发祥地在哪个国家:中国
Question:道教发祥地在哪个国家
ExpectAnswer:中国
没有从数据库中查询到问题：道教发祥地在哪个国家
Question：道教发祥地在哪个国家 搜索到Evidence 9 条
将Question：道教发祥地在哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 道教发祥地在哪个国家
问题：道教发祥地在哪个国家
词和词性序列：道教/n 发祥地/ns 在/p 哪个国家/RW.RWLocationSingle 
词性序列：n/ns/p/RW.RWLocationSingle
对问题进行分词：道教发祥地在哪个国家
分词结果为：道教 发祥地 在 哪个国家
句法树: 
句子依存关系：
	nn(发祥地-2, 道教-1)
	nsubj(哪个国家-4, 发祥地-2)
	advmod(哪个国家-4, 在-3)
	root(ROOT-0, 哪个国家-4)
主谓宾：发祥地 哪个国家 在
主谓宾词和词性序列：发祥地/ns 哪个国家/RW.RWLocationSingle 在/p
主谓宾词性序列：ns/RW.RWLocationSingle/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 道教发祥地在哪个国家 : 道教发祥地在哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 道教/n 发祥地/ns 在/p 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/ns/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 发祥地/ns 哪个国家/RW.RWLocationSingle 在/p : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle/p : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【道教发祥地在哪个国家】匹配到多个模式：
序号：1
	问题 : 道教/n 发祥地/ns 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 发祥地/ns 哪个国家/RW.RWLocationSingle 在/p
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/p
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 道教发祥地在哪个国家
	模式 : 道教发祥地在哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 道教发祥地在哪个国家
	模式 : 道教发祥地在哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 道教/n 发祥地/ns 在/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 发祥地/ns 哪个国家/RW.RWLocationSingle 在/p
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle/p
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 177：道教发祥地在哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 道教发祥地在哪个国家
Question 候选答案：
中国  1.0
国家  0.2517273916214012
我国  0.24621374080969502
终南山  0.17584294463431208
陕西  0.11924335647634786
青城山  0.11182747554593293
四川  0.09638593883980068
关中  0.08248333081440384
文登市  0.07573936676131561
江西  0.07570693314585233
瓦屋山  0.06201892328143426
ExpectAnswerRank: 1

mrr: 148.8316239316239
perfectCount: 138
notPerfectCount: 31
wrongCount: 8
unknownTypeCount: 0
questionCount: 177

MRR：84.0856632382056%
回答完美率：77.96610169491525%
回答不完美率：17.51412429378531%
回答错误率：4.519774011299435%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:第11届亚太经合组织领导人非正式会议在哪个国家举行:曼谷
Question:第11届亚太经合组织领导人非正式会议在哪个国家举行
ExpectAnswer:曼谷
没有从数据库中查询到问题：第11届亚太经合组织领导人非正式会议在哪个国家举行
Question：第11届亚太经合组织领导人非正式会议在哪个国家举行 搜索到Evidence 9 条
将Question：第11届亚太经合组织领导人非正式会议在哪个国家举行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第11届亚太经合组织领导人非正式会议在哪个国家举行
问题：第11届亚太经合组织领导人非正式会议在哪个国家举行
词和词性序列：第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
词性序列：m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
对问题进行分词：第11届亚太经合组织领导人非正式会议在哪个国家举行
分词结果为：第11届 亚太经合组织 领导人 非正式 会议 在 哪个国家 举行
句法树: 
句子依存关系：
	nummod(领导人-3, 第11届-1)
	nn(领导人-3, 亚太经合组织-2)
	nn(会议-5, 领导人-3)
	amod(会议-5, 非正式-4)
	nsubj(举行-8, 会议-5)
	prep(举行-8, 在-6)
	pobj(在-6, 哪个国家-7)
	root(ROOT-0, 举行-8)
主谓宾：会议 举行 在
主谓宾词和词性序列：会议/N.ObjectEvent 举行/v 在/p
主谓宾词性序列：N.ObjectEvent/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第11届亚太经合组织领导人非正式会议在哪个国家举行 : 第11届亚太经合组织领导人非正式会议在哪个国家举行 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v  : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: 会议/N.ObjectEvent 举行/v 在/p : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: N.ObjectEvent/v/p : .*(N.ObjectEvent).* : ObjectSOB->Event2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v  : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: 会议/N.ObjectEvent 举行/v 在/p : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: N.ObjectEvent/v/p : .*(N.ObjectEvent).*(V).* : Object->Event4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第11届亚太经合组织领导人非正式会议在哪个国家举行】匹配到多个模式：
序号：1
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：4
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：5
	问题 : 会议/N.ObjectEvent 举行/v 在/p
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：6
	问题 : N.ObjectEvent/v/p
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：7
	问题 : 第11届亚太经合组织领导人非正式会议在哪个国家举行
	模式 : 第11届亚太经合组织领导人非正式会议在哪个国家举行
	分类 : Location
序号：8
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：9
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：10
	问题 : 会议/N.ObjectEvent 举行/v 在/p
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：11
	问题 : N.ObjectEvent/v/p
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第11届亚太经合组织领导人非正式会议在哪个国家举行
	模式 : 第11届亚太经合组织领导人非正式会议在哪个国家举行
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：2
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：3
	问题 : 会议/N.ObjectEvent 举行/v 在/p
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：4
	问题 : N.ObjectEvent/v/p
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第11届/m 亚太经合组织/nt 领导人/nr 非正式/b 会议/N.ObjectEvent 在/p 哪个国家/RW.RWLocationSingle 举行/v 
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：4
	问题 : m/nt/nr/b/N.ObjectEvent/p/RW.RWLocationSingle/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：5
	问题 : 会议/N.ObjectEvent 举行/v 在/p
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：6
	问题 : N.ObjectEvent/v/p
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 178：第11届亚太经合组织领导人非正式会议在哪个国家举行 【问题类型：LOCATION_NAME】
************************************
************************************
Question 第11届亚太经合组织领导人非正式会议在哪个国家举行
Question 候选答案：
国家  1.0
曼谷  0.7525381418215717
北京  0.36394257787123974
中国  0.33910708094522535
利马  0.21158770354317918
日本  0.187610753334803
成员国  0.17546899162114485
区域  0.17538287890932083
城市  0.17081501060723053
横滨  0.15204854620059466
亚太地区  0.15196043406660958
秦国  0.13466136553633423
ExpectAnswerRank: 2

mrr: 149.3316239316239
perfectCount: 138
notPerfectCount: 32
wrongCount: 8
unknownTypeCount: 0
questionCount: 178

MRR：83.89417074810332%
回答完美率：77.52808988764045%
回答不完美率：17.97752808988764%
回答错误率：4.49438202247191%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:第一套奥林匹克邮票是哪个国家发行的:希腊
Question:第一套奥林匹克邮票是哪个国家发行的
ExpectAnswer:希腊
没有从数据库中查询到问题：第一套奥林匹克邮票是哪个国家发行的
Question：第一套奥林匹克邮票是哪个国家发行的 搜索到Evidence 9 条
将Question：第一套奥林匹克邮票是哪个国家发行的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第一套奥林匹克邮票是哪个国家发行的
问题：第一套奥林匹克邮票是哪个国家发行的
词和词性序列：第一套/m 奥林匹克/nz 邮票/n 是/v 哪个国家/RW.RWLocationSingle 发行/v 的/uj 
词性序列：m/nz/n/v/RW.RWLocationSingle/v/uj
对问题进行分词：第一套奥林匹克邮票是哪个国家发行的
分词结果为：第一套 奥林匹克 邮票 是 哪个国家 发行 的
句法树: 
句子依存关系：
	nummod(邮票-3, 第一套-1)
	nn(邮票-3, 奥林匹克-2)
	top(是-4, 邮票-3)
	root(ROOT-0, 是-4)
	nsubj(发行-6, 哪个国家-5)
	dep(是-4, 发行-6)
	dep(发行-6, 的-7)
主谓宾：邮票 是 发行
主谓宾词和词性序列：邮票/n 是/v 发行/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第一套奥林匹克邮票是哪个国家发行的 : 第一套奥林匹克邮票是哪个国家发行的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第一套/m 奥林匹克/nz 邮票/n 是/v 哪个国家/RW.RWLocationSingle 发行/v 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: m/nz/n/v/RW.RWLocationSingle/v/uj : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第一套奥林匹克邮票是哪个国家发行的】匹配到多个模式：
序号：1
	问题 : 第一套/m 奥林匹克/nz 邮票/n 是/v 哪个国家/RW.RWLocationSingle 发行/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/nz/n/v/RW.RWLocationSingle/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 第一套奥林匹克邮票是哪个国家发行的
	模式 : 第一套奥林匹克邮票是哪个国家发行的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一套奥林匹克邮票是哪个国家发行的
	模式 : 第一套奥林匹克邮票是哪个国家发行的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第一套/m 奥林匹克/nz 邮票/n 是/v 哪个国家/RW.RWLocationSingle 发行/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : m/nz/n/v/RW.RWLocationSingle/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 179：第一套奥林匹克邮票是哪个国家发行的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 第一套奥林匹克邮票是哪个国家发行的
Question 候选答案：
希腊  1.0
雅典  0.14817690127018895
国家  0.1388493794154664
ExpectAnswerRank: 1

mrr: 150.3316239316239
perfectCount: 139
notPerfectCount: 32
wrongCount: 8
unknownTypeCount: 0
questionCount: 179

MRR：83.98414744783459%
回答完美率：77.6536312849162%
回答不完美率：17.877094972067038%
回答错误率：4.4692737430167595%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界最高峰是什么:珠穆朗玛峰
Question:世界最高峰是什么
ExpectAnswer:珠穆朗玛峰
没有从数据库中查询到问题：世界最高峰是什么
Question：世界最高峰是什么 搜索到Evidence 8 条
将Question：世界最高峰是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 世界最高峰是什么
问题：世界最高峰是什么
词和词性序列：世界/n 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/ns/v/RW.RWOrdinarySingle
对问题进行分词：世界最高峰是什么
分词结果为：世界 最高峰 是 什么
句法树: 
句子依存关系：
	nn(最高峰-2, 世界-1)
	top(是-3, 最高峰-2)
	root(ROOT-0, 是-3)
	attr(是-3, 什么-4)
主谓宾：最高峰 是 什么
主谓宾词和词性序列：最高峰/ns 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界最高峰是什么 : 世界最高峰是什么 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 世界/n 最高峰/ns 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 最高峰/ns 是/v 什么/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【世界最高峰是什么】匹配到多个模式：
序号：1
	问题 : 世界/n 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 世界最高峰是什么
	模式 : 世界最高峰是什么
	分类 : Location
序号：6
	问题 : n/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界最高峰是什么
	模式 : 世界最高峰是什么
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界/n 最高峰/ns 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 最高峰/ns 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 180：世界最高峰是什么 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界最高峰是什么
Question 候选答案：
珠穆朗玛峰  1.0
中国  0.5629033845472862
我国  0.49995320343604743
珠穆朗玛  0.48296236590525965
钦博拉索山  0.47363880143026005
喜马拉雅山脉  0.4025793573547441
尼泊尔  0.3378935662808552
亚洲  0.3222381863455861
西藏  0.24119771771381537
定日县  0.24119200991989442
尼泊尔王国  0.2411698052043574
高峰  0.16147219118013414
地球  0.16099013938807324
ExpectAnswerRank: 1

mrr: 151.3316239316239
perfectCount: 140
notPerfectCount: 32
wrongCount: 8
unknownTypeCount: 0
questionCount: 180

MRR：84.07312440645772%
回答完美率：77.77777777777779%
回答不完美率：17.77777777777778%
回答错误率：4.444444444444445%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:法罗群岛是属于哪个北欧国家的:丹麦
Question:法罗群岛是属于哪个北欧国家的
ExpectAnswer:丹麦
没有从数据库中查询到问题：法罗群岛是属于哪个北欧国家的
Question：法罗群岛是属于哪个北欧国家的 搜索到Evidence 9 条
将Question：法罗群岛是属于哪个北欧国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 法罗群岛是属于哪个北欧国家的
问题：法罗群岛是属于哪个北欧国家的
词和词性序列：法罗群岛/ns 是/v 属于/v 哪个/RW.RWOrdinarySingle 北欧国家/n 的/uj 
词性序列：ns/v/v/RW.RWOrdinarySingle/n/uj
对问题进行分词：法罗群岛是属于哪个北欧国家的
分词结果为：法罗群岛 是 属于 哪个 北欧国家 的
句法树: 
句子依存关系：
	advmod(是-2, 法罗群岛-1)
	root(ROOT-0, 是-2)
	attr(是-2, 属于-3)
	det(北欧国家-5, 哪个-4)
	dobj(属于-3, 北欧国家-5)
	cpm(属于-3, 的-6)
主谓宾：法罗群岛 是 属于
主谓宾词和词性序列：法罗群岛/ns 是/v 属于/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 法罗群岛是属于哪个北欧国家的 : 法罗群岛是属于哪个北欧国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 法罗群岛/ns 是/v 属于/v 哪个/RW.RWOrdinarySingle 北欧国家/n 的/uj  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/v/RW.RWOrdinarySingle/n/uj : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【法罗群岛是属于哪个北欧国家的】匹配到多个模式：
序号：1
	问题 : 法罗群岛/ns 是/v 属于/v 哪个/RW.RWOrdinarySingle 北欧国家/n 的/uj 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/v/RW.RWOrdinarySingle/n/uj
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 法罗群岛是属于哪个北欧国家的
	模式 : 法罗群岛是属于哪个北欧国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 法罗群岛是属于哪个北欧国家的
	模式 : 法罗群岛是属于哪个北欧国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 法罗群岛/ns 是/v 属于/v 哪个/RW.RWOrdinarySingle 北欧国家/n 的/uj 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/v/RW.RWOrdinarySingle/n/uj
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 181：法罗群岛是属于哪个北欧国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 法罗群岛是属于哪个北欧国家的
Question 候选答案：
丹麦  1.0
北欧  0.8161825732575773
国家  0.7317082328594151
挪威  0.6992015626710041
冰岛  0.48936107525863126
北大西洋  0.2908911873698609
瑞典  0.27995997680378004
芬兰  0.27980513542647717
丹麦王国  0.2265512340316546
斯堪的纳维亚  0.20946321313846766
法国  0.1934102224794571
挪威海  0.19336105586892285
位置  0.1932973374522416
欧洲  0.14723831289608744
河南  0.14546586112086382
奥兰  0.12900538844579937
岛屿  0.09753125025383283
地方  0.09693307172046443
苏格兰  0.09692215642754269
西临  0.06573550096819297
大西洋  0.06562591858757784
东欧  0.065381312138742
北冰洋  0.06523931769955983
中欧  0.06511328181731031
ExpectAnswerRank: 1

mrr: 152.3316239316239
perfectCount: 141
notPerfectCount: 32
wrongCount: 8
unknownTypeCount: 0
questionCount: 181

MRR：84.16111819426735%
回答完美率：77.90055248618785%
回答不完美率：17.67955801104972%
回答错误率：4.41988950276243%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:凡尔登战役是在哪国打的:法国
Question:凡尔登战役是在哪国打的
ExpectAnswer:法国
没有从数据库中查询到问题：凡尔登战役是在哪国打的
Question：凡尔登战役是在哪国打的 搜索到Evidence 9 条
将Question：凡尔登战役是在哪国打的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 凡尔登战役是在哪国打的
问题：凡尔登战役是在哪国打的
词和词性序列：凡尔登/nr 战役/n 是/v 在/p 哪国/RW.RWLocationSingle 打的/v 
词性序列：nr/n/v/p/RW.RWLocationSingle/v
对问题进行分词：凡尔登战役是在哪国打的
分词结果为：凡尔登 战役 是 在 哪国 打的
句法树: 
句子依存关系：
	nn(战役-2, 凡尔登-1)
	top(打的-6, 战役-2)
	cop(打的-6, 是-3)
	prep(打的-6, 在-4)
	pobj(在-4, 哪国-5)
	root(ROOT-0, 打的-6)
主谓宾：战役 打的 在
主谓宾词和词性序列：战役/n 打的/v 在/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 凡尔登战役是在哪国打的 : 凡尔登战役是在哪国打的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 凡尔登/nr 战役/n 是/v 在/p 哪国/RW.RWLocationSingle 打的/v  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/n/v/p/RW.RWLocationSingle/v : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【凡尔登战役是在哪国打的】匹配到多个模式：
序号：1
	问题 : 凡尔登/nr 战役/n 是/v 在/p 哪国/RW.RWLocationSingle 打的/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/n/v/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 凡尔登战役是在哪国打的
	模式 : 凡尔登战役是在哪国打的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 凡尔登战役是在哪国打的
	模式 : 凡尔登战役是在哪国打的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 凡尔登/nr 战役/n 是/v 在/p 哪国/RW.RWLocationSingle 打的/v 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/n/v/p/RW.RWLocationSingle/v
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 182：凡尔登战役是在哪国打的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 凡尔登战役是在哪国打的
Question 候选答案：
德国  1.0
法国  0.8351514249877807
北美  0.4440487428353765
中国  0.3899260526963494
利牙  0.14827904534298456
意大利  0.14821154837728273
城市  0.14788036710442268
ExpectAnswerRank: 2

mrr: 152.8316239316239
perfectCount: 141
notPerfectCount: 33
wrongCount: 8
unknownTypeCount: 0
questionCount: 182

MRR：83.9734197426505%
回答完美率：77.47252747252747%
回答不完美率：18.13186813186813%
回答错误率：4.395604395604396%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:非洲英雄马赫迪是哪个国家的:苏丹
Question:非洲英雄马赫迪是哪个国家的
ExpectAnswer:苏丹
没有从数据库中查询到问题：非洲英雄马赫迪是哪个国家的
Question：非洲英雄马赫迪是哪个国家的 搜索到Evidence 9 条
将Question：非洲英雄马赫迪是哪个国家的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 非洲英雄马赫迪是哪个国家的
问题：非洲英雄马赫迪是哪个国家的
词和词性序列：非洲/ns 英雄/nr 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 
词性序列：ns/nr/nr/v/RW.RWLocationSingle/uj
对问题进行分词：非洲英雄马赫迪是哪个国家的
分词结果为：非洲 英雄 马赫迪 是 哪个国家 的
句法树: 
句子依存关系：
	nn(马赫迪-3, 非洲-1)
	nn(马赫迪-3, 英雄-2)
	top(是-4, 马赫迪-3)
	root(ROOT-0, 是-4)
	attr(是-4, 哪个国家-5)
	cpm(哪个国家-5, 的-6)
主谓宾：马赫迪 是 哪个国家
主谓宾词和词性序列：马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：nr/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 非洲英雄马赫迪是哪个国家的 : 非洲英雄马赫迪是哪个国家的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 非洲/ns 英雄/nr 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/nr/nr/v/RW.RWLocationSingle/uj : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【非洲英雄马赫迪是哪个国家的】匹配到多个模式：
序号：1
	问题 : 非洲/ns 英雄/nr 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/nr/nr/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nr/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 非洲英雄马赫迪是哪个国家的
	模式 : 非洲英雄马赫迪是哪个国家的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 非洲英雄马赫迪是哪个国家的
	模式 : 非洲英雄马赫迪是哪个国家的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 非洲/ns 英雄/nr 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/nr/nr/v/RW.RWLocationSingle/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 马赫迪/nr 是/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nr/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 183：非洲英雄马赫迪是哪个国家的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 非洲英雄马赫迪是哪个国家的
Question 候选答案：
苏丹  1.0
太阳  0.35033798978688496
云南  0.33751559748428506
地球  0.3374726315659491
岛屿  0.17530023825698815
国家  0.09275331979321703
海地  0.08972488909604483
区域  0.08546522279530477
星星  0.08546016518588051
ExpectAnswerRank: 1

mrr: 153.8316239316239
perfectCount: 142
notPerfectCount: 33
wrongCount: 8
unknownTypeCount: 0
questionCount: 183

MRR：84.06099668394748%
回答完美率：77.59562841530054%
回答不完美率：18.0327868852459%
回答错误率：4.371584699453552%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:歌剧诞生于哪个国家:意大利
Question:歌剧诞生于哪个国家
ExpectAnswer:意大利
没有从数据库中查询到问题：歌剧诞生于哪个国家
Question：歌剧诞生于哪个国家 搜索到Evidence 9 条
将Question：歌剧诞生于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 歌剧诞生于哪个国家
问题：歌剧诞生于哪个国家
词和词性序列：歌剧/n 诞生/v 于/p 哪个国家/RW.RWLocationSingle 
词性序列：n/v/p/RW.RWLocationSingle
对问题进行分词：歌剧诞生于哪个国家
分词结果为：歌剧 诞生 于 哪个国家
句法树: 
句子依存关系：
	nsubj(诞生-2, 歌剧-1)
	root(ROOT-0, 诞生-2)
	prep(诞生-2, 于-3)
	pobj(于-3, 哪个国家-4)
主谓宾：歌剧 诞生 于
主谓宾词和词性序列：歌剧/n 诞生/v 于/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 歌剧诞生于哪个国家 : 歌剧诞生于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 歌剧/n 诞生/v 于/p 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/p/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【歌剧诞生于哪个国家】匹配到多个模式：
序号：1
	问题 : 歌剧/n 诞生/v 于/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 歌剧诞生于哪个国家
	模式 : 歌剧诞生于哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 歌剧诞生于哪个国家
	模式 : 歌剧诞生于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 歌剧/n 诞生/v 于/p 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 184：歌剧诞生于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 歌剧诞生于哪个国家
Question 候选答案：
意大利  1.0
佛罗伦萨  0.30311350947756294
马尼拉  0.12353245015762758
城市  0.10753014032118545
首都  0.10743574472565555
菲律宾  0.1073872721187996
湄公河  0.10733066122784914
亚洲  0.10728905925657681
泰国  0.10727584996370791
老挝  0.10726877487784298
缅甸  0.1072622468441685
西藏  0.10725242002898046
我国  0.1072488142471592
希腊  0.0767311948965207
古希腊  0.0766628263968498
ExpectAnswerRank: 1

mrr: 154.8316239316239
perfectCount: 143
notPerfectCount: 33
wrongCount: 8
unknownTypeCount: 0
questionCount: 184

MRR：84.14762170196951%
回答完美率：77.71739130434783%
回答不完美率：17.934782608695652%
回答错误率：4.3478260869565215%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:国际法院设在哪个国家:荷兰
Question:国际法院设在哪个国家
ExpectAnswer:荷兰
没有从数据库中查询到问题：国际法院设在哪个国家
Question：国际法院设在哪个国家 搜索到Evidence 9 条
将Question：国际法院设在哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 国际法院设在哪个国家
问题：国际法院设在哪个国家
词和词性序列：国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle 
词性序列：nt/v/RW.RWLocationSingle
对问题进行分词：国际法院设在哪个国家
分词结果为：国际法院 设在 哪个国家
句法树: 
句子依存关系：
	nsubj(设在-2, 国际法院-1)
	root(ROOT-0, 设在-2)
	dobj(设在-2, 哪个国家-3)
主谓宾：国际法院 设在 哪个国家
主谓宾词和词性序列：国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：nt/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 国际法院设在哪个国家 : 国际法院设在哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nt/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nt/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【国际法院设在哪个国家】匹配到多个模式：
序号：1
	问题 : 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 国际法院设在哪个国家
	模式 : 国际法院设在哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 国际法院设在哪个国家
	模式 : 国际法院设在哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 国际法院/nt 设在/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 185：国际法院设在哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 国际法院设在哪个国家
Question 候选答案：
荷兰  1.0
海牙  0.6739261464370722
和平宫  0.23987647581981605
城市  0.1825534620645665
国籍  0.13946663357641734
纽伦堡  0.04161694816111146
德国  0.0415057322750461
日本  0.04139488043443431
横滨  0.04138338423636336
ExpectAnswerRank: 1

mrr: 155.8316239316239
perfectCount: 144
notPerfectCount: 33
wrongCount: 8
unknownTypeCount: 0
questionCount: 185

MRR：84.23331023331022%
回答完美率：77.83783783783784%
回答不完美率：17.83783783783784%
回答错误率：4.324324324324325%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:海岸线最长的国家是哪个:印度尼西亚
Question:海岸线最长的国家是哪个
ExpectAnswer:印度尼西亚
没有从数据库中查询到问题：海岸线最长的国家是哪个
Question：海岸线最长的国家是哪个 搜索到Evidence 9 条
将Question：海岸线最长的国家是哪个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 海岸线最长的国家是哪个
问题：海岸线最长的国家是哪个
词和词性序列：海岸线/n 最长/a 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
词性序列：n/a/uj/ns/v/RW.RWOrdinarySingle
对问题进行分词：海岸线最长的国家是哪个
分词结果为：海岸线 最长 的 国家 是 哪个
句法树: 
句子依存关系：
	nn(最长-2, 海岸线-1)
	assmod(国家-4, 最长-2)
	assm(最长-2, 的-3)
	top(是-5, 国家-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪个-6)
主谓宾：国家 是 哪个
主谓宾词和词性序列：国家/ns 是/v 哪个/RW.RWOrdinarySingle
主谓宾词性序列：ns/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 海岸线最长的国家是哪个 : 海岸线最长的国家是哪个 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).* : LocationOfSOB->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 海岸线/n 最长/a 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/a/uj/ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 国家/ns 是/v 哪个/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【海岸线最长的国家是哪个】匹配到多个模式：
序号：1
	问题 : 海岸线/n 最长/a 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 海岸线最长的国家是哪个
	模式 : 海岸线最长的国家是哪个
	分类 : Location
序号：6
	问题 : n/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：7
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 海岸线最长的国家是哪个
	模式 : 海岸线最长的国家是哪个
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
序号：2
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf)/(V)/(RW.RWOrdinarySingle).*
	分类 : LocationOfSOB->Single4
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 海岸线/n 最长/a 的/uj 国家/ns 是/v 哪个/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/a/uj/ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 国家/ns 是/v 哪个/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 186：海岸线最长的国家是哪个 【问题类型：LOCATION_NAME】
************************************
************************************
Question 海岸线最长的国家是哪个
Question 候选答案：
中国  1.0
加拿大  0.8208332070772185
岛屿  0.779900141402231
北冰洋  0.603404316213459
印度尼西亚  0.6032978979508373
大陆  0.46951633960406425
澳大利亚  0.39094893420652554
亚洲  0.3479881172289175
省区  0.33632535329336494
广东省  0.3361196382779791
长达  0.335785839664467
城市  0.30434688924675707
我国  0.30298982572962146
群岛  0.2901235052400476
地球  0.2848503461270805
威海  0.27749794164609054
烟台市  0.25983249411337733
省份  0.21029305453322458
大洋洲  0.18441819960663572
太平洋  0.18438514583632887
印度洋  0.18436748017850035
地方  0.15230790385039641
北欧  0.1509047851433132
广东  0.14257049929549317
ExpectAnswerRank: 5

mrr: 156.0316239316239
perfectCount: 144
notPerfectCount: 34
wrongCount: 8
unknownTypeCount: 0
questionCount: 186

MRR：83.88796985571177%
回答完美率：77.41935483870968%
回答不完美率：18.27956989247312%
回答错误率：4.301075268817205%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:汉城是哪个国家的首都:韩国
Question:汉城是哪个国家的首都
ExpectAnswer:韩国
没有从数据库中查询到问题：汉城是哪个国家的首都
Question：汉城是哪个国家的首都 搜索到Evidence 9 条
将Question：汉城是哪个国家的首都 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 汉城是哪个国家的首都
问题：汉城是哪个国家的首都
词和词性序列：汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns 
词性序列：ns/v/RW.RWLocationSingle/uj/ns
对问题进行分词：汉城是哪个国家的首都
分词结果为：汉城 是 哪个国家 的 首都
句法树: 
句子依存关系：
	top(是-2, 汉城-1)
	root(ROOT-0, 是-2)
	assmod(首都-5, 哪个国家-3)
	assm(哪个国家-3, 的-4)
	attr(是-2, 首都-5)
主谓宾：汉城 是 首都
主谓宾词和词性序列：汉城/ns 是/v 首都/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 汉城是哪个国家的首都 : 汉城是哪个国家的首都 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle/uj/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/v/RW.RWLocationSingle/uj/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【汉城是哪个国家的首都】匹配到多个模式：
序号：1
	问题 : 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 汉城是哪个国家的首都
	模式 : 汉城是哪个国家的首都
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 汉城是哪个国家的首都
	模式 : 汉城是哪个国家的首都
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 汉城/ns 是/v 哪个国家/RW.RWLocationSingle 的/uj 首都/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/v/RW.RWLocationSingle/uj/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 187：汉城是哪个国家的首都 【问题类型：LOCATION_NAME】
************************************
************************************
Question 汉城是哪个国家的首都
Question 候选答案：
韩国  1.0
朝鲜  0.5183570690098223
城市  0.29529871219166764
中国  0.2470140632623231
汉城市  0.1385184109086398
朝鲜半岛  0.10841150945209185
盆地  0.10839809124208233
汉江  0.10839458606839145
国家  0.10451034113363682
斯里兰卡  0.0784800245695714
科伦坡  0.07834924007205313
泰国  0.07832881256496615
ExpectAnswerRank: 1

mrr: 157.0316239316239
perfectCount: 145
notPerfectCount: 34
wrongCount: 8
unknownTypeCount: 0
questionCount: 187

MRR：83.97413044471867%
回答完美率：77.54010695187165%
回答不完美率：18.181818181818183%
回答错误率：4.27807486631016%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:金字塔位于哪个国家:埃及
Question:金字塔位于哪个国家
ExpectAnswer:埃及
没有从数据库中查询到问题：金字塔位于哪个国家
Question：金字塔位于哪个国家 搜索到Evidence 8 条
将Question：金字塔位于哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 金字塔位于哪个国家
问题：金字塔位于哪个国家
词和词性序列：金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle 
词性序列：ns/v/RW.RWLocationSingle
对问题进行分词：金字塔位于哪个国家
分词结果为：金字塔 位于 哪个国家
句法树: 
句子依存关系：
	nsubj(位于-2, 金字塔-1)
	root(ROOT-0, 位于-2)
	dobj(位于-2, 哪个国家-3)
主谓宾：金字塔 位于 哪个国家
主谓宾词和词性序列：金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 金字塔位于哪个国家 : 金字塔位于哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【金字塔位于哪个国家】匹配到多个模式：
序号：1
	问题 : 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 金字塔位于哪个国家
	模式 : 金字塔位于哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金字塔位于哪个国家
	模式 : 金字塔位于哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 金字塔/ns 位于/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 188：金字塔位于哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 金字塔位于哪个国家
Question 候选答案：
埃及  1.0
国家  0.9978550942732063
吉萨  0.4769188038461276
建筑  0.4131608915831359
开罗  0.2699291079416152
美洲国家  0.2622286325396173
中国  0.254885479673975
太阳  0.24726335662486904
城市  0.24245270578084283
巴比伦王国  0.23824459119066205
中东  0.20743125635042642
非洲  0.2068159351258064
大国  0.20667522806863284
产地  0.2065249621760048
广东  0.20649639756833063
东莞市  0.20647916629653137
墨西哥  0.20636228681106641
古埃及  0.17500919974471593
ExpectAnswerRank: 1

mrr: 158.0316239316239
perfectCount: 146
notPerfectCount: 34
wrongCount: 8
unknownTypeCount: 0
questionCount: 188

MRR：84.05937443171484%
回答完美率：77.6595744680851%
回答不完美率：18.085106382978726%
回答错误率：4.25531914893617%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:凯撒大帝统治着哪个国家:罗马
Question:凯撒大帝统治着哪个国家
ExpectAnswer:罗马
没有从数据库中查询到问题：凯撒大帝统治着哪个国家
Question：凯撒大帝统治着哪个国家 搜索到Evidence 10 条
将Question：凯撒大帝统治着哪个国家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 凯撒大帝统治着哪个国家
问题：凯撒大帝统治着哪个国家
词和词性序列：凯撒大帝/nrt 统治/v 着/uz 哪个国家/RW.RWLocationSingle 
词性序列：nrt/v/uz/RW.RWLocationSingle
对问题进行分词：凯撒大帝统治着哪个国家
分词结果为：凯撒大帝 统治 着 哪个国家
句法树: 
句子依存关系：
	nsubj(统治-2, 凯撒大帝-1)
	root(ROOT-0, 统治-2)
	asp(统治-2, 着-3)
	dobj(统治-2, 哪个国家-4)
主谓宾：凯撒大帝 统治 哪个国家
主谓宾词和词性序列：凯撒大帝/nrt 统治/v 哪个国家/RW.RWLocationSingle
主谓宾词性序列：nrt/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 凯撒大帝统治着哪个国家 : 凯撒大帝统治着哪个国家 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 凯撒大帝/nrt 统治/v 着/uz 哪个国家/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nrt/v/uz/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 凯撒大帝/nrt 统治/v 哪个国家/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nrt/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【凯撒大帝统治着哪个国家】匹配到多个模式：
序号：1
	问题 : 凯撒大帝/nrt 统治/v 着/uz 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nrt/v/uz/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 凯撒大帝/nrt 统治/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nrt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 凯撒大帝统治着哪个国家
	模式 : 凯撒大帝统治着哪个国家
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 凯撒大帝统治着哪个国家
	模式 : 凯撒大帝统治着哪个国家
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 凯撒大帝/nrt 统治/v 着/uz 哪个国家/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nrt/v/uz/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 凯撒大帝/nrt 统治/v 哪个国家/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : nrt/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 189：凯撒大帝统治着哪个国家 【问题类型：LOCATION_NAME】
************************************
************************************
Question 凯撒大帝统治着哪个国家
Question 候选答案：
国家  1.0
罗马  0.8457031150812081
亚历山大  0.6777121801847318
意大利  0.6212065840185632
波斯  0.5079731939528732
中国  0.506507110912167
印度  0.47289118167755106
地中海  0.47289118167755106
欧洲  0.4311522750830999
马其顿  0.3777560230792538
希腊  0.3777560230792538
古罗马  0.24285069145187807
克拉苏  0.2368095839077171
古埃及  0.21159037409702106
我国  0.17051936383010288
ExpectAnswerRank: 2

mrr: 158.5316239316239
perfectCount: 146
notPerfectCount: 35
wrongCount: 8
unknownTypeCount: 0
questionCount: 189

MRR：83.87916610138831%
回答完美率：77.24867724867724%
回答不完美率：18.51851851851852%
回答错误率：4.232804232804233%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:五岳中南岳指哪一座:衡山
Question:五岳中南岳指哪一座
ExpectAnswer:衡山
没有从数据库中查询到问题：五岳中南岳指哪一座
Question：五岳中南岳指哪一座 搜索到Evidence 10 条
将Question：五岳中南岳指哪一座 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 五岳中南岳指哪一座
问题：五岳中南岳指哪一座
词和词性序列：五岳/n 中南/ns 岳/n 指/v 哪一座/RW.RWLocationSingle 
词性序列：n/ns/n/v/RW.RWLocationSingle
对问题进行分词：五岳中南岳指哪一座
分词结果为：五岳 中南 岳 指 哪一座
句法树: 
句子依存关系：
	nummod(中南-2, 五岳-1)
	nsubj(指-4, 中南-2)
	advmod(指-4, 岳-3)
	root(ROOT-0, 指-4)
	range(指-4, 哪一座-5)
主谓宾：中南 指 哪一座
主谓宾词和词性序列：中南/ns 指/v 哪一座/RW.RWLocationSingle
主谓宾词性序列：ns/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 五岳中南岳指哪一座 : 五岳中南岳指哪一座 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 五岳/n 中南/ns 岳/n 指/v 哪一座/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/ns/n/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 中南/ns 指/v 哪一座/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【五岳中南岳指哪一座】匹配到多个模式：
序号：1
	问题 : 五岳/n 中南/ns 岳/n 指/v 哪一座/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 中南/ns 指/v 哪一座/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 五岳中南岳指哪一座
	模式 : 五岳中南岳指哪一座
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 五岳中南岳指哪一座
	模式 : 五岳中南岳指哪一座
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 五岳/n 中南/ns 岳/n 指/v 哪一座/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/ns/n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 中南/ns 指/v 哪一座/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 190：五岳中南岳指哪一座 【问题类型：LOCATION_NAME】
************************************
************************************
Question 五岳中南岳指哪一座
Question 候选答案：
南岳  1.0
中国  0.9716157745335844
嵩山  0.845578219874375
衡山  0.8021412333668081
北岳  0.7961025712408546
恒山  0.7960594413011167
东岳泰山  0.7738369049831955
中岳  0.7338170992921994
山东  0.5483370211544047
西岳华山  0.48564238243591673
泰山  0.4611359263164123
陕西  0.37322662366694254
我国  0.33265593107173186
山西  0.27347123423131414
河南  0.2375744413388008
西岳  0.2115697488285373
华山  0.21138014549093087
泰安市  0.1990303312301046
四岳  0.12447325129060319
黄山  0.1119737669191282
湖南省  0.11192165127418546
衡阳  0.11190849925368669
江南  0.1118795988682162
五峰  0.11182842410175367
华阴市  0.09940139263708107
中原地区  0.08709148287098675
华阴县  0.06232802874735078
湖南  0.06225568493141717
长沙  0.06224979393417325
衡山县  0.06223612107393058
ExpectAnswerRank: 4

mrr: 158.7816239316239
perfectCount: 146
notPerfectCount: 36
wrongCount: 8
unknownTypeCount: 0
questionCount: 190

MRR：83.56927575348627%
回答完美率：76.84210526315789%
回答不完美率：18.947368421052634%
回答错误率：4.2105263157894735%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:白暨豚生长在哪条海洋里:长江
Question:白暨豚生长在哪条海洋里
ExpectAnswer:长江
没有从数据库中查询到问题：白暨豚生长在哪条海洋里
Question：白暨豚生长在哪条海洋里 搜索到Evidence 10 条
将Question：白暨豚生长在哪条海洋里 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 白暨豚生长在哪条海洋里
问题：白暨豚生长在哪条海洋里
词和词性序列：白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
词性序列：n/v/p/RW.RWLocationSingle/ns/f
对问题进行分词：白暨豚生长在哪条海洋里
分词结果为：白暨豚 生长 在 哪条 海洋 里
句法树: 
句子依存关系：
	nsubj(生长-2, 白暨豚-1)
	root(ROOT-0, 生长-2)
	prep(生长-2, 在-3)
	nn(海洋-5, 哪条-4)
	lobj(里-6, 海洋-5)
	plmod(在-3, 里-6)
主谓宾：白暨豚 生长 在
主谓宾词和词性序列：白暨豚/n 生长/v 在/p
主谓宾词性序列：n/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 白暨豚生长在哪条海洋里 : 白暨豚生长在哪条海洋里 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/v/p/RW.RWLocationSingle/ns/f : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/p/RW.RWLocationSingle/ns/f : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: n/v/p/RW.RWLocationSingle/ns/f : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f  : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single6
匹配成功: n/v/p/RW.RWLocationSingle/ns/f : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【白暨豚生长在哪条海洋里】匹配到多个模式：
序号：1
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：6
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：7
	问题 : 白暨豚生长在哪条海洋里
	模式 : 白暨豚生长在哪条海洋里
	分类 : Location
序号：8
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白暨豚生长在哪条海洋里
	模式 : 白暨豚生长在哪条海洋里
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 白暨豚/n 生长/v 在/p 哪条/RW.RWLocationSingle 海洋/ns 里/f 
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
序号：6
	问题 : n/v/p/RW.RWLocationSingle/ns/f
	模式 : .*(P.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 191：白暨豚生长在哪条海洋里 【问题类型：LOCATION_NAME】
************************************
************************************
Question 白暨豚生长在哪条海洋里
Question 候选答案：
长江  1.0
中国  0.5967755080881341
国家  0.4435129083168797
连云港  0.3986753881284384
博物馆  0.29748384178662024
深圳  0.22301949676989447
美国  0.21474127236001164
武汉  0.19745359815482605
长江下游  0.17641139084352261
南山区  0.17301345474169766
蛇口  0.17283749012619726
长江口  0.15637856207689024
广州  0.09960800798957861
湖北  0.08383418238492457
洞庭湖  0.08029342744339103
钱塘江  0.07883517661215386
支流  0.07809694386300424
湖泊  0.0771031349807644
三峡  0.07548018718856005
我国  0.075305312490337
地点  0.07513298897189066
ExpectAnswerRank: 1

mrr: 159.7816239316239
perfectCount: 147
notPerfectCount: 36
wrongCount: 8
unknownTypeCount: 0
questionCount: 191

MRR：83.65530048776121%
回答完美率：76.96335078534031%
回答不完美率：18.848167539267017%
回答错误率：4.18848167539267%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:世界上落差最大的瀑布是:安赫尔
Question:世界上落差最大的瀑布是
ExpectAnswer:安赫尔
没有从数据库中查询到问题：世界上落差最大的瀑布是
Question：世界上落差最大的瀑布是 搜索到Evidence 9 条
将Question：世界上落差最大的瀑布是 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 世界上落差最大的瀑布是
问题：世界上落差最大的瀑布是
词和词性序列：世界/n 上/f 落差/n 最大/a 的/uj 瀑布/N.Object 是/v 
词性序列：n/f/n/a/uj/N.Object/v
对问题进行分词：世界上落差最大的瀑布是
分词结果为：世界 上 落差 最大 的 瀑布 是
句法树: 
句子依存关系：
	lobj(上-2, 世界-1)
	loc(是-7, 上-2)
	nn(瀑布-6, 落差-3)
	assmod(瀑布-6, 最大-4)
	assm(最大-4, 的-5)
	top(是-7, 瀑布-6)
	root(ROOT-0, 是-7)
主谓宾：瀑布 是 瀑布
主谓宾词和词性序列：瀑布/N.Object 是/v 瀑布/N.Object
主谓宾词性序列：N.Object/v/N.Object

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 世界上落差最大的瀑布是 : 世界上落差最大的瀑布是 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 世界上落差最大的瀑布是
	模式 : 世界上落差最大的瀑布是
	分类 : Location
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 192：世界上落差最大的瀑布是 【问题类型：LOCATION_NAME】
************************************
************************************
Question 世界上落差最大的瀑布是
Question 候选答案：
圭亚那  1.0
马山  0.9107025593079648
委内瑞拉  0.7287612856594764
平顶山  0.5530402871489437
三国  0.5529783925281062
巴西  0.5529583708601676
尼亚加拉  0.4496992970027026
秘鲁  0.2844593246762333
维多利亚  0.27388002507236275
欧洲  0.2738713064117257
中国  0.26370577941577344
禹州  0.20673666421534306
四川  0.2067258974861048
山上  0.20156296921963202
玻利瓦尔州  0.16540000894132081
卡罗尼河  0.16539342264583803
支流  0.1653916940169828
ExpectAnswerRank: -1

mrr: 159.7816239316239
perfectCount: 147
notPerfectCount: 36
wrongCount: 9
unknownTypeCount: 0
questionCount: 192

MRR：83.21959579772079%
回答完美率：76.5625%
回答不完美率：18.75%
回答错误率：4.6875%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:向日葵州是指哪个州:堪萨斯城
Question:向日葵州是指哪个州
ExpectAnswer:堪萨斯城
没有从数据库中查询到问题：向日葵州是指哪个州
Question：向日葵州是指哪个州 搜索到Evidence 9 条
将Question：向日葵州是指哪个州 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 向日葵州是指哪个州
问题：向日葵州是指哪个州
词和词性序列：向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
词性序列：ns/v/v/RW.RWOrdinarySingle/ns
对问题进行分词：向日葵州是指哪个州
分词结果为：向日葵州 是 指 哪个 州
句法树: 
句子依存关系：
	top(指-3, 向日葵州-1)
	cop(指-3, 是-2)
	root(ROOT-0, 指-3)
	det(州-5, 哪个-4)
	dobj(指-3, 州-5)
	conj(指-3, 是-2)
主谓宾：向日葵州 指 是
主谓宾词和词性序列：向日葵州/ns 指/v 是/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 向日葵州是指哪个州 : 向日葵州是指哪个州 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/v/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/v/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【向日葵州是指哪个州】匹配到多个模式：
序号：1
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 向日葵州是指哪个州
	模式 : 向日葵州是指哪个州
	分类 : Location
序号：8
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 向日葵州是指哪个州
	模式 : 向日葵州是指哪个州
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 向日葵州/ns 是/v 指/v 哪个/RW.RWOrdinarySingle 州/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/v/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 193：向日葵州是指哪个州 【问题类型：LOCATION_NAME】
************************************
************************************
Question 向日葵州是指哪个州
Question 候选答案：
美国  1.0
地区  0.4956855072059443
好莱坞  0.3456409109327252
加利福尼亚州  0.2808384772511504
洛杉矶市  0.28081232874624107
洛杉矶  0.28076929222192976
威斯康星州  0.20304379915342197
欧洲  0.117539215442795
阿肯色州  0.10949060989512334
堪萨斯州  0.08059149724737692
ExpectAnswerRank: -1

mrr: 159.7816239316239
perfectCount: 147
notPerfectCount: 36
wrongCount: 10
unknownTypeCount: 0
questionCount: 193

MRR：82.78840618218854%
回答完美率：76.16580310880829%
回答不完美率：18.65284974093264%
回答错误率：5.181347150259067%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:我国的茂兰自然保护区处在哪个省:贵州
Question:我国的茂兰自然保护区处在哪个省
ExpectAnswer:贵州
没有从数据库中查询到问题：我国的茂兰自然保护区处在哪个省
Question：我国的茂兰自然保护区处在哪个省 搜索到Evidence 9 条
将Question：我国的茂兰自然保护区处在哪个省 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 我国的茂兰自然保护区处在哪个省
问题：我国的茂兰自然保护区处在哪个省
词和词性序列：我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
词性序列：ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
对问题进行分词：我国的茂兰自然保护区处在哪个省
分词结果为：我国 的 茂兰 自然保护区 处在 哪个 省
句法树: 
句子依存关系：
	assmod(茂兰-3, 我国-1)
	assm(我国-1, 的-2)
	nsubj(处在-5, 茂兰-3)
	advmod(处在-5, 自然保护区-4)
	root(ROOT-0, 处在-5)
	det(省-7, 哪个-6)
	dobj(处在-5, 省-7)
主谓宾：茂兰 处在 省
主谓宾词和词性序列：茂兰/ns 处在/v 省/ns
主谓宾词性序列：ns/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 我国的茂兰自然保护区处在哪个省 : 我国的茂兰自然保护区处在哪个省 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/ns/n/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle)/(ns|nsf).* : LocationOfDis->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: ns/uj/ns/n/v/RW.RWOrdinarySingle/ns : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/ns/n/v/RW.RWOrdinarySingle/ns : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: ns/uj/ns/n/v/RW.RWOrdinarySingle/ns : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【我国的茂兰自然保护区处在哪个省】匹配到多个模式：
序号：1
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：7
	问题 : 我国的茂兰自然保护区处在哪个省
	模式 : 我国的茂兰自然保护区处在哪个省
	分类 : Location
序号：8
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国的茂兰自然保护区处在哪个省
	模式 : 我国的茂兰自然保护区处在哪个省
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle)/(ns|nsf).*
	分类 : LocationOfDis->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 我国/ns 的/uj 茂兰/ns 自然保护区/n 处在/v 哪个/RW.RWOrdinarySingle 省/ns 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：6
	问题 : ns/uj/ns/n/v/RW.RWOrdinarySingle/ns
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 194：我国的茂兰自然保护区处在哪个省 【问题类型：LOCATION_NAME】
************************************
************************************
Question 我国的茂兰自然保护区处在哪个省
Question 候选答案：
贵州  1.0
森林  0.6238628353029497
喀斯特  0.5589403360908253
荔波县  0.5585370277024334
中亚  0.37013390362846127
上原  0.36986968295974554
贵州省  0.19515743735182806
景点  0.16039315748205743
ExpectAnswerRank: 1

mrr: 160.7816239316239
perfectCount: 148
notPerfectCount: 36
wrongCount: 10
unknownTypeCount: 0
questionCount: 194

MRR：82.87712573795046%
回答完美率：76.28865979381443%
回答不完美率：18.556701030927837%
回答错误率：5.154639175257731%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:埃菲尔铁塔在哪:法国巴黎
Question:埃菲尔铁塔在哪
ExpectAnswer:法国巴黎
没有从数据库中查询到问题：埃菲尔铁塔在哪
Question：埃菲尔铁塔在哪 搜索到Evidence 8 条
将Question：埃菲尔铁塔在哪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 埃菲尔铁塔在哪
问题：埃菲尔铁塔在哪
词和词性序列：埃菲尔铁塔/ns 在哪/RW.RWLocationSingle 
词性序列：ns/RW.RWLocationSingle
对问题进行分词：埃菲尔铁塔在哪
分词结果为：埃菲尔铁塔 在哪
句法树: 
句子依存关系：
	root(ROOT-0, 埃菲尔铁塔-1)
	dobj(埃菲尔铁塔-1, 在哪-2)
主谓宾：埃菲尔铁塔 在哪
主谓宾词和词性序列：埃菲尔铁塔/ns 在哪/RW.RWLocationSingle
主谓宾词性序列：ns/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 埃菲尔铁塔在哪 : 埃菲尔铁塔在哪 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【埃菲尔铁塔在哪】匹配到多个模式：
序号：1
	问题 : 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 埃菲尔铁塔在哪
	模式 : 埃菲尔铁塔在哪
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 埃菲尔铁塔在哪
	模式 : 埃菲尔铁塔在哪
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 埃菲尔铁塔/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 195：埃菲尔铁塔在哪 【问题类型：LOCATION_NAME】
************************************
************************************
Question 埃菲尔铁塔在哪
Question 候选答案：
巴黎  1.0
法国巴黎  0.8684042555280586
广场  0.5630189853331407
地图  0.45659434954200623
建筑  0.23287234918922065
法国  0.21239907449991885
塞纳河畔  0.12974116984521986
纽约  0.10544905565540441
东京  0.10466613890442164
ExpectAnswerRank: 2

mrr: 161.2816239316239
perfectCount: 148
notPerfectCount: 37
wrongCount: 10
unknownTypeCount: 0
questionCount: 195

MRR：82.70852509314047%
回答完美率：75.8974358974359%
回答不完美率：18.974358974358974%
回答错误率：5.128205128205128%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:巴士底狱在哪:法国巴黎
Question:巴士底狱在哪
ExpectAnswer:法国巴黎
没有从数据库中查询到问题：巴士底狱在哪
Question：巴士底狱在哪 搜索到Evidence 10 条
将Question：巴士底狱在哪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 巴士底狱在哪
问题：巴士底狱在哪
词和词性序列：巴士底狱/ns 在哪/RW.RWLocationSingle 
词性序列：ns/RW.RWLocationSingle
对问题进行分词：巴士底狱在哪
分词结果为：巴士底狱 在哪
句法树: 
句子依存关系：
	root(ROOT-0, 巴士底狱-1)
	dobj(巴士底狱-1, 在哪-2)
主谓宾：巴士底狱 在哪
主谓宾词和词性序列：巴士底狱/ns 在哪/RW.RWLocationSingle
主谓宾词性序列：ns/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 巴士底狱在哪 : 巴士底狱在哪 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 巴士底狱/ns 在哪/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 巴士底狱/ns 在哪/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【巴士底狱在哪】匹配到多个模式：
序号：1
	问题 : 巴士底狱/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴士底狱/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 巴士底狱在哪
	模式 : 巴士底狱在哪
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴士底狱在哪
	模式 : 巴士底狱在哪
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 巴士底狱/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 巴士底狱/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 196：巴士底狱在哪 【问题类型：LOCATION_NAME】
************************************
************************************
Question 巴士底狱在哪
Question 候选答案：
遗址  1.0
法国  0.7538744463584195
景点  0.4016629268544992
巴黎  0.28164428199979663
地方  0.22509250530786457
中国  0.21790496051931316
古城堡  0.1844741190761091
广场  0.16609099168862082
ExpectAnswerRank: -1

mrr: 161.2816239316239
perfectCount: 148
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 196

MRR：82.28654282225709%
回答完美率：75.51020408163265%
回答不完美率：18.877551020408163%
回答错误率：5.612244897959184%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:玻利维亚在哪:南美洲
Question:玻利维亚在哪
ExpectAnswer:南美洲
没有从数据库中查询到问题：玻利维亚在哪
Question：玻利维亚在哪 搜索到Evidence 9 条
将Question：玻利维亚在哪 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 玻利维亚在哪
问题：玻利维亚在哪
词和词性序列：玻利维亚/ns 在哪/RW.RWLocationSingle 
词性序列：ns/RW.RWLocationSingle
对问题进行分词：玻利维亚在哪
分词结果为：玻利维亚 在哪
句法树: 
句子依存关系：
	root(ROOT-0, 玻利维亚-1)
	dobj(玻利维亚-1, 在哪-2)
主谓宾：玻利维亚 在哪
主谓宾词和词性序列：玻利维亚/ns 在哪/RW.RWLocationSingle
主谓宾词性序列：ns/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 玻利维亚在哪 : 玻利维亚在哪 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 玻利维亚/ns 在哪/RW.RWLocationSingle  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 玻利维亚/ns 在哪/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【玻利维亚在哪】匹配到多个模式：
序号：1
	问题 : 玻利维亚/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 玻利维亚/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 玻利维亚在哪
	模式 : 玻利维亚在哪
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 玻利维亚在哪
	模式 : 玻利维亚在哪
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 玻利维亚/ns 在哪/RW.RWLocationSingle 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 玻利维亚/ns 在哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : ns/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 197：玻利维亚在哪 【问题类型：LOCATION_NAME】
************************************
************************************
Question 玻利维亚在哪
Question 候选答案：
南美洲  1.0
首都  0.8600092471153393
拉巴斯  0.4898940030400216
地方  0.33287717661253147
地图  0.327191461917386
北京  0.30553244250056627
宁波  0.24470797699802055
火山  0.24349021737040336
沙漠  0.24267421814151224
喀喀湖  0.2399231648404398
秘鲁  0.2166549373235444
阿根廷  0.21663525384658883
巴西  0.21660633614587632
国家  0.21659095439017817
旅游指南  0.21623237164069428
城市  0.21589071141901917
之城  0.19366075674557542
玻利维亚共和国  0.1228470704901149
国籍  0.1206277853876339
美洲  0.12047035774504504
ExpectAnswerRank: 1

mrr: 162.2816239316239
perfectCount: 149
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 197

MRR：82.37645884854004%
回答完美率：75.63451776649747%
回答不完美率：18.781725888324875%
回答错误率：5.583756345177665%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:项羽是在哪条江边自刎的:乌江
Question:项羽是在哪条江边自刎的
ExpectAnswer:乌江
没有从数据库中查询到问题：项羽是在哪条江边自刎的
Question：项羽是在哪条江边自刎的 搜索到Evidence 10 条
将Question：项羽是在哪条江边自刎的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 项羽是在哪条江边自刎的
问题：项羽是在哪条江边自刎的
词和词性序列：项羽/nr 是/v 在/p 哪条/RW.RWLocationSingle 江边/s 自刎/v 的/uj 
词性序列：nr/v/p/RW.RWLocationSingle/s/v/uj
对问题进行分词：项羽是在哪条江边自刎的
分词结果为：项羽 是 在 哪条 江边 自刎 的
句法树: 
句子依存关系：
	advmod(是-2, 项羽-1)
	root(ROOT-0, 是-2)
	prep(江边-5, 在-3)
	pobj(在-3, 哪条-4)
	attr(是-2, 江边-5)
	dobj(江边-5, 自刎-6)
	cpm(江边-5, 的-7)
主谓宾：项羽 是 江边
主谓宾词和词性序列：项羽/nr 是/v 江边/s
主谓宾词性序列：nr/v/s

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 项羽是在哪条江边自刎的 : 项羽是在哪条江边自刎的 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 项羽/nr 是/v 在/p 哪条/RW.RWLocationSingle 江边/s 自刎/v 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/v/p/RW.RWLocationSingle/s/v/uj : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【项羽是在哪条江边自刎的】匹配到多个模式：
序号：1
	问题 : 项羽/nr 是/v 在/p 哪条/RW.RWLocationSingle 江边/s 自刎/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/p/RW.RWLocationSingle/s/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 项羽是在哪条江边自刎的
	模式 : 项羽是在哪条江边自刎的
	分类 : Location
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 项羽是在哪条江边自刎的
	模式 : 项羽是在哪条江边自刎的
	分类 : Location
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 项羽/nr 是/v 在/p 哪条/RW.RWLocationSingle 江边/s 自刎/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/v/p/RW.RWLocationSingle/s/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 198：项羽是在哪条江边自刎的 【问题类型：LOCATION_NAME】
************************************
************************************
Question 项羽是在哪条江边自刎的
Question 候选答案：
乌江  1.0
江东  0.47129988870363937
长江  0.33413370345548915
安徽  0.20938617008494786
和县  0.20937541561560571
城市  0.18933793290920145
东城  0.12090682825390084
大泽  0.12090198785465717
英布  0.1207722076111064
马鞍山市  0.12075961850230377
乌江镇  0.09672463466015402
ExpectAnswerRank: 1

mrr: 163.2816239316239
perfectCount: 150
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 198

MRR：82.46546663213327%
回答完美率：75.75757575757575%
回答不完美率：18.68686868686869%
回答错误率：5.555555555555555%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/location_name_questions.txt 中加载Question:中国的"母亲河"指哪条河:黄河
Question:中国的"母亲河"指哪条河
ExpectAnswer:黄河
没有从数据库中查询到问题：中国的"母亲河"指哪条河
Question：中国的"母亲河"指哪条河 搜索到Evidence 9 条
将Question：中国的"母亲河"指哪条河 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国的"母亲河"指哪条河
问题：中国的"母亲河"指哪条河
词和词性序列：中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns 
词性序列：ns/uj/n/v/RW.RWLocationSingle/ns
对问题进行分词：中国的"母亲河"指哪条河
分词结果为：中国 的 母亲河 指 哪条 河
句法树: 
句子依存关系：
	assmod(母亲河-3, 中国-1)
	assm(中国-1, 的-2)
	nsubj(指-4, 母亲河-3)
	root(ROOT-0, 指-4)
	amod(河-6, 哪条-5)
	dobj(指-4, 河-6)
主谓宾：母亲河 指 河
主谓宾词和词性序列：母亲河/n 指/v 河/ns
主谓宾词性序列：n/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国的"母亲河"指哪条河 : 中国的"母亲河"指哪条河 : Location
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/n/v/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle)/(ns|nsf).* : LocationOfDis->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/uj/n/v/RW.RWLocationSingle/ns : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns  : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
匹配成功: ns/uj/n/v/RW.RWLocationSingle/ns : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).* : Location->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国的"母亲河"指哪条河】匹配到多个模式：
序号：1
	问题 : 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：5
	问题 : 中国的"母亲河"指哪条河
	模式 : 中国的"母亲河"指哪条河
	分类 : Location
序号：6
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国的"母亲河"指哪条河
	模式 : 中国的"母亲河"指哪条河
	分类 : Location
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle)/(ns|nsf).*
	分类 : LocationOfDis->Single2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 中国/ns 的/uj 母亲河/n 指/v 哪条/RW.RWLocationSingle 河/ns 
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
序号：4
	问题 : ns/uj/n/v/RW.RWLocationSingle/ns
	模式 : .*(V.).*(RW.RWLocationSingle).*(ns|nsf).*
	分类 : Location->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	LOCATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：LOCATION_NAME
开始处理Question 199：中国的"母亲河"指哪条河 【问题类型：LOCATION_NAME】
************************************
************************************
Question 中国的"母亲河"指哪条河
Question 候选答案：
黄河  1.0
黄河流域  0.3356614941678756
长江  0.23662685710258033
遗址  0.20362645241206284
黄河水  0.16500043635719094
山西  0.13193194680672976
海河  0.1265292320244345
国家  0.09423076631384998
城市  0.08843020022570344
太多  0.0828104495575076
安阳  0.0825716736959894
西安  0.08256090084747612
长江流域  0.08255847786825157
洛阳  0.0825516526844654
中华文明  0.08254600329720303
开封  0.08254362581465707
发祥地  0.08254248191365839
华北  0.06059252334136016
ExpectAnswerRank: 1

mrr: 164.2816239316239
perfectCount: 151
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 199

MRR：82.55357986513764%
回答完美率：75.87939698492463%
回答不完美率：18.592964824120603%
回答错误率：5.527638190954774%
未知类型率：0.0%

从Question文件/org/apdplat/qa/files/location_name_questions.txt中加载Question，从baidu中检索到了 199 个Question
从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:爱国华侨陈嘉庚出资兴建的大学是哪一所:厦门大学
Question:爱国华侨陈嘉庚出资兴建的大学是哪一所
ExpectAnswer:厦门大学
没有从数据库中查询到问题：爱国华侨陈嘉庚出资兴建的大学是哪一所
Question：爱国华侨陈嘉庚出资兴建的大学是哪一所 搜索到Evidence 8 条
将Question：爱国华侨陈嘉庚出资兴建的大学是哪一所 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 爱国华侨陈嘉庚出资兴建的大学是哪一所
问题：爱国华侨陈嘉庚出资兴建的大学是哪一所
词和词性序列：爱国华侨/n 陈嘉庚/nr 出资/v 兴建/v 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 一所/m 
词性序列：n/nr/v/v/uj/n.nt/RW.RWLocationSingle/m
对问题进行分词：爱国华侨陈嘉庚出资兴建的大学是哪一所
分词结果为：爱国华侨 陈嘉庚 出资 兴建 的 大学 是哪 一所
句法树: 
句子依存关系：
	nsubj(出资-3, 爱国华侨-1)
	nsubj(出资-3, 陈嘉庚-2)
	root(ROOT-0, 出资-3)
	rcmod(大学-6, 兴建-4)
	cpm(兴建-4, 的-5)
	dobj(出资-3, 大学-6)
	conj(出资-3, 是哪-7)
	range(是哪-7, 一所-8)
主谓宾：爱国华侨 出资 是哪
主谓宾词和词性序列：爱国华侨/n 出资/v 是哪/RW.RWLocationSingle
主谓宾词性序列：n/v/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 爱国华侨陈嘉庚出资兴建的大学是哪一所 : 爱国华侨陈嘉庚出资兴建的大学是哪一所 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 爱国华侨/n 陈嘉庚/nr 出资/v 兴建/v 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 一所/m  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/nr/v/v/uj/n.nt/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 爱国华侨/n 出资/v 是哪/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n/v/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【爱国华侨陈嘉庚出资兴建的大学是哪一所】匹配到多个模式：
序号：1
	问题 : 爱国华侨/n 陈嘉庚/nr 出资/v 兴建/v 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 一所/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/nr/v/v/uj/n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 爱国华侨/n 出资/v 是哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 爱国华侨陈嘉庚出资兴建的大学是哪一所
	模式 : 爱国华侨陈嘉庚出资兴建的大学是哪一所
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 爱国华侨陈嘉庚出资兴建的大学是哪一所
	模式 : 爱国华侨陈嘉庚出资兴建的大学是哪一所
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 爱国华侨/n 陈嘉庚/nr 出资/v 兴建/v 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 一所/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : n/nr/v/v/uj/n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 爱国华侨/n 出资/v 是哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n/v/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 200：爱国华侨陈嘉庚出资兴建的大学是哪一所 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 爱国华侨陈嘉庚出资兴建的大学是哪一所
Question 候选答案：
厦门大学  1.0
华侨大学  0.19513529399481774
汕头大学  0.17112635111771093
福建师范大学  0.17076826134991713
浙江大学  0.15865525598391764
ExpectAnswerRank: 1

mrr: 165.2816239316239
perfectCount: 152
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 200

MRR：82.64081196581195%
回答完美率：76.0%
回答不完美率：18.5%
回答错误率：5.5%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:电影界百花奖的主办单位是什么:中国电影家协会
Question:电影界百花奖的主办单位是什么
ExpectAnswer:中国电影家协会
没有从数据库中查询到问题：电影界百花奖的主办单位是什么
Question：电影界百花奖的主办单位是什么 搜索到Evidence 9 条
将Question：电影界百花奖的主办单位是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 电影界百花奖的主办单位是什么
问题：电影界百花奖的主办单位是什么
词和词性序列：电影界/n 百花奖/n 的/uj 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle 
词性序列：n/n/uj/n.nt/v/RW.RWOrdinarySingle
对问题进行分词：电影界百花奖的主办单位是什么
分词结果为：电影界 百花奖 的 主办单位 是 什么
句法树: 
句子依存关系：
	nn(主办单位-4, 电影界-1)
	assmod(主办单位-4, 百花奖-2)
	assm(百花奖-2, 的-3)
	top(是-5, 主办单位-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：主办单位 是 什么
主谓宾词和词性序列：主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：n.nt/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 电影界百花奖的主办单位是什么 : 电影界百花奖的主办单位是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: n/n/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 电影界/n 百花奖/n 的/uj 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n/n/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【电影界百花奖的主办单位是什么】匹配到多个模式：
序号：1
	问题 : 电影界/n 百花奖/n 的/uj 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：2
	问题 : n/n/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：3
	问题 : 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 电影界百花奖的主办单位是什么
	模式 : 电影界百花奖的主办单位是什么
	分类 : Organization
序号：6
	问题 : n/n/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：7
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影界百花奖的主办单位是什么
	模式 : 电影界百花奖的主办单位是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : n/n/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：2
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 电影界/n 百花奖/n 的/uj 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：2
	问题 : n/n/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：3
	问题 : 主办单位/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 201：电影界百花奖的主办单位是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 电影界百花奖的主办单位是什么
Question 候选答案：
中国电影家协会  1.0
ExpectAnswerRank: 1

mrr: 166.2816239316239
perfectCount: 153
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 201

MRR：82.72717608538503%
回答完美率：76.11940298507463%
回答不完美率：18.407960199004975%
回答错误率：5.472636815920398%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家银行的简称是HSBC:汇丰银行
Question:哪家银行的简称是HSBC
ExpectAnswer:汇丰银行
没有从数据库中查询到问题：哪家银行的简称是HSBC
Question：哪家银行的简称是HSBC 搜索到Evidence 10 条
将Question：哪家银行的简称是HSBC 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪家银行的简称是HSBC
问题：哪家银行的简称是HSBC
词和词性序列：哪家/RW.RWORGANIZATIONSingle 银行/n.nt 的/uj 简称/N.CONCEPT 是/v hsbc/en 
词性序列：RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en
对问题进行分词：哪家银行的简称是HSBC
分词结果为：哪家 银行 的 简称 是 hsbc
句法树: 
句子依存关系：
	nn(银行-2, 哪家-1)
	assmod(简称-4, 银行-2)
	assm(银行-2, 的-3)
	top(是-5, 简称-4)
	root(ROOT-0, 是-5)
	attr(是-5, hsbc-6)
主谓宾：简称 是 hsbc
主谓宾词和词性序列：简称/N.CONCEPT 是/v hsbc/en
主谓宾词性序列：N.CONCEPT/v/en

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家银行的简称是HSBC : 哪家银行的简称是HSBC : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
匹配成功: N.CONCEPT/v/en : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 的/uj 简称/N.CONCEPT 是/v hsbc/en  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪家银行的简称是HSBC】匹配到多个模式：
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 的/uj 简称/N.CONCEPT 是/v hsbc/en 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : 哪家银行的简称是HSBC
	模式 : 哪家银行的简称是HSBC
	分类 : Organization
序号：4
	问题 : RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：5
	问题 : N.CONCEPT/v/en
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家银行的简称是HSBC
	模式 : 哪家银行的简称是HSBC
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：2
	问题 : N.CONCEPT/v/en
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 的/uj 简称/N.CONCEPT 是/v hsbc/en 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/uj/N.CONCEPT/v/en
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 202：哪家银行的简称是HSBC 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家银行的简称是HSBC
Question 候选答案：
汇丰银行  1.0
北京市商业银行  0.41108199094287534
中国建设银行  0.3575156346879832
兴业银行  0.31012915356033166
国家开发银行  0.16209616126125714
花旗银行  0.1422954408870527
华夏银行  0.12143724542755603
民生银行  0.11470488729213986
中国银行  0.067427112888963
招商银行  0.06741262189497249
美国花旗银行  0.03385849891446579
ExpectAnswerRank: 1

mrr: 167.2816239316239
perfectCount: 154
notPerfectCount: 37
wrongCount: 11
unknownTypeCount: 0
questionCount: 202

MRR：82.8126851146653%
回答完美率：76.23762376237624%
回答不完美率：18.316831683168317%
回答错误率：5.445544554455446%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:胡锦涛曾经上过哪所大学:清华大学
Question:胡锦涛曾经上过哪所大学
ExpectAnswer:清华大学
没有从数据库中查询到问题：胡锦涛曾经上过哪所大学
Question：胡锦涛曾经上过哪所大学 搜索到Evidence 10 条
将Question：胡锦涛曾经上过哪所大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 胡锦涛曾经上过哪所大学
问题：胡锦涛曾经上过哪所大学
词和词性序列：胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt 
词性序列：nr/d/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：胡锦涛曾经上过哪所大学
分词结果为：胡锦涛 曾经 上过 哪所 大学
句法树: 
句子依存关系：
	nsubj(上过-3, 胡锦涛-1)
	advmod(上过-3, 曾经-2)
	root(ROOT-0, 上过-3)
	nn(大学-5, 哪所-4)
	dobj(上过-3, 大学-5)
主谓宾：胡锦涛 上过 大学
主谓宾词和词性序列：胡锦涛/nr 上过/v 大学/n.nt
主谓宾词性序列：nr/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 胡锦涛曾经上过哪所大学 : 胡锦涛曾经上过哪所大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/d/v/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/d/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【胡锦涛曾经上过哪所大学】匹配到多个模式：
序号：1
	问题 : 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/d/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/d/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 胡锦涛曾经上过哪所大学
	模式 : 胡锦涛曾经上过哪所大学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 胡锦涛曾经上过哪所大学
	模式 : 胡锦涛曾经上过哪所大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/d/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 胡锦涛/nr 曾经/d 上过/v 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/d/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 203：胡锦涛曾经上过哪所大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 胡锦涛曾经上过哪所大学
Question 候选答案：
中国大学  1.0
哈佛大学  0.7588328834018447
牛津大学  0.7580192330231367
清华大学党委  0.24192356973126086
国防科大  0.24109411749218226
中南大学  0.23992312609583596
现代科学  0.19841972140518682
ExpectAnswerRank: -1

mrr: 167.2816239316239
perfectCount: 154
notPerfectCount: 37
wrongCount: 12
unknownTypeCount: 0
questionCount: 203

MRR：82.4047408530167%
回答完美率：75.86206896551724%
回答不完美率：18.226600985221676%
回答错误率：5.911330049261084%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:BMW是哪个汽车公司制造的:宝马汽车公司
Question:BMW是哪个汽车公司制造的
ExpectAnswer:宝马汽车公司
没有从数据库中查询到问题：BMW是哪个汽车公司制造的
Question：BMW是哪个汽车公司制造的 搜索到Evidence 9 条
将Question：BMW是哪个汽车公司制造的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： BMW是哪个汽车公司制造的
问题：BMW是哪个汽车公司制造的
词和词性序列：bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
词性序列：en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
对问题进行分词：BMW是哪个汽车公司制造的
分词结果为：bmw 是 哪个 汽车 公司 制造 的
句法树: 
句子依存关系：
	advmod(是-2, bmw-1)
	root(ROOT-0, 是-2)
	det(公司-5, 哪个-3)
	nn(公司-5, 汽车-4)
	nsubj(制造-6, 公司-5)
	attr(是-2, 制造-6)
	cpm(制造-6, 的-7)
主谓宾：bmw 是 制造
主谓宾词和词性序列：bmw/en 是/v 制造/v
主谓宾词性序列：en/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: BMW是哪个汽车公司制造的 : BMW是哪个汽车公司制造的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(RW.RWOrdinarySingle)/(N.ObjectInstrument).* : ObjectSOB->Instrument3
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(V)/(RW.RWOrdinarySingle)/(N.Object).* : ObjectSOB->OtherSingle1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument1
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument1
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument2
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument2
匹配成功: bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj  : .*(V).*(RW.RWOrdinarySingle).*(N.Object).* : Object->OtherSingle1
匹配成功: en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj : .*(V).*(RW.RWOrdinarySingle).*(N.Object).* : Object->OtherSingle1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【BMW是哪个汽车公司制造的】匹配到多个模式：
序号：1
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：8
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：9
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：10
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：11
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：12
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：13
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：14
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：15
	问题 : BMW是哪个汽车公司制造的
	模式 : BMW是哪个汽车公司制造的
	分类 : Organization
序号：16
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle)/(N.ObjectInstrument).*
	分类 : ObjectSOB->Instrument3
序号：17
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V)/(RW.RWOrdinarySingle)/(N.Object).*
	分类 : ObjectSOB->OtherSingle1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : BMW是哪个汽车公司制造的
	模式 : BMW是哪个汽车公司制造的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle)/(N.ObjectInstrument).*
	分类 : ObjectSOB->Instrument3
序号：2
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V)/(RW.RWOrdinarySingle)/(N.Object).*
	分类 : ObjectSOB->OtherSingle1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：8
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：9
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：10
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：11
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：12
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：13
	问题 : bmw/en 是/v 哪个/RW.RWOrdinarySingle 汽车/N.ObjectInstrument 公司/n.nt 制造/v 的/uj 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：14
	问题 : en/v/RW.RWOrdinarySingle/N.ObjectInstrument/n.nt/v/uj
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 204：BMW是哪个汽车公司制造的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question BMW是哪个汽车公司制造的
Question 候选答案：
宝马汽车公司  1.0
ExpectAnswerRank: 1

mrr: 168.2816239316239
perfectCount: 155
notPerfectCount: 37
wrongCount: 12
unknownTypeCount: 0
questionCount: 204

MRR：82.49099212334505%
回答完美率：75.98039215686273%
回答不完美率：18.137254901960784%
回答错误率：5.88235294117647%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:长城信用卡是哪家银行发行的:中国银行
Question:长城信用卡是哪家银行发行的
ExpectAnswer:中国银行
没有从数据库中查询到问题：长城信用卡是哪家银行发行的
Question：长城信用卡是哪家银行发行的 搜索到Evidence 9 条
将Question：长城信用卡是哪家银行发行的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 长城信用卡是哪家银行发行的
问题：长城信用卡是哪家银行发行的
词和词性序列：长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj 
词性序列：ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj
对问题进行分词：长城信用卡是哪家银行发行的
分词结果为：长城 信用卡 是 哪家 银行 发行 的
句法树: 
句子依存关系：
	nn(信用卡-2, 长城-1)
	top(是-3, 信用卡-2)
	root(ROOT-0, 是-3)
	nn(银行-5, 哪家-4)
	nsubj(发行-6, 银行-5)
	attr(是-3, 发行-6)
	cpm(发行-6, 的-7)
主谓宾：信用卡 是 发行
主谓宾词和词性序列：信用卡/n 是/v 发行/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 长城信用卡是哪家银行发行的 : 长城信用卡是哪家银行发行的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj  : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【长城信用卡是哪家银行发行的】匹配到多个模式：
序号：1
	问题 : 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：4
	问题 : ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：5
	问题 : 长城信用卡是哪家银行发行的
	模式 : 长城信用卡是哪家银行发行的
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长城信用卡是哪家银行发行的
	模式 : 长城信用卡是哪家银行发行的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 长城/ns 信用卡/n 是/v 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 发行/v 的/uj 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：4
	问题 : ns/n/v/RW.RWORGANIZATIONSingle/n.nt/v/uj
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 205：长城信用卡是哪家银行发行的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 长城信用卡是哪家银行发行的
Question 候选答案：
中国银行  1.0
中国建设银行  0.25692790063159837
中国工商银行  0.22114206899993794
中国银行总行  0.09313856309509033
ExpectAnswerRank: 1

mrr: 169.2816239316239
perfectCount: 156
notPerfectCount: 37
wrongCount: 12
unknownTypeCount: 0
questionCount: 205

MRR：82.57640191786531%
回答完美率：76.09756097560975%
回答不完美率：18.048780487804876%
回答错误率：5.853658536585367%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:美国历史上第一所高等学府是哪个学校:哈佛大学
Question:美国历史上第一所高等学府是哪个学校
ExpectAnswer:哈佛大学
没有从数据库中查询到问题：美国历史上第一所高等学府是哪个学校
Question：美国历史上第一所高等学府是哪个学校 搜索到Evidence 9 条
将Question：美国历史上第一所高等学府是哪个学校 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 美国历史上第一所高等学府是哪个学校
问题：美国历史上第一所高等学府是哪个学校
词和词性序列：美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
词性序列：ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：美国历史上第一所高等学府是哪个学校
分词结果为：美国 历史 上 第一所 高等学府 是 哪个 学校
句法树: 
句子依存关系：
	nn(历史-2, 美国-1)
	lobj(上-3, 历史-2)
	dep(高等学府-5, 上-3)
	nummod(高等学府-5, 第一所-4)
	top(是-6, 高等学府-5)
	root(ROOT-0, 是-6)
	det(学校-8, 哪个-7)
	attr(是-6, 学校-8)
主谓宾：高等学府 是 学校
主谓宾词和词性序列：高等学府/l 是/v 学校/n.nt
主谓宾词性序列：l/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国历史上第一所高等学府是哪个学校 : 美国历史上第一所高等学府是哪个学校 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt  : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).* : Time->Holiday
匹配成功: ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).* : Time->Holiday
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国历史上第一所高等学府是哪个学校】匹配到多个模式：
序号：1
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：8
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：9
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：10
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：11
	问题 : 美国历史上第一所高等学府是哪个学校
	模式 : 美国历史上第一所高等学府是哪个学校
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国历史上第一所高等学府是哪个学校
	模式 : 美国历史上第一所高等学府是哪个学校
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：8
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：9
	问题 : 美国/ns 历史/N.TimeOfConcept 上/f 第一所/m 高等学府/l 是/v 哪个/RW.RWOrdinarySingle 学校/n.nt 
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：10
	问题 : ns/N.TimeOfConcept/f/m/l/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 206：美国历史上第一所高等学府是哪个学校 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 美国历史上第一所高等学府是哪个学校
Question 候选答案：
哈佛大学  1.0
英国剑桥大学  0.08825034687874873
ExpectAnswerRank: 1

mrr: 170.2816239316239
perfectCount: 157
notPerfectCount: 37
wrongCount: 12
unknownTypeCount: 0
questionCount: 206

MRR：82.66098249107957%
回答完美率：76.2135922330097%
回答不完美率：17.96116504854369%
回答错误率：5.825242718446602%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:美国历史最悠久的大学是什么大学:哈佛大学
Question:美国历史最悠久的大学是什么大学
ExpectAnswer:哈佛大学
没有从数据库中查询到问题：美国历史最悠久的大学是什么大学
Question：美国历史最悠久的大学是什么大学 搜索到Evidence 10 条
将Question：美国历史最悠久的大学是什么大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 美国历史最悠久的大学是什么大学
问题：美国历史最悠久的大学是什么大学
词和词性序列：美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
词性序列：ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：美国历史最悠久的大学是什么大学
分词结果为：美国 历史 最 悠久 的 大学 是 什么 大学
句法树: 
句子依存关系：
	nn(历史-2, 美国-1)
	nsubj(悠久-4, 历史-2)
	advmod(悠久-4, 最-3)
	rcmod(大学-6, 悠久-4)
	cpm(悠久-4, 的-5)
	top(是-7, 大学-6)
	root(ROOT-0, 是-7)
	det(大学-9, 什么-8)
	attr(是-7, 大学-9)
主谓宾：大学 是 大学
主谓宾词和词性序列：大学/n.nt 是/v 大学/n.nt
主谓宾词性序列：n.nt/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 美国历史最悠久的大学是什么大学 : 美国历史最悠久的大学是什么大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt  : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).* : Time->Holiday
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).* : Time->Holiday
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【美国历史最悠久的大学是什么大学】匹配到多个模式：
序号：1
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：10
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：11
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：12
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：13
	问题 : 美国历史最悠久的大学是什么大学
	模式 : 美国历史最悠久的大学是什么大学
	分类 : Organization
序号：14
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国历史最悠久的大学是什么大学
	模式 : 美国历史最悠久的大学是什么大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：10
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：11
	问题 : 美国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
序号：12
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.TimeOfConcept).*(V).*(RW.RWOrdinarySingle).*
	分类 : Time->Holiday
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 207：美国历史最悠久的大学是什么大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 美国历史最悠久的大学是什么大学
Question 候选答案：
哈佛大学  1.0
大学部  0.41648955228435436
军事学院  0.3329221613011694
耶鲁大学  0.2951611659682389
ExpectAnswerRank: 1

mrr: 171.2816239316239
perfectCount: 158
notPerfectCount: 37
wrongCount: 12
unknownTypeCount: 0
questionCount: 207

MRR：82.74474586068787%
回答完美率：76.32850241545893%
回答不完美率：17.874396135265698%
回答错误率：5.797101449275362%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:顾秉林是哪个大学的校长:清华大学
Question:顾秉林是哪个大学的校长
ExpectAnswer:清华大学
没有从数据库中查询到问题：顾秉林是哪个大学的校长
Question：顾秉林是哪个大学的校长 搜索到Evidence 9 条
将Question：顾秉林是哪个大学的校长 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 顾秉林是哪个大学的校长
问题：顾秉林是哪个大学的校长
词和词性序列：顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
词性序列：nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
对问题进行分词：顾秉林是哪个大学的校长
分词结果为：顾秉林 是 哪个 大学 的 校长
句法树: 
句子依存关系：
	advmod(是-2, 顾秉林-1)
	root(ROOT-0, 是-2)
	det(大学-4, 哪个-3)
	assmod(校长-6, 大学-4)
	assm(大学-4, 的-5)
	attr(是-2, 校长-6)
主谓宾：顾秉林 是 校长
主谓宾词和词性序列：顾秉林/nr 是/v 校长/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 顾秉林是哪个大学的校长 : 顾秉林是哪个大学的校长 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【顾秉林是哪个大学的校长】匹配到多个模式：
序号：1
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 顾秉林是哪个大学的校长
	模式 : 顾秉林是哪个大学的校长
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 顾秉林是哪个大学的校长
	模式 : 顾秉林是哪个大学的校长
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 顾秉林/nr 是/v 哪个/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 208：顾秉林是哪个大学的校长 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 顾秉林是哪个大学的校长
Question 候选答案：
中国大学  1.0
中国科学院  0.29297028084989657
美国大学  0.2217941353886379
北青网  0.19501608670981754
ExpectAnswerRank: -1

mrr: 171.2816239316239
perfectCount: 158
notPerfectCount: 37
wrongCount: 13
unknownTypeCount: 0
questionCount: 208

MRR：82.3469345825115%
回答完美率：75.96153846153845%
回答不完美率：17.78846153846154%
回答错误率：6.25%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:顾秉林是什么大学的校长:清华大学
Question:顾秉林是什么大学的校长
ExpectAnswer:清华大学
没有从数据库中查询到问题：顾秉林是什么大学的校长
Question：顾秉林是什么大学的校长 搜索到Evidence 9 条
将Question：顾秉林是什么大学的校长 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 顾秉林是什么大学的校长
问题：顾秉林是什么大学的校长
词和词性序列：顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
词性序列：nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
对问题进行分词：顾秉林是什么大学的校长
分词结果为：顾秉林 是 什么 大学 的 校长
句法树: 
句子依存关系：
	advmod(是-2, 顾秉林-1)
	root(ROOT-0, 是-2)
	det(大学-4, 什么-3)
	assmod(校长-6, 大学-4)
	assm(大学-4, 的-5)
	attr(是-2, 校长-6)
主谓宾：顾秉林 是 校长
主谓宾词和词性序列：顾秉林/nr 是/v 校长/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 顾秉林是什么大学的校长 : 顾秉林是什么大学的校长 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【顾秉林是什么大学的校长】匹配到多个模式：
序号：1
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 顾秉林是什么大学的校长
	模式 : 顾秉林是什么大学的校长
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 顾秉林是什么大学的校长
	模式 : 顾秉林是什么大学的校长
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 顾秉林/nr 是/v 什么/RW.RWOrdinarySingle 大学/n.nt 的/uj 校长/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 209：顾秉林是什么大学的校长 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 顾秉林是什么大学的校长
Question 候选答案：
中国大学  1.0
美国大学  0.3339019534409546
复旦大学  0.3095309273534706
北青网  0.3090249311595449
中共中央组织部  0.26282008041349375
中共中央  0.21425623484312387
国务院  0.21422033341945293
ExpectAnswerRank: -1

mrr: 171.2816239316239
perfectCount: 158
notPerfectCount: 37
wrongCount: 14
unknownTypeCount: 0
questionCount: 209

MRR：81.95293011082482%
回答完美率：75.5980861244019%
回答不完美率：17.703349282296653%
回答错误率：6.698564593301436%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:教科文组织的具体名称是什么:联合国教科文组织
Question:教科文组织的具体名称是什么
ExpectAnswer:联合国教科文组织
没有从数据库中查询到问题：教科文组织的具体名称是什么
Question：教科文组织的具体名称是什么 搜索到Evidence 9 条
将Question：教科文组织的具体名称是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 教科文组织的具体名称是什么
问题：教科文组织的具体名称是什么
词和词性序列：教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle 
词性序列：nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle
对问题进行分词：教科文组织的具体名称是什么
分词结果为：教科文组织 的 具体 名称 是 什么
句法树: 
句子依存关系：
	assmod(名称-4, 教科文组织-1)
	assm(教科文组织-1, 的-2)
	amod(名称-4, 具体-3)
	top(是-5, 名称-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：名称 是 什么
主谓宾词和词性序列：名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：N.NameOfConcept/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 教科文组织的具体名称是什么 : 教科文组织的具体名称是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【教科文组织的具体名称是什么】匹配到多个模式：
序号：1
	问题 : 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：2
	问题 : nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：3
	问题 : 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：4
	问题 : nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：5
	问题 : 教科文组织的具体名称是什么
	模式 : 教科文组织的具体名称是什么
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 教科文组织的具体名称是什么
	模式 : 教科文组织的具体名称是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：2
	问题 : nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：3
	问题 : 教科文组织/nt 的/uj 具体/a 名称/N.NameOfConcept 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：4
	问题 : nt/uj/a/N.NameOfConcept/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 210：教科文组织的具体名称是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 教科文组织的具体名称是什么
Question 候选答案：
联合国  1.0
联合国教科文组织  0.4763685301292059
教育部  0.2778185680082794
ExpectAnswerRank: 2

mrr: 171.7816239316239
perfectCount: 158
notPerfectCount: 38
wrongCount: 14
unknownTypeCount: 0
questionCount: 210

MRR：81.80077330077329%
回答完美率：75.23809523809524%
回答不完美率：18.095238095238095%
回答错误率：6.666666666666667%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪个公司的标志是一个“W”在圈里:大众汽车公司
Question:哪个公司的标志是一个“W”在圈里
ExpectAnswer:大众汽车公司
没有从数据库中查询到问题：哪个公司的标志是一个“W”在圈里
Question：哪个公司的标志是一个“W”在圈里 搜索到Evidence 10 条
将Question：哪个公司的标志是一个“W”在圈里 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪个公司的标志是一个“W”在圈里
问题：哪个公司的标志是一个“W”在圈里
词和词性序列：哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q 
词性序列：RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
对问题进行分词：哪个公司的标志是一个“W”在圈里
分词结果为：哪个 公司 的 标志 是 一个 w 在 圈里
句法树: 
句子依存关系：
	det(公司-2, 哪个-1)
	assmod(标志-4, 公司-2)
	assm(公司-2, 的-3)
	nsubj(是-5, 标志-4)
	root(ROOT-0, 是-5)
	nummod(w-7, 一个-6)
	attr(是-5, w-7)
	prep(是-5, 在-8)
	pobj(在-8, 圈里-9)
主谓宾：标志 是 在
主谓宾词和词性序列：标志/N.CONCEPT 是/v 在/p
主谓宾词性序列：N.CONCEPT/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个公司的标志是一个“W”在圈里 : 哪个公司的标志是一个“W”在圈里 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
匹配成功: N.CONCEPT/v/p : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个公司的标志是一个“W”在圈里】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : 哪个公司的标志是一个“W”在圈里
	模式 : 哪个公司的标志是一个“W”在圈里
	分类 : Organization
序号：6
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：7
	问题 : N.CONCEPT/v/p
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个公司的标志是一个“W”在圈里
	模式 : 哪个公司的标志是一个“W”在圈里
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
序号：2
	问题 : N.CONCEPT/v/p
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 标志/N.CONCEPT 是/v 一个/m w/en 在/p 圈里/q 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT/v/m/en/p/q
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 211：哪个公司的标志是一个“W”在圈里 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪个公司的标志是一个“W”在圈里
Question 候选答案：
ExpectAnswerRank: -1

mrr: 171.7816239316239
perfectCount: 158
notPerfectCount: 38
wrongCount: 15
unknownTypeCount: 0
questionCount: 211

MRR：81.41309191072223%
回答完美率：74.88151658767772%
回答不完美率：18.009478672985782%
回答错误率：7.109004739336493%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家石油公司负责中国的石油进出口业务:中国石油天然气集团公司
Question:哪家石油公司负责中国的石油进出口业务
ExpectAnswer:中国石油天然气集团公司
没有从数据库中查询到问题：哪家石油公司负责中国的石油进出口业务
Question：哪家石油公司负责中国的石油进出口业务 搜索到Evidence 9 条
将Question：哪家石油公司负责中国的石油进出口业务 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪家石油公司负责中国的石油进出口业务
问题：哪家石油公司负责中国的石油进出口业务
词和词性序列：哪家/RW.RWORGANIZATIONSingle 石油/N.CONCEPT 公司/n.nt 负责/v 中国/ns 的/uj 石油/N.CONCEPT 进出口/vn 业务/N.ObjectVocation 
词性序列：RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation
对问题进行分词：哪家石油公司负责中国的石油进出口业务
分词结果为：哪家 石油 公司 负责 中国 的 石油 进出口 业务
句法树: 
句子依存关系：
	nn(公司-3, 哪家-1)
	nn(公司-3, 石油-2)
	nsubj(负责-4, 公司-3)
	root(ROOT-0, 负责-4)
	assmod(业务-9, 中国-5)
	assm(中国-5, 的-6)
	nn(业务-9, 石油-7)
	nn(业务-9, 进出口-8)
	dobj(负责-4, 业务-9)
主谓宾：公司 负责 业务
主谓宾词和词性序列：公司/n.nt 负责/v 业务/N.ObjectVocation
主谓宾词性序列：n.nt/v/N.ObjectVocation

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家石油公司负责中国的石油进出口业务 : 哪家石油公司负责中国的石油进出口业务 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation : .*(N.Concept)/(V).* : DefinitionSOB->SubjectVerb
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪家/RW.RWORGANIZATIONSingle 石油/N.CONCEPT 公司/n.nt 负责/v 中国/ns 的/uj 石油/N.CONCEPT 进出口/vn 业务/N.ObjectVocation  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪家石油公司负责中国的石油进出口业务】匹配到多个模式：
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 石油/N.CONCEPT 公司/n.nt 负责/v 中国/ns 的/uj 石油/N.CONCEPT 进出口/vn 业务/N.ObjectVocation 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : 哪家石油公司负责中国的石油进出口业务
	模式 : 哪家石油公司负责中国的石油进出口业务
	分类 : Organization
序号：4
	问题 : RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家石油公司负责中国的石油进出口业务
	模式 : 哪家石油公司负责中国的石油进出口业务
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation
	模式 : .*(N.Concept)/(V).*
	分类 : DefinitionSOB->SubjectVerb
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 石油/N.CONCEPT 公司/n.nt 负责/v 中国/ns 的/uj 石油/N.CONCEPT 进出口/vn 业务/N.ObjectVocation 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/N.CONCEPT/n.nt/v/ns/uj/N.CONCEPT/vn/N.ObjectVocation
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 212：哪家石油公司负责中国的石油进出口业务 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家石油公司负责中国的石油进出口业务
Question 候选答案：
中国石油天然气集团公司  1.0
外贸公司  0.5473026960857929
石油工业部  0.34410010818385817
中国石油天然气股份有限公司  0.3127183190555684
外事局  0.3125227513494576
ExpectAnswerRank: 1

mrr: 172.7816239316239
perfectCount: 159
notPerfectCount: 38
wrongCount: 15
unknownTypeCount: 0
questionCount: 212

MRR：81.50076600548297%
回答完美率：75.0%
回答不完美率：17.92452830188679%
回答错误率：7.0754716981132075%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家银行在北京有最多的办事处:花旗银行
Question:哪家银行在北京有最多的办事处
ExpectAnswer:花旗银行
没有从数据库中查询到问题：哪家银行在北京有最多的办事处
Question：哪家银行在北京有最多的办事处 搜索到Evidence 10 条
将Question：哪家银行在北京有最多的办事处 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪家银行在北京有最多的办事处
问题：哪家银行在北京有最多的办事处
词和词性序列：哪家/RW.RWORGANIZATIONSingle 银行/n.nt 在/p 北京/ns 有/v 最多/d 的/uj 办事处/n 
词性序列：RW.RWORGANIZATIONSingle/n.nt/p/ns/v/d/uj/n
对问题进行分词：哪家银行在北京有最多的办事处
分词结果为：哪家 银行 在 北京 有 最多 的 办事处
句法树: 
句子依存关系：
	nn(银行-2, 哪家-1)
	nsubj(有-5, 银行-2)
	prep(有-5, 在-3)
	pobj(在-3, 北京-4)
	root(ROOT-0, 有-5)
	rcmod(办事处-8, 最多-6)
	cpm(最多-6, 的-7)
	dobj(有-5, 办事处-8)
主谓宾：银行 有 办事处
主谓宾词和词性序列：银行/n.nt 有/v 办事处/n
主谓宾词性序列：n.nt/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家银行在北京有最多的办事处 : 哪家银行在北京有最多的办事处 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 在/p 北京/ns 有/v 最多/d 的/uj 办事处/n  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: RW.RWORGANIZATIONSingle/n.nt/p/ns/v/d/uj/n : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪家银行在北京有最多的办事处】匹配到多个模式：
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 在/p 北京/ns 有/v 最多/d 的/uj 办事处/n 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/p/ns/v/d/uj/n
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : 哪家银行在北京有最多的办事处
	模式 : 哪家银行在北京有最多的办事处
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家银行在北京有最多的办事处
	模式 : 哪家银行在北京有最多的办事处
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 银行/n.nt 在/p 北京/ns 有/v 最多/d 的/uj 办事处/n 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/p/ns/v/d/uj/n
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 213：哪家银行在北京有最多的办事处 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家银行在北京有最多的办事处
Question 候选答案：
建设银行  1.0
渣打银行  0.901009035349219
外资银行  0.8344571988097197
商业银行  0.6577669050142254
北京分行  0.5115548516605152
中国工商银行北京市分行  0.48725279807648486
ExpectAnswerRank: -1

mrr: 172.7816239316239
perfectCount: 159
notPerfectCount: 38
wrongCount: 16
unknownTypeCount: 0
questionCount: 213

MRR：81.11813330123188%
回答完美率：74.64788732394366%
回答不完美率：17.84037558685446%
回答错误率：7.511737089201878%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:《法律援助条例》是由哪个国家部门颁发实施的:中华全国律师协会
Question:《法律援助条例》是由哪个国家部门颁发实施的
ExpectAnswer:中华全国律师协会
没有从数据库中查询到问题：《法律援助条例》是由哪个国家部门颁发实施的
Question：《法律援助条例》是由哪个国家部门颁发实施的 搜索到Evidence 8 条
将Question：《法律援助条例》是由哪个国家部门颁发实施的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 《法律援助条例》是由哪个国家部门颁发实施的
问题：《法律援助条例》是由哪个国家部门颁发实施的
词和词性序列：法律援助/nr 条例/n 是/v 由/p 哪个国家/RW.RWLocationSingle 部门/n.nt 颁发/v 实施/v 的/uj 
词性序列：nr/n/v/p/RW.RWLocationSingle/n.nt/v/v/uj
对问题进行分词：《法律援助条例》是由哪个国家部门颁发实施的
分词结果为：法律援助 条例 是 由 哪个国家 部门 颁发 实施 的
句法树: 
句子依存关系：
	nn(条例-2, 法律援助-1)
	top(是-3, 条例-2)
	root(ROOT-0, 是-3)
	prep(颁发-7, 由-4)
	nn(部门-6, 哪个国家-5)
	pobj(由-4, 部门-6)
	attr(是-3, 颁发-7)
	dobj(颁发-7, 实施-8)
	cpm(颁发-7, 的-9)
主谓宾：条例 是 颁发
主谓宾词和词性序列：条例/n 是/v 颁发/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 《法律援助条例》是由哪个国家部门颁发实施的 : 《法律援助条例》是由哪个国家部门颁发实施的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 法律援助/nr 条例/n 是/v 由/p 哪个国家/RW.RWLocationSingle 部门/n.nt 颁发/v 实施/v 的/uj  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: nr/n/v/p/RW.RWLocationSingle/n.nt/v/v/uj : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【《法律援助条例》是由哪个国家部门颁发实施的】匹配到多个模式：
序号：1
	问题 : 法律援助/nr 条例/n 是/v 由/p 哪个国家/RW.RWLocationSingle 部门/n.nt 颁发/v 实施/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/n/v/p/RW.RWLocationSingle/n.nt/v/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 《法律援助条例》是由哪个国家部门颁发实施的
	模式 : 《法律援助条例》是由哪个国家部门颁发实施的
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 《法律援助条例》是由哪个国家部门颁发实施的
	模式 : 《法律援助条例》是由哪个国家部门颁发实施的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 法律援助/nr 条例/n 是/v 由/p 哪个国家/RW.RWLocationSingle 部门/n.nt 颁发/v 实施/v 的/uj 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : nr/n/v/p/RW.RWLocationSingle/n.nt/v/v/uj
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 214：《法律援助条例》是由哪个国家部门颁发实施的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 《法律援助条例》是由哪个国家部门颁发实施的
Question 候选答案：
国务院  1.0
ExpectAnswerRank: -1

mrr: 172.7816239316239
perfectCount: 159
notPerfectCount: 38
wrongCount: 17
unknownTypeCount: 0
questionCount: 214

MRR：80.73907660356257%
回答完美率：74.29906542056075%
回答不完美率：17.75700934579439%
回答错误率：7.943925233644859%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:UNESCO是什么国际组织的简称:联合国教科文组织
Question:UNESCO是什么国际组织的简称
ExpectAnswer:联合国教科文组织
没有从数据库中查询到问题：UNESCO是什么国际组织的简称
Question：UNESCO是什么国际组织的简称 搜索到Evidence 9 条
将Question：UNESCO是什么国际组织的简称 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： UNESCO是什么国际组织的简称
问题：UNESCO是什么国际组织的简称
词和词性序列：unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
词性序列：en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
对问题进行分词：UNESCO是什么国际组织的简称
分词结果为：unesco 是 什么 国际 组织 的 简称
句法树: 
句子依存关系：
	advmod(是-2, unesco-1)
	root(ROOT-0, 是-2)
	det(组织-5, 什么-3)
	nn(组织-5, 国际-4)
	assmod(简称-7, 组织-5)
	assm(组织-5, 的-6)
	attr(是-2, 简称-7)
主谓宾：unesco 是 简称
主谓宾词和词性序列：unesco/en 是/v 简称/N.CONCEPT
主谓宾词性序列：en/v/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: UNESCO是什么国际组织的简称 : UNESCO是什么国际组织的简称 : Organization
匹配成功: UNESCO是什么国际组织的简称 : UNESCO是什么国际组织的简称 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【UNESCO是什么国际组织的简称】匹配到多个模式：
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：7
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：8
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：9
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：10
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：2
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	2
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 215：UNESCO是什么国际组织的简称 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question UNESCO是什么国际组织的简称
Question 候选答案：
联合国  1.0
联合国教科文组织  0.37347118797260714
ExpectAnswerRank: 2

mrr: 173.2816239316239
perfectCount: 159
notPerfectCount: 39
wrongCount: 17
unknownTypeCount: 0
questionCount: 215

MRR：80.59610415424368%
回答完美率：73.95348837209302%
回答不完美率：18.13953488372093%
回答错误率：7.906976744186046%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:office是由哪个公司开发的:微软公司
Question:office是由哪个公司开发的
ExpectAnswer:微软公司
没有从数据库中查询到问题：office是由哪个公司开发的
Question：office是由哪个公司开发的 搜索到Evidence 9 条
将Question：office是由哪个公司开发的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： office是由哪个公司开发的
问题：office是由哪个公司开发的
词和词性序列：office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
词性序列：en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
对问题进行分词：office是由哪个公司开发的
分词结果为：office 是 由 哪个 公司 开发 的
句法树: 
句子依存关系：
	top(是-2, office-1)
	root(ROOT-0, 是-2)
	prep(开发-6, 由-3)
	det(公司-5, 哪个-4)
	pobj(由-3, 公司-5)
	attr(是-2, 开发-6)
	cpm(开发-6, 的-7)
主谓宾：office 是 开发
主谓宾词和词性序列：office/en 是/v 开发/v
主谓宾词性序列：en/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: office是由哪个公司开发的 : office是由哪个公司开发的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【office是由哪个公司开发的】匹配到多个模式：
序号：1
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：5
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：6
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：7
	问题 : office是由哪个公司开发的
	模式 : office是由哪个公司开发的
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : office是由哪个公司开发的
	模式 : office是由哪个公司开发的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：5
	问题 : office/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：6
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 216：office是由哪个公司开发的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question office是由哪个公司开发的
Question 候选答案：
微软公司  1.0
ExpectAnswerRank: 1

mrr: 174.2816239316239
perfectCount: 160
notPerfectCount: 39
wrongCount: 17
unknownTypeCount: 0
questionCount: 216

MRR：80.68593700538143%
回答完美率：74.07407407407408%
回答不完美率：18.055555555555554%
回答错误率：7.87037037037037%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:windows是由哪个公司开发的:微软公司
Question:windows是由哪个公司开发的
ExpectAnswer:微软公司
没有从数据库中查询到问题：windows是由哪个公司开发的
Question：windows是由哪个公司开发的 搜索到Evidence 9 条
将Question：windows是由哪个公司开发的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： windows是由哪个公司开发的
问题：windows是由哪个公司开发的
词和词性序列：windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
词性序列：en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
对问题进行分词：windows是由哪个公司开发的
分词结果为：windows 是 由 哪个 公司 开发 的
句法树: 
句子依存关系：
	advmod(是-2, windows-1)
	root(ROOT-0, 是-2)
	prep(开发-6, 由-3)
	det(公司-5, 哪个-4)
	pobj(由-3, 公司-5)
	attr(是-2, 开发-6)
	cpm(开发-6, 的-7)
主谓宾：windows 是 开发
主谓宾词和词性序列：windows/en 是/v 开发/v
主谓宾词性序列：en/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: windows是由哪个公司开发的 : windows是由哪个公司开发的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: en/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【windows是由哪个公司开发的】匹配到多个模式：
序号：1
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：5
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：6
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：7
	问题 : windows是由哪个公司开发的
	模式 : windows是由哪个公司开发的
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : windows是由哪个公司开发的
	模式 : windows是由哪个公司开发的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：5
	问题 : windows/en 是/v 由/p 哪个/RW.RWOrdinarySingle 公司/n.nt 开发/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：6
	问题 : en/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 217：windows是由哪个公司开发的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question windows是由哪个公司开发的
Question 候选答案：
微软公司  1.0
ExpectAnswerRank: 1

mrr: 175.2816239316239
perfectCount: 161
notPerfectCount: 39
wrongCount: 17
unknownTypeCount: 0
questionCount: 217

MRR：80.77494190397415%
回答完美率：74.19354838709677%
回答不完美率：17.972350230414747%
回答错误率：7.834101382488479%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:处理两岸同胞文化交流的是哪个政府机构:海峡交流基金会
Question:处理两岸同胞文化交流的是哪个政府机构
ExpectAnswer:海峡交流基金会
没有从数据库中查询到问题：处理两岸同胞文化交流的是哪个政府机构
Question：处理两岸同胞文化交流的是哪个政府机构 搜索到Evidence 10 条
将Question：处理两岸同胞文化交流的是哪个政府机构 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 处理两岸同胞文化交流的是哪个政府机构
问题：处理两岸同胞文化交流的是哪个政府机构
词和词性序列：处理/v 两岸/n 同胞/n 文化交流/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 政府/n.nt 机构/n.nt 
词性序列：v/n/n/n/uj/v/RW.RWOrdinarySingle/n.nt/n.nt
对问题进行分词：处理两岸同胞文化交流的是哪个政府机构
分词结果为：处理 两岸 同胞 文化交流 的 是 哪个 政府 机构
句法树: 
句子依存关系：
	top(是-6, 处理-1)
	nn(同胞-3, 两岸-2)
	nn(文化交流-4, 同胞-3)
	dobj(处理-1, 文化交流-4)
	cpm(处理-1, 的-5)
	root(ROOT-0, 是-6)
	det(机构-9, 哪个-7)
	nn(机构-9, 政府-8)
	attr(是-6, 机构-9)
主谓宾：处理 是 机构
主谓宾词和词性序列：处理/v 是/v 机构/n.nt
主谓宾词性序列：v/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 处理两岸同胞文化交流的是哪个政府机构 : 处理两岸同胞文化交流的是哪个政府机构 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 处理/v 两岸/n 同胞/n 文化交流/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 政府/n.nt 机构/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: v/n/n/n/uj/v/RW.RWOrdinarySingle/n.nt/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【处理两岸同胞文化交流的是哪个政府机构】匹配到多个模式：
序号：1
	问题 : 处理/v 两岸/n 同胞/n 文化交流/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 政府/n.nt 机构/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : v/n/n/n/uj/v/RW.RWOrdinarySingle/n.nt/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : 处理两岸同胞文化交流的是哪个政府机构
	模式 : 处理两岸同胞文化交流的是哪个政府机构
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 处理两岸同胞文化交流的是哪个政府机构
	模式 : 处理两岸同胞文化交流的是哪个政府机构
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 处理/v 两岸/n 同胞/n 文化交流/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 政府/n.nt 机构/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : v/n/n/n/uj/v/RW.RWOrdinarySingle/n.nt/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 218：处理两岸同胞文化交流的是哪个政府机构 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 处理两岸同胞文化交流的是哪个政府机构
Question 候选答案：
文化部  1.0
国务院台办  0.9000381764427481
中央台办  0.8037691889725879
意大利政府  0.803356748373664
中国政府  0.7098518135501062
福建省政府  0.7090108532890559
中国共产党  0.6144103823205345
ExpectAnswerRank: -1

mrr: 175.2816239316239
perfectCount: 161
notPerfectCount: 39
wrongCount: 18
unknownTypeCount: 0
questionCount: 218

MRR：80.4044146475339%
回答完美率：73.85321100917432%
回答不完美率：17.889908256880734%
回答错误率：8.256880733944955%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:江泽民毕业于哪一所大学:上海交通大学
Question:江泽民毕业于哪一所大学
ExpectAnswer:上海交通大学
没有从数据库中查询到问题：江泽民毕业于哪一所大学
Question：江泽民毕业于哪一所大学 搜索到Evidence 9 条
将Question：江泽民毕业于哪一所大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 江泽民毕业于哪一所大学
问题：江泽民毕业于哪一所大学
词和词性序列：江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
词性序列：nr/v/p/RW.RWOrdinarySingle/n.nt
对问题进行分词：江泽民毕业于哪一所大学
分词结果为：江泽民 毕业 于 哪一所 大学
句法树: 
句子依存关系：
	nsubj(毕业-2, 江泽民-1)
	root(ROOT-0, 毕业-2)
	prep(毕业-2, 于-3)
	nummod(大学-5, 哪一所-4)
	pobj(于-3, 大学-5)
主谓宾：江泽民 毕业 于
主谓宾词和词性序列：江泽民/nr 毕业/v 于/p
主谓宾词性序列：nr/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 江泽民毕业于哪一所大学 : 江泽民毕业于哪一所大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/p/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/v/p/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: nr/v/p/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【江泽民毕业于哪一所大学】匹配到多个模式：
序号：1
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：7
	问题 : 江泽民毕业于哪一所大学
	模式 : 江泽民毕业于哪一所大学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 江泽民毕业于哪一所大学
	模式 : 江泽民毕业于哪一所大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 江泽民/nr 毕业/v 于/p 哪一所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 219：江泽民毕业于哪一所大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 江泽民毕业于哪一所大学
Question 候选答案：
中央军委  1.0
上海交通大学  0.9955340483522827
全体同学  0.9849038079111766
西安交通  0.8971844923819581
ExpectAnswerRank: 2

mrr: 175.7816239316239
perfectCount: 161
notPerfectCount: 40
wrongCount: 18
unknownTypeCount: 0
questionCount: 219

MRR：80.26558170393785%
回答完美率：73.51598173515981%
回答不完美率：18.2648401826484%
回答错误率：8.21917808219178%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪个机构执行中国货币政策:中国人民银行
Question:哪个机构执行中国货币政策
ExpectAnswer:中国人民银行
没有从数据库中查询到问题：哪个机构执行中国货币政策
Question：哪个机构执行中国货币政策 搜索到Evidence 9 条
将Question：哪个机构执行中国货币政策 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪个机构执行中国货币政策
问题：哪个机构执行中国货币政策
词和词性序列：哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n 
词性序列：RW.RWOrdinarySingle/n.nt/v/ns/n
对问题进行分词：哪个机构执行中国货币政策
分词结果为：哪个 机构 执行 中国 货币政策
句法树: 
句子依存关系：
	det(机构-2, 哪个-1)
	nsubj(执行-3, 机构-2)
	root(ROOT-0, 执行-3)
	nn(货币政策-5, 中国-4)
	dobj(执行-3, 货币政策-5)
主谓宾：机构 执行 货币政策
主谓宾词和词性序列：机构/n.nt 执行/v 货币政策/n
主谓宾词性序列：n.nt/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个机构执行中国货币政策 : 哪个机构执行中国货币政策 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/n : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/n : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个机构执行中国货币政策】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/n
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：5
	问题 : 哪个机构执行中国货币政策
	模式 : 哪个机构执行中国货币政策
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个机构执行中国货币政策
	模式 : 哪个机构执行中国货币政策
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/n
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 执行/v 中国/ns 货币政策/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 220：哪个机构执行中国货币政策 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪个机构执行中国货币政策
Question 候选答案：
中国人民银行  1.0
国务院  0.5997058745323163
交通银行  0.3102200358412235
中国邮政  0.2654892454418472
ExpectAnswerRank: 1

mrr: 176.7816239316239
perfectCount: 162
notPerfectCount: 40
wrongCount: 18
unknownTypeCount: 0
questionCount: 220

MRR：80.35528360528359%
回答完美率：73.63636363636363%
回答不完美率：18.181818181818183%
回答错误率：8.181818181818182%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:我国哪一银行执行中央银行的职能:中国人民银行
Question:我国哪一银行执行中央银行的职能
ExpectAnswer:中国人民银行
没有从数据库中查询到问题：我国哪一银行执行中央银行的职能
Question：我国哪一银行执行中央银行的职能 搜索到Evidence 9 条
将Question：我国哪一银行执行中央银行的职能 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 我国哪一银行执行中央银行的职能
问题：我国哪一银行执行中央银行的职能
词和词性序列：我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
词性序列：ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
对问题进行分词：我国哪一银行执行中央银行的职能
分词结果为：我国 哪一 银行 执行 中央银行 的 职能
句法树: 
句子依存关系：
	nn(银行-3, 我国-1)
	nummod(银行-3, 哪一-2)
	nsubj(执行-4, 银行-3)
	root(ROOT-0, 执行-4)
	assmod(职能-7, 中央银行-5)
	assm(中央银行-5, 的-6)
	dobj(执行-4, 职能-7)
主谓宾：银行 执行 职能
主谓宾词和词性序列：银行/n.nt 执行/v 职能/N.CONCEPT
主谓宾词性序列：n.nt/v/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 我国哪一银行执行中央银行的职能 : 我国哪一银行执行中央银行的职能 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).* : DefinitionSOB->SubjectVerbObject2
匹配成功: ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).* : DefinitionSOB->SubjectVerbObject2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).* : Definition->Definition1
匹配成功: ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).* : Definition->Definition1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【我国哪一银行执行中央银行的职能】匹配到多个模式：
序号：1
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：6
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：7
	问题 : 我国哪一银行执行中央银行的职能
	模式 : 我国哪一银行执行中央银行的职能
	分类 : Organization
序号：8
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
序号：9
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国哪一银行执行中央银行的职能
	模式 : 我国哪一银行执行中央银行的职能
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
序号：2
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : 我国/ns 哪一/RW.RWOrdinarySingle 银行/n.nt 执行/v 中央银行/nt 的/uj 职能/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：6
	问题 : ns/RW.RWOrdinarySingle/n.nt/v/nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 221：我国哪一银行执行中央银行的职能 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 我国哪一银行执行中央银行的职能
Question 候选答案：
中国人民银行  1.0
农民银行  0.1538077319751454
国务院  0.15373715281832173
ExpectAnswerRank: 1

mrr: 177.7816239316239
perfectCount: 163
notPerfectCount: 40
wrongCount: 18
unknownTypeCount: 0
questionCount: 221

MRR：80.44417372471669%
回答完美率：73.7556561085973%
回答不完美率：18.099547511312217%
回答错误率：8.144796380090497%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:现任中国总理毕业于哪所大学:北京大学
Question:现任中国总理毕业于哪所大学
ExpectAnswer:北京大学
没有从数据库中查询到问题：现任中国总理毕业于哪所大学
Question：现任中国总理毕业于哪所大学 搜索到Evidence 9 条
将Question：现任中国总理毕业于哪所大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 现任中国总理毕业于哪所大学
问题：现任中国总理毕业于哪所大学
词和词性序列：现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
词性序列：v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
对问题进行分词：现任中国总理毕业于哪所大学
分词结果为：现任 中国 总理 毕业 于 哪所 大学
句法树: 
句子依存关系：
	amod(中国-2, 现任-1)
	nn(总理-3, 中国-2)
	nsubj(毕业-4, 总理-3)
	root(ROOT-0, 毕业-4)
	prep(毕业-4, 于-5)
	nn(大学-7, 哪所-6)
	pobj(于-5, 大学-7)
主谓宾：总理 毕业 于
主谓宾词和词性序列：总理/nr 毕业/v 于/p
主谓宾词性序列：nr/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 现任中国总理毕业于哪所大学 : 现任中国总理毕业于哪所大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【现任中国总理毕业于哪所大学】匹配到多个模式：
序号：1
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：6
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：7
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：8
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：9
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：10
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：11
	问题 : 现任中国总理毕业于哪所大学
	模式 : 现任中国总理毕业于哪所大学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 现任中国总理毕业于哪所大学
	模式 : 现任中国总理毕业于哪所大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：4
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：5
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：6
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：7
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：8
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：9
	问题 : 现任/v 中国/ns 总理/nr 毕业/v 于/p 哪所/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：10
	问题 : v/ns/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 222：现任中国总理毕业于哪所大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 现任中国总理毕业于哪所大学
Question 候选答案：
中国共产党  1.0
清华大学电机系  0.5779786612117643
中共中央政治局  0.5120488220887709
国务院  0.4669062173104873
中国大学  0.2923865115069264
同济大学  0.1565522720689819
ExpectAnswerRank: -1

mrr: 177.7816239316239
perfectCount: 163
notPerfectCount: 40
wrongCount: 19
unknownTypeCount: 0
questionCount: 222

MRR：80.08181258181256%
回答完美率：73.42342342342343%
回答不完美率：18.01801801801802%
回答错误率：8.558558558558559%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:香港的立法机构是什么:香港立法会
Question:香港的立法机构是什么
ExpectAnswer:香港立法会
没有从数据库中查询到问题：香港的立法机构是什么
Question：香港的立法机构是什么 搜索到Evidence 9 条
将Question：香港的立法机构是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 香港的立法机构是什么
问题：香港的立法机构是什么
词和词性序列：香港/ns 的/uj 立法机构/n 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/uj/n/v/RW.RWOrdinarySingle
对问题进行分词：香港的立法机构是什么
分词结果为：香港 的 立法机构 是 什么
句法树: 
句子依存关系：
	assmod(立法机构-3, 香港-1)
	assm(香港-1, 的-2)
	top(是-4, 立法机构-3)
	root(ROOT-0, 是-4)
	attr(是-4, 什么-5)
主谓宾：立法机构 是 什么
主谓宾词和词性序列：立法机构/n 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：n/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 香港的立法机构是什么 : 香港的立法机构是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 香港/ns 的/uj 立法机构/n 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/n/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【香港的立法机构是什么】匹配到多个模式：
序号：1
	问题 : 香港/ns 的/uj 立法机构/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 香港的立法机构是什么
	模式 : 香港的立法机构是什么
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 香港的立法机构是什么
	模式 : 香港的立法机构是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 香港/ns 的/uj 立法机构/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 223：香港的立法机构是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 香港的立法机构是什么
Question 候选答案：
香港特别行政区  1.0
香港特别行政区立法会  0.6795091511226155
香港立法会  0.47952274656077604
中华人民共和国香港特别行政区  0.43043407056403993
中央编译出版社  0.323483575149967
英联邦  0.10982471411889802
ExpectAnswerRank: 3

mrr: 178.11495726495724
perfectCount: 163
notPerfectCount: 41
wrongCount: 19
unknownTypeCount: 0
questionCount: 223

MRR：79.87217814572074%
回答完美率：73.09417040358744%
回答不完美率：18.385650224215247%
回答错误率：8.520179372197308%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:比尔盖茨创办了什么公司:微软公司
Question:比尔盖茨创办了什么公司
ExpectAnswer:微软公司
没有从数据库中查询到问题：比尔盖茨创办了什么公司
Question：比尔盖茨创办了什么公司 搜索到Evidence 9 条
将Question：比尔盖茨创办了什么公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 比尔盖茨创办了什么公司
问题：比尔盖茨创办了什么公司
词和词性序列：比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt 
词性序列：nr/v/ul/RW.RWOrdinarySingle/n.nt
对问题进行分词：比尔盖茨创办了什么公司
分词结果为：比尔盖茨 创办 了 什么 公司
句法树: 
句子依存关系：
	nsubj(创办-2, 比尔盖茨-1)
	root(ROOT-0, 创办-2)
	asp(创办-2, 了-3)
	det(公司-5, 什么-4)
	dobj(创办-2, 公司-5)
主谓宾：比尔盖茨 创办 公司
主谓宾词和词性序列：比尔盖茨/nr 创办/v 公司/n.nt
主谓宾词性序列：nr/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 比尔盖茨创办了什么公司 : 比尔盖茨创办了什么公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/ul/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/v/ul/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【比尔盖茨创办了什么公司】匹配到多个模式：
序号：1
	问题 : 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/ul/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/v/ul/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 比尔盖茨创办了什么公司
	模式 : 比尔盖茨创办了什么公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨创办了什么公司
	模式 : 比尔盖茨创办了什么公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/ul/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 比尔盖茨/nr 创办/v 了/ul 什么/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/v/ul/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 224：比尔盖茨创办了什么公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 比尔盖茨创办了什么公司
Question 候选答案：
ExpectAnswerRank: -1

mrr: 178.11495726495724
perfectCount: 163
notPerfectCount: 41
wrongCount: 20
unknownTypeCount: 0
questionCount: 224

MRR：79.51560592185591%
回答完美率：72.76785714285714%
回答不完美率：18.303571428571427%
回答错误率：8.928571428571429%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:英国历史最悠久的大学是哪所:牛津大学
Question:英国历史最悠久的大学是哪所
ExpectAnswer:牛津大学
没有从数据库中查询到问题：英国历史最悠久的大学是哪所
Question：英国历史最悠久的大学是哪所 搜索到Evidence 9 条
将Question：英国历史最悠久的大学是哪所 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 英国历史最悠久的大学是哪所
问题：英国历史最悠久的大学是哪所
词和词性序列：英国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 所/u 
词性序列：ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/RW.RWLocationSingle/u
对问题进行分词：英国历史最悠久的大学是哪所
分词结果为：英国 历史 最 悠久 的 大学 是哪 所
句法树: 
句子依存关系：
	nn(历史-2, 英国-1)
	nsubj(悠久-4, 历史-2)
	advmod(悠久-4, 最-3)
	rcmod(大学-6, 悠久-4)
	cpm(悠久-4, 的-5)
	nsubj(所-8, 大学-6)
	nummod(所-8, 是哪-7)
	root(ROOT-0, 所-8)
主谓宾：大学 所 是哪
主谓宾词和词性序列：大学/n.nt 所/u 是哪/RW.RWLocationSingle
主谓宾词性序列：n.nt/u/RW.RWLocationSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 英国历史最悠久的大学是哪所 : 英国历史最悠久的大学是哪所 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 英国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 所/u  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/RW.RWLocationSingle/u : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 大学/n.nt 所/u 是哪/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n.nt/u/RW.RWLocationSingle : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【英国历史最悠久的大学是哪所】匹配到多个模式：
序号：1
	问题 : 英国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 所/u 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/RW.RWLocationSingle/u
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大学/n.nt 所/u 是哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n.nt/u/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 英国历史最悠久的大学是哪所
	模式 : 英国历史最悠久的大学是哪所
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 英国历史最悠久的大学是哪所
	模式 : 英国历史最悠久的大学是哪所
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 英国/ns 历史/N.TimeOfConcept 最/RW.RWSuperlativeAdj 悠久/a 的/uj 大学/n.nt 是哪/RW.RWLocationSingle 所/u 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/N.TimeOfConcept/RW.RWSuperlativeAdj/a/uj/n.nt/RW.RWLocationSingle/u
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 大学/n.nt 所/u 是哪/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n.nt/u/RW.RWLocationSingle
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 225：英国历史最悠久的大学是哪所 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 英国历史最悠久的大学是哪所
Question 候选答案：
牛津大学  1.0
伦敦大学  0.3444289641602465
英国大学  0.2433523763280304
中国教育部  0.22598866882106125
公安部  0.2259813417252019
ExpectAnswerRank: 1

mrr: 179.11495726495724
perfectCount: 164
notPerfectCount: 41
wrongCount: 20
unknownTypeCount: 0
questionCount: 225

MRR：79.60664767331434%
回答完美率：72.88888888888889%
回答不完美率：18.22222222222222%
回答错误率：8.88888888888889%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:在中国制定货币政策的是哪个银行:中国人民银行
Question:在中国制定货币政策的是哪个银行
ExpectAnswer:中国人民银行
没有从数据库中查询到问题：在中国制定货币政策的是哪个银行
Question：在中国制定货币政策的是哪个银行 搜索到Evidence 9 条
将Question：在中国制定货币政策的是哪个银行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 在中国制定货币政策的是哪个银行
问题：在中国制定货币政策的是哪个银行
词和词性序列：在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
词性序列：p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：在中国制定货币政策的是哪个银行
分词结果为：在 中国 制定 货币政策 的 是 哪个 银行
句法树: 
句子依存关系：
	prep(制定-3, 在-1)
	pobj(在-1, 中国-2)
	top(是-6, 制定-3)
	dobj(制定-3, 货币政策-4)
	cpm(制定-3, 的-5)
	root(ROOT-0, 是-6)
	det(银行-8, 哪个-7)
	attr(是-6, 银行-8)
主谓宾：制定 是 银行
主谓宾词和词性序列：制定/v 是/v 银行/n.nt
主谓宾词性序列：v/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 在中国制定货币政策的是哪个银行 : 在中国制定货币政策的是哪个银行 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【在中国制定货币政策的是哪个银行】匹配到多个模式：
序号：1
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：7
	问题 : 在中国制定货币政策的是哪个银行
	模式 : 在中国制定货币政策的是哪个银行
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 在中国制定货币政策的是哪个银行
	模式 : 在中国制定货币政策的是哪个银行
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 在/p 中国/ns 制定/v 货币政策/n 的/uj 是/v 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : p/ns/v/n/uj/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 226：在中国制定货币政策的是哪个银行 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 在中国制定货币政策的是哪个银行
Question 候选答案：
中国人民银行  1.0
货币政策委员会  0.9259377705790139
中国人民银行货币政策委员会  0.8245304503808776
国务院  0.6559740866747602
中央银行  0.5610852061879168
中国银行  0.5582056242752237
中国工商银行  0.4407485762109802
国家开发银行  0.4406953537098412
ExpectAnswerRank: 1

mrr: 180.11495726495724
perfectCount: 165
notPerfectCount: 41
wrongCount: 20
unknownTypeCount: 0
questionCount: 226

MRR：79.6968837455563%
回答完美率：73.00884955752213%
回答不完美率：18.141592920353983%
回答错误率：8.849557522123893%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:朱熔基总理毕业于哪个大学:清华大学电机系
Question:朱熔基总理毕业于哪个大学
ExpectAnswer:清华大学电机系
没有从数据库中查询到问题：朱熔基总理毕业于哪个大学
Question：朱熔基总理毕业于哪个大学 搜索到Evidence 9 条
将Question：朱熔基总理毕业于哪个大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 朱熔基总理毕业于哪个大学
问题：朱熔基总理毕业于哪个大学
词和词性序列：朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
词性序列：nr/nr/v/p/RW.RWOrdinarySingle/n.nt
对问题进行分词：朱熔基总理毕业于哪个大学
分词结果为：朱熔基 总理 毕业 于 哪个 大学
句法树: 
句子依存关系：
	nn(总理-2, 朱熔基-1)
	nsubj(毕业-3, 总理-2)
	root(ROOT-0, 毕业-3)
	prep(毕业-3, 于-4)
	det(大学-6, 哪个-5)
	pobj(于-4, 大学-6)
主谓宾：总理 毕业 于
主谓宾词和词性序列：总理/nr 毕业/v 于/p
主谓宾词性序列：nr/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 朱熔基总理毕业于哪个大学 : 朱熔基总理毕业于哪个大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【朱熔基总理毕业于哪个大学】匹配到多个模式：
序号：1
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：7
	问题 : 朱熔基总理毕业于哪个大学
	模式 : 朱熔基总理毕业于哪个大学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 朱熔基总理毕业于哪个大学
	模式 : 朱熔基总理毕业于哪个大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 朱熔基/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 227：朱熔基总理毕业于哪个大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 朱熔基总理毕业于哪个大学
Question 候选答案：
国家会计学院  1.0
河南师范大学  0.46006733063312494
麻省理工学院  0.3539322409581421
国务院  0.35116389594421255
中国国际金融有限公司  0.3245862024444659
ExpectAnswerRank: -1

mrr: 180.11495726495724
perfectCount: 165
notPerfectCount: 41
wrongCount: 21
unknownTypeCount: 0
questionCount: 227

MRR：79.34579615196354%
回答完美率：72.68722466960352%
回答不完美率：18.06167400881057%
回答错误率：9.251101321585903%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:李克强总理毕业于哪个大学:北京大学法律系
Question:李克强总理毕业于哪个大学
ExpectAnswer:北京大学法律系
没有从数据库中查询到问题：李克强总理毕业于哪个大学
Question：李克强总理毕业于哪个大学 搜索到Evidence 9 条
将Question：李克强总理毕业于哪个大学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 李克强总理毕业于哪个大学
问题：李克强总理毕业于哪个大学
词和词性序列：李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
词性序列：nr/nr/v/p/RW.RWOrdinarySingle/n.nt
对问题进行分词：李克强总理毕业于哪个大学
分词结果为：李克强 总理 毕业 于 哪个 大学
句法树: 
句子依存关系：
	nn(总理-2, 李克强-1)
	nsubj(毕业-3, 总理-2)
	root(ROOT-0, 毕业-3)
	prep(毕业-3, 于-4)
	det(大学-6, 哪个-5)
	pobj(于-4, 大学-6)
主谓宾：总理 毕业 于
主谓宾词和词性序列：总理/nr 毕业/v 于/p
主谓宾词性序列：nr/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 李克强总理毕业于哪个大学 : 李克强总理毕业于哪个大学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: nr/nr/v/p/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【李克强总理毕业于哪个大学】匹配到多个模式：
序号：1
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：7
	问题 : 李克强总理毕业于哪个大学
	模式 : 李克强总理毕业于哪个大学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 李克强总理毕业于哪个大学
	模式 : 李克强总理毕业于哪个大学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 李克强/nr 总理/nr 毕业/v 于/p 哪个/RW.RWOrdinarySingle 大学/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：6
	问题 : nr/nr/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 228：李克强总理毕业于哪个大学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 李克强总理毕业于哪个大学
Question 候选答案：
国务院  1.0
外交部  0.94258264402886
南京外国语学校  0.40780109682544347
中国政府  0.31463373742106404
新华社  0.2666369710681188
中共中央政治局  0.2459335488020315
河北师范大学  0.2267012070405711
全国代表大会  0.224892632898506
中国国务院  0.18497756569049245
ExpectAnswerRank: -1

mrr: 180.11495726495724
perfectCount: 165
notPerfectCount: 41
wrongCount: 22
unknownTypeCount: 0
questionCount: 228

MRR：78.99778827410405%
回答完美率：72.36842105263158%
回答不完美率：17.982456140350877%
回答错误率：9.649122807017543%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国的国家通讯社是哪家:新华社
Question:中国的国家通讯社是哪家
ExpectAnswer:新华社
没有从数据库中查询到问题：中国的国家通讯社是哪家
Question：中国的国家通讯社是哪家 搜索到Evidence 9 条
将Question：中国的国家通讯社是哪家 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国的国家通讯社是哪家
问题：中国的国家通讯社是哪家
词和词性序列：中国/ns 的/uj 国家/ns 通讯社/n 是/v 哪家/RW.RWORGANIZATIONSingle 
词性序列：ns/uj/ns/n/v/RW.RWORGANIZATIONSingle
对问题进行分词：中国的国家通讯社是哪家
分词结果为：中国 的 国家 通讯社 是 哪家
句法树: 
句子依存关系：
	assmod(通讯社-4, 中国-1)
	assm(中国-1, 的-2)
	nn(通讯社-4, 国家-3)
	top(是-5, 通讯社-4)
	root(ROOT-0, 是-5)
	attr(是-5, 哪家-6)
主谓宾：通讯社 是 哪家
主谓宾词和词性序列：通讯社/n 是/v 哪家/RW.RWORGANIZATIONSingle
主谓宾词性序列：n/v/RW.RWORGANIZATIONSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国的国家通讯社是哪家 : 中国的国家通讯社是哪家 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国的国家通讯社是哪家
	模式 : 中国的国家通讯社是哪家
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 229：中国的国家通讯社是哪家 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国的国家通讯社是哪家
Question 候选答案：
新华社  1.0
新华通讯社  0.35912157247191406
信息中心  0.13986045639429717
国际石油  0.1398297431505006
ExpectAnswerRank: 1

mrr: 181.11495726495724
perfectCount: 166
notPerfectCount: 41
wrongCount: 22
unknownTypeCount: 0
questionCount: 229

MRR：79.0895009890643%
回答完美率：72.48908296943232%
回答不完美率：17.903930131004365%
回答错误率：9.606986899563319%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:HP是哪个公司的简称:惠普公司
Question:HP是哪个公司的简称
ExpectAnswer:惠普公司
没有从数据库中查询到问题：HP是哪个公司的简称
Question：HP是哪个公司的简称 搜索到Evidence 7 条
使用【模式匹配】的方法判断问题类型： HP是哪个公司的简称
问题：HP是哪个公司的简称
词和词性序列：hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
词性序列：en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
对问题进行分词：HP是哪个公司的简称
分词结果为：hp 是 哪个 公司 的 简称
句法树: 
句子依存关系：
	advmod(是-2, hp-1)
	root(ROOT-0, 是-2)
	det(公司-4, 哪个-3)
	assmod(简称-6, 公司-4)
	assm(公司-4, 的-5)
	attr(是-2, 简称-6)
主谓宾：hp 是 简称
主谓宾词和词性序列：hp/en 是/v 简称/N.CONCEPT
主谓宾词性序列：en/v/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: HP是哪个公司的简称 : HP是哪个公司的简称 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
匹配成功: en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
匹配成功: en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【HP是哪个公司的简称】匹配到多个模式：
序号：1
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：6
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：7
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：8
	问题 : HP是哪个公司的简称
	模式 : HP是哪个公司的简称
	分类 : Organization
序号：9
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：10
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : HP是哪个公司的简称
	模式 : HP是哪个公司的简称
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：4
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：6
	问题 : hp/en 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：7
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 230：HP是哪个公司的简称 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question HP是哪个公司的简称
Question 候选答案：
惠普公司  1.0
美国惠普公司  0.5431544090002025
ExpectAnswerRank: 1

mrr: 182.11495726495724
perfectCount: 167
notPerfectCount: 41
wrongCount: 22
unknownTypeCount: 0
questionCount: 230

MRR：79.18041620215533%
回答完美率：72.60869565217392%
回答不完美率：17.82608695652174%
回答错误率：9.565217391304348%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:UNESCO是什么国际组织的简称:联合国教科文组织
Question:UNESCO是什么国际组织的简称
ExpectAnswer:联合国教科文组织
从数据库中查询到Question：UNESCO是什么国际组织的简称
使用【模式匹配】的方法判断问题类型： UNESCO是什么国际组织的简称
问题：UNESCO是什么国际组织的简称
词和词性序列：unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
词性序列：en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
主谓宾词和词性序列：unesco/en 是/v 简称/N.CONCEPT
主谓宾词性序列：en/v/N.CONCEPT

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: UNESCO是什么国际组织的简称 : UNESCO是什么国际组织的简称 : Organization
匹配成功: UNESCO是什么国际组织的简称 : UNESCO是什么国际组织的简称 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : DefinitionDis->DescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT  : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
匹配成功: en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).* : Definition->Definition16
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【UNESCO是什么国际组织的简称】匹配到多个模式：
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：7
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：8
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：9
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：10
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
序号：2
	问题 : UNESCO是什么国际组织的简称
	模式 : UNESCO是什么国际组织的简称
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : DefinitionDis->DescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : unesco/en 是/v 什么/RW.RWOrdinarySingle 国际/n 组织/n.nt 的/uj 简称/N.CONCEPT 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
序号：6
	问题 : en/v/RW.RWOrdinarySingle/n/n.nt/uj/N.CONCEPT
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Concept).*
	分类 : Definition->Definition16
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	2
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 231：UNESCO是什么国际组织的简称 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question UNESCO是什么国际组织的简称
Question 候选答案：
联合国  1.0
联合国教科文组织  0.37347118797260714
ExpectAnswerRank: 2

mrr: 182.61495726495724
perfectCount: 167
notPerfectCount: 42
wrongCount: 22
unknownTypeCount: 0
questionCount: 231

MRR：79.05409405409405%
回答完美率：72.2943722943723%
回答不完美率：18.181818181818183%
回答错误率：9.523809523809524%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:WTO是哪个组织的称呼:世界贸易组织
Question:WTO是哪个组织的称呼
ExpectAnswer:世界贸易组织
没有从数据库中查询到问题：WTO是哪个组织的称呼
Question：WTO是哪个组织的称呼 搜索到Evidence 10 条
将Question：WTO是哪个组织的称呼 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： WTO是哪个组织的称呼
问题：WTO是哪个组织的称呼
词和词性序列：wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v 
词性序列：en/v/RW.RWOrdinarySingle/n.nt/uj/v
对问题进行分词：WTO是哪个组织的称呼
分词结果为：wto 是 哪个 组织 的 称呼
句法树: 
句子依存关系：
	advmod(是-2, wto-1)
	root(ROOT-0, 是-2)
	det(组织-4, 哪个-3)
	assmod(称呼-6, 组织-4)
	assm(组织-4, 的-5)
	attr(是-2, 称呼-6)
主谓宾：wto 是 称呼
主谓宾词和词性序列：wto/en 是/v 称呼/v
主谓宾词性序列：en/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: WTO是哪个组织的称呼 : WTO是哪个组织的称呼 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/v/RW.RWOrdinarySingle/n.nt/uj/v : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【WTO是哪个组织的称呼】匹配到多个模式：
序号：1
	问题 : wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/v
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : WTO是哪个组织的称呼
	模式 : WTO是哪个组织的称呼
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : WTO是哪个组织的称呼
	模式 : WTO是哪个组织的称呼
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : en/v/RW.RWOrdinarySingle/n.nt/uj/v
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : wto/en 是/v 哪个/RW.RWOrdinarySingle 组织/n.nt 的/uj 称呼/v 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 232：WTO是哪个组织的称呼 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question WTO是哪个组织的称呼
Question 候选答案：
ExpectAnswerRank: -1

mrr: 182.61495726495724
perfectCount: 167
notPerfectCount: 42
wrongCount: 23
unknownTypeCount: 0
questionCount: 232

MRR：78.71334364868846%
回答完美率：71.98275862068965%
回答不完美率：18.103448275862068%
回答错误率：9.913793103448276%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:1988年香港成立的大学叫什么名字:香港科技大学
Question:1988年香港成立的大学叫什么名字
ExpectAnswer:香港科技大学
没有从数据库中查询到问题：1988年香港成立的大学叫什么名字
Question：1988年香港成立的大学叫什么名字 搜索到Evidence 9 条
将Question：1988年香港成立的大学叫什么名字 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 1988年香港成立的大学叫什么名字
问题：1988年香港成立的大学叫什么名字
词和词性序列：1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle 
词性序列：m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
对问题进行分词：1988年香港成立的大学叫什么名字
分词结果为：1988年 香港 成立 的 大学 叫 什么名字
句法树: 
句子依存关系：
	tmod(成立-3, 1988年-1)
	nsubj(成立-3, 香港-2)
	rcmod(大学-5, 成立-3)
	cpm(成立-3, 的-4)
	nsubj(叫-6, 大学-5)
	root(ROOT-0, 叫-6)
	dobj(叫-6, 什么名字-7)
主谓宾：大学 叫 什么名字
主谓宾词和词性序列：大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle
主谓宾词性序列：n.nt/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 1988年香港成立的大学叫什么名字 : 1988年香港成立的大学叫什么名字 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【1988年香港成立的大学叫什么名字】匹配到多个模式：
序号：1
	问题 : 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 1988年香港成立的大学叫什么名字
	模式 : 1988年香港成立的大学叫什么名字
	分类 : Organization
序号：8
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：9
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1988年香港成立的大学叫什么名字
	模式 : 1988年香港成立的大学叫什么名字
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：2
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 1988年/m 香港/ns 成立/v 的/uj 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : m/ns/v/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 大学/n.nt 叫/v 什么名字/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 233：1988年香港成立的大学叫什么名字 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 1988年香港成立的大学叫什么名字
Question 候选答案：
香港大学  1.0
香港科技大学  0.5360733636637501
长沙市人民政府  0.5349728706374514
湖南省人民政府  0.5348340775479646
香港中文大学  0.35722249456993893
ExpectAnswerRank: 2

mrr: 183.11495726495724
perfectCount: 167
notPerfectCount: 43
wrongCount: 23
unknownTypeCount: 0
questionCount: 233

MRR：78.59011041414475%
回答完美率：71.67381974248927%
回答不完美率：18.4549356223176%
回答错误率：9.871244635193133%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:F-111是哪个公司的产品:美国通用
Question:F-111是哪个公司的产品
ExpectAnswer:美国通用
没有从数据库中查询到问题：F-111是哪个公司的产品
Question：F-111是哪个公司的产品 搜索到Evidence 9 条
将Question：F-111是哪个公司的产品 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： F-111是哪个公司的产品
问题：F-111是哪个公司的产品
词和词性序列：f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
词性序列：en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
对问题进行分词：F-111是哪个公司的产品
分词结果为：f 111 是 哪个 公司 的 产品
句法树: 
句子依存关系：
	dep(是-3, f-1)
	dep(是-3, 111-2)
	root(ROOT-0, 是-3)
	det(公司-5, 哪个-4)
	assmod(产品-7, 公司-5)
	assm(公司-5, 的-6)
	attr(是-3, 产品-7)
主谓宾：f 是 产品
主谓宾词和词性序列：f/en 是/v 产品/N.ObjectInstrument
主谓宾词性序列：en/v/N.ObjectInstrument

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: F-111是哪个公司的产品 : F-111是哪个公司的产品 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single2
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument1
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument1
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument2
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).* : Object->Instrument2
匹配成功: f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument  : .*(V).*(RW.RWOrdinarySingle).*(N.Object).* : Object->OtherSingle1
匹配成功: en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument : .*(V).*(RW.RWOrdinarySingle).*(N.Object).* : Object->OtherSingle1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【F-111是哪个公司的产品】匹配到多个模式：
序号：1
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：8
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：9
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：10
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：11
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：12
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：13
	问题 : F-111是哪个公司的产品
	模式 : F-111是哪个公司的产品
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : F-111是哪个公司的产品
	模式 : F-111是哪个公司的产品
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：2
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single2
序号：3
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：4
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：5
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：8
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument1
序号：9
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：10
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectInstrument).*
	分类 : Object->Instrument2
序号：11
	问题 : f/en 111/m 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 的/uj 产品/N.ObjectInstrument 
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
序号：12
	问题 : en/m/v/RW.RWOrdinarySingle/n.nt/uj/N.ObjectInstrument
	模式 : .*(V).*(RW.RWOrdinarySingle).*(N.Object).*
	分类 : Object->OtherSingle1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 234：F-111是哪个公司的产品 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question F-111是哪个公司的产品
Question 候选答案：
美国通用  1.0
ExpectAnswerRank: 1

mrr: 184.11495726495724
perfectCount: 168
notPerfectCount: 43
wrongCount: 23
unknownTypeCount: 0
questionCount: 234

MRR：78.68160566878515%
回答完美率：71.7948717948718%
回答不完美率：18.37606837606838%
回答错误率：9.82905982905983%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中华人民共和国最高权力机关是什么:全国人大
Question:中华人民共和国最高权力机关是什么
ExpectAnswer:全国人大
没有从数据库中查询到问题：中华人民共和国最高权力机关是什么
Question：中华人民共和国最高权力机关是什么 搜索到Evidence 8 条
将Question：中华人民共和国最高权力机关是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 中华人民共和国最高权力机关是什么
问题：中华人民共和国最高权力机关是什么
词和词性序列：中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/a/n/n.nt/v/RW.RWOrdinarySingle
对问题进行分词：中华人民共和国最高权力机关是什么
分词结果为：中华人民共和国 最高 权力 机关 是 什么
句法树: 
句子依存关系：
	nn(机关-4, 中华人民共和国-1)
	amod(机关-4, 最高-2)
	nn(机关-4, 权力-3)
	top(是-5, 机关-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：机关 是 什么
主谓宾词和词性序列：机关/n.nt 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：n.nt/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中华人民共和国最高权力机关是什么 : 中华人民共和国最高权力机关是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/a/n/n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/n/n.nt/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: ns/a/n/n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 机关/n.nt 是/v 什么/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中华人民共和国最高权力机关是什么】匹配到多个模式：
序号：1
	问题 : 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 机关/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 中华人民共和国最高权力机关是什么
	模式 : 中华人民共和国最高权力机关是什么
	分类 : Organization
序号：8
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：9
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国最高权力机关是什么
	模式 : 中华人民共和国最高权力机关是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：2
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 最高/a 权力/n 机关/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/a/n/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 机关/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 235：中华人民共和国最高权力机关是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中华人民共和国最高权力机关是什么
Question 候选答案：
全国人民代表大会  1.0
中华人民共和国全国人民代表大会  0.6153924172364988
人民代表大会  0.43169064009920277
中华人民共和国中央人民政府  0.421542588891496
中国人民政治协商会议  0.3345486469633103
全国人大  0.3022674162027656
全国政协  0.29132404216248686
全国人民代表大会常务委员会  0.28052496033102864
ExpectAnswerRank: 6

mrr: 184.2816239316239
perfectCount: 168
notPerfectCount: 44
wrongCount: 23
unknownTypeCount: 0
questionCount: 235

MRR：78.41771231132931%
回答完美率：71.48936170212767%
回答不完美率：18.72340425531915%
回答错误率：9.787234042553191%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中华人民共和国负责外交的单位是什么:中华人民共和国外交部
Question:中华人民共和国负责外交的单位是什么
ExpectAnswer:中华人民共和国外交部
没有从数据库中查询到问题：中华人民共和国负责外交的单位是什么
Question：中华人民共和国负责外交的单位是什么 搜索到Evidence 9 条
将Question：中华人民共和国负责外交的单位是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中华人民共和国负责外交的单位是什么
问题：中华人民共和国负责外交的单位是什么
词和词性序列：中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
对问题进行分词：中华人民共和国负责外交的单位是什么
分词结果为：中华人民共和国 负责 外交 的 单位 是 什么
句法树: 
句子依存关系：
	advmod(负责-2, 中华人民共和国-1)
	rcmod(单位-5, 负责-2)
	dobj(负责-2, 外交-3)
	cpm(负责-2, 的-4)
	top(是-6, 单位-5)
	root(ROOT-0, 是-6)
	attr(是-6, 什么-7)
主谓宾：单位 是 什么
主谓宾词和词性序列：单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：N.ObjectTerm/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中华人民共和国负责外交的单位是什么 : 中华人民共和国负责外交的单位是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中华人民共和国负责外交的单位是什么】匹配到多个模式：
序号：1
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：6
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：7
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：8
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：9
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：10
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：11
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：12
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：13
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：14
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：15
	问题 : 中华人民共和国负责外交的单位是什么
	模式 : 中华人民共和国负责外交的单位是什么
	分类 : Organization
序号：16
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：17
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国负责外交的单位是什么
	模式 : 中华人民共和国负责外交的单位是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：2
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：6
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：7
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：8
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：9
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：10
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：11
	问题 : 中华人民共和国/ns 负责/v 外交/N.CONCEPT 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：12
	问题 : ns/v/N.CONCEPT/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：13
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：14
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 236：中华人民共和国负责外交的单位是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中华人民共和国负责外交的单位是什么
Question 候选答案：
中华人民共和国外交部  1.0
中华人民共和国政府  0.8649682549374276
外交部  0.716267677229332
中华人民共和国国务院  0.36075499903335023
ExpectAnswerRank: 1

mrr: 185.2816239316239
perfectCount: 169
notPerfectCount: 44
wrongCount: 23
unknownTypeCount: 0
questionCount: 236

MRR：78.50916268289149%
回答完美率：71.61016949152543%
回答不完美率：18.64406779661017%
回答错误率：9.745762711864407%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中华人民共和国负责国防的单位是什么:中华人民共和国国防部
Question:中华人民共和国负责国防的单位是什么
ExpectAnswer:中华人民共和国国防部
没有从数据库中查询到问题：中华人民共和国负责国防的单位是什么
Question：中华人民共和国负责国防的单位是什么 搜索到Evidence 9 条
将Question：中华人民共和国负责国防的单位是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中华人民共和国负责国防的单位是什么
问题：中华人民共和国负责国防的单位是什么
词和词性序列：中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
对问题进行分词：中华人民共和国负责国防的单位是什么
分词结果为：中华人民共和国 负责 国防 的 单位 是 什么
句法树: 
句子依存关系：
	advmod(负责-2, 中华人民共和国-1)
	rcmod(单位-5, 负责-2)
	dobj(负责-2, 国防-3)
	cpm(负责-2, 的-4)
	top(是-6, 单位-5)
	root(ROOT-0, 是-6)
	attr(是-6, 什么-7)
主谓宾：单位 是 什么
主谓宾词和词性序列：单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：N.ObjectTerm/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中华人民共和国负责国防的单位是什么 : 中华人民共和国负责国防的单位是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).* : Object->TermSingle1
匹配成功: 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: N.ObjectTerm/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中华人民共和国负责国防的单位是什么】匹配到多个模式：
序号：1
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：4
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：5
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：6
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：7
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：8
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：9
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：10
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：11
	问题 : 中华人民共和国负责国防的单位是什么
	模式 : 中华人民共和国负责国防的单位是什么
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国负责国防的单位是什么
	模式 : 中华人民共和国负责国防的单位是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：4
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：5
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：6
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectTerm).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->TermSingle1
序号：7
	问题 : 中华人民共和国/ns 负责/v 国防/n 的/uj 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：8
	问题 : ns/v/n/uj/N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：9
	问题 : 单位/N.ObjectTerm 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：10
	问题 : N.ObjectTerm/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 237：中华人民共和国负责国防的单位是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中华人民共和国负责国防的单位是什么
Question 候选答案：
中华人民共和国国防部  1.0
国防科学技术工业委员会  0.8205222175412578
国务院  0.7580907734318312
国防科技  0.36433642753439255
中央军委  0.3331720879117618
国家局  0.3045633156968214
中国人民解放军  0.30381931466020745
中华人民共和国国务院  0.15184240551536046
ExpectAnswerRank: 1

mrr: 186.2816239316239
perfectCount: 170
notPerfectCount: 44
wrongCount: 23
unknownTypeCount: 0
questionCount: 237

MRR：78.5998413213603%
回答完美率：71.72995780590718%
回答不完美率：18.565400843881857%
回答错误率：9.70464135021097%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪个部门负责我国与教育相关的工作:中华人民共和国教育部
Question:哪个部门负责我国与教育相关的工作
ExpectAnswer:中华人民共和国教育部
没有从数据库中查询到问题：哪个部门负责我国与教育相关的工作
Question：哪个部门负责我国与教育相关的工作 搜索到Evidence 10 条
将Question：哪个部门负责我国与教育相关的工作 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪个部门负责我国与教育相关的工作
问题：哪个部门负责我国与教育相关的工作
词和词性序列：哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
词性序列：RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
对问题进行分词：哪个部门负责我国与教育相关的工作
分词结果为：哪个 部门 负责 我国 与 教育 相关 的 工作
句法树: 
句子依存关系：
	det(部门-2, 哪个-1)
	nsubj(负责-3, 部门-2)
	root(ROOT-0, 负责-3)
	conj(教育-6, 我国-4)
	cc(教育-6, 与-5)
	nn(工作-9, 教育-6)
	assmod(工作-9, 相关-7)
	assm(相关-7, 的-8)
	dobj(负责-3, 工作-9)
主谓宾：部门 负责 工作
主谓宾词和词性序列：部门/n.nt 负责/v 工作/N.ObjectVocation
主谓宾词性序列：n.nt/v/N.ObjectVocation

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个部门负责我国与教育相关的工作 : 哪个部门负责我国与教育相关的工作 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation  : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation : .*(RW.RWOrdinarySingle).*(ns|nsf).* : Location->Single9
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation  : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).* : Object->Vocation4
匹配成功: RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).* : Object->Vocation4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个部门负责我国与教育相关的工作】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：6
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：7
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).*
	分类 : Object->Vocation4
序号：8
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).*
	分类 : Object->Vocation4
序号：9
	问题 : 哪个部门负责我国与教育相关的工作
	模式 : 哪个部门负责我国与教育相关的工作
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个部门负责我国与教育相关的工作
	模式 : 哪个部门负责我国与教育相关的工作
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(ns|nsf).*
	分类 : Location->Single9
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：6
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：7
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 我国/ns 与/p 教育/vn 相关/v 的/uj 工作/N.ObjectVocation 
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).*
	分类 : Object->Vocation4
序号：8
	问题 : RW.RWOrdinarySingle/n.nt/v/ns/p/vn/v/uj/N.ObjectVocation
	模式 : .*(RW.RWOrdinarySingle).*(N.ObjectVocation).*
	分类 : Object->Vocation4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 238：哪个部门负责我国与教育相关的工作 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪个部门负责我国与教育相关的工作
Question 候选答案：
国务院  1.0
国家有关  0.9558511433360402
农业部  0.499119750582426
国务院扶贫办  0.4554709487088139
ExpectAnswerRank: -1

mrr: 186.2816239316239
perfectCount: 170
notPerfectCount: 44
wrongCount: 24
unknownTypeCount: 0
questionCount: 238

MRR：78.26958988723693%
回答完美率：71.42857142857143%
回答不完美率：18.487394957983195%
回答错误率：10.084033613445378%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为:中华人民共和国公安部
Question:哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
ExpectAnswer:中华人民共和国公安部
没有从数据库中查询到问题：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
Question：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为 搜索到Evidence 9 条
将Question：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
问题：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
词和词性序列：哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
词性序列：RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
对问题进行分词：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
分词结果为：哪个 部门 负责 维护 社会治安 秩序 制止 危害 社会治安 秩序 的 行为
句法树: 
句子依存关系：
	det(部门-2, 哪个-1)
	nsubj(负责-3, 部门-2)
	root(ROOT-0, 负责-3)
	ccomp(负责-3, 维护-4)
	nn(秩序-6, 社会治安-5)
	dobj(维护-4, 秩序-6)
	conj(维护-4, 制止-7)
	rcmod(行为-12, 危害-8)
	nn(秩序-10, 社会治安-9)
	dobj(危害-8, 秩序-10)
	cpm(危害-8, 的-11)
	dobj(制止-7, 行为-12)
	xsubj(维护-4, 部门-2)
主谓宾：部门 负责 维护
主谓宾词和词性序列：部门/n.nt 负责/v 维护/v
主谓宾词性序列：n.nt/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为 : 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n  : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).* : DefinitionSOB->SubjectVerbObject2
匹配成功: RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).* : DefinitionSOB->SubjectVerbObject2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n  : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n : .*(RW.RWOrdinarySingle).*(nt).*(P.).* : Organization->Single8
匹配成功: 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n  : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).* : Definition->Definition1
匹配成功: RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).* : Definition->Definition1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：6
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：7
	问题 : 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
	模式 : 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
	分类 : Organization
序号：8
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
序号：9
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
	模式 : 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(V).*(N.Concept).*
	分类 : DefinitionSOB->SubjectVerbObject2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：4
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(P.).*
	分类 : Organization->Single8
序号：5
	问题 : 哪个/RW.RWOrdinarySingle 部门/n.nt 负责/v 维护/v 社会治安/l 秩序/n 制止/v 危害/N.CONCEPT 社会治安/l 秩序/n 的/uj 行为/n 
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
序号：6
	问题 : RW.RWOrdinarySingle/n.nt/v/v/l/n/v/N.CONCEPT/l/n/uj/n
	模式 : .*(RW.RWOrdinarySingle).*(V.).*(N.Concept).*
	分类 : Definition->Definition1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 239：哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪个部门负责维护社会治安秩序，制止危害社会治安秩序的行为
Question 候选答案：
ExpectAnswerRank: -1

mrr: 186.2816239316239
perfectCount: 170
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 239

MRR：77.94210206344097%
回答完美率：71.1297071129707%
回答不完美率：18.410041841004183%
回答错误率：10.460251046025103%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:朝鲜的执政党是什么:朝鲜劳动党
Question:朝鲜的执政党是什么
ExpectAnswer:朝鲜劳动党
没有从数据库中查询到问题：朝鲜的执政党是什么
Question：朝鲜的执政党是什么 搜索到Evidence 9 条
将Question：朝鲜的执政党是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 朝鲜的执政党是什么
问题：朝鲜的执政党是什么
词和词性序列：朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/uj/n.nt/v/RW.RWOrdinarySingle
对问题进行分词：朝鲜的执政党是什么
分词结果为：朝鲜 的 执政党 是 什么
句法树: 
句子依存关系：
	assmod(执政党-3, 朝鲜-1)
	assm(朝鲜-1, 的-2)
	top(是-4, 执政党-3)
	root(ROOT-0, 是-4)
	attr(是-4, 什么-5)
主谓宾：执政党 是 什么
主谓宾词和词性序列：执政党/n.nt 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：n.nt/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 朝鲜的执政党是什么 : 朝鲜的执政党是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/n.nt/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: ns/uj/n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【朝鲜的执政党是什么】匹配到多个模式：
序号：1
	问题 : 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 朝鲜的执政党是什么
	模式 : 朝鲜的执政党是什么
	分类 : Organization
序号：8
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：9
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 朝鲜的执政党是什么
	模式 : 朝鲜的执政党是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
序号：2
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 朝鲜/ns 的/uj 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/uj/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 执政党/n.nt 是/v 什么/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 240：朝鲜的执政党是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 朝鲜的执政党是什么
Question 候选答案：
朝鲜劳动党  1.0
人民党  0.18163631657364132
新民党  0.11432343964414304
ExpectAnswerRank: 1

mrr: 187.2816239316239
perfectCount: 171
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 240

MRR：78.03400997150996%
回答完美率：71.25%
回答不完美率：18.333333333333332%
回答错误率：10.416666666666668%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:第三届亚洲政党国际会议是由哪个政党主持的:中国共产党
Question:第三届亚洲政党国际会议是由哪个政党主持的
ExpectAnswer:中国共产党
没有从数据库中查询到问题：第三届亚洲政党国际会议是由哪个政党主持的
Question：第三届亚洲政党国际会议是由哪个政党主持的 搜索到Evidence 9 条
将Question：第三届亚洲政党国际会议是由哪个政党主持的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 第三届亚洲政党国际会议是由哪个政党主持的
问题：第三届亚洲政党国际会议是由哪个政党主持的
词和词性序列：第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
词性序列：m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
对问题进行分词：第三届亚洲政党国际会议是由哪个政党主持的
分词结果为：第三届 亚洲 政党 国际 会议 是 由 哪个 政党 主持 的
句法树: 
句子依存关系：
	nummod(会议-5, 第三届-1)
	nn(会议-5, 亚洲-2)
	nn(会议-5, 政党-3)
	nn(会议-5, 国际-4)
	top(是-6, 会议-5)
	root(ROOT-0, 是-6)
	prep(主持-10, 由-7)
	det(政党-9, 哪个-8)
	pobj(由-7, 政党-9)
	attr(是-6, 主持-10)
	cpm(主持-10, 的-11)
主谓宾：会议 是 主持
主谓宾词和词性序列：会议/N.ObjectEvent 是/v 主持/v
主谓宾词性序列：N.ObjectEvent/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 第三届亚洲政党国际会议是由哪个政党主持的 : 第三届亚洲政党国际会议是由哪个政党主持的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: 会议/N.ObjectEvent 是/v 主持/v : .*(N.ObjectEvent).* : ObjectSOB->Event2
匹配成功: N.ObjectEvent/v/v : .*(N.ObjectEvent).* : ObjectSOB->Event2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: 会议/N.ObjectEvent 是/v 主持/v : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: N.ObjectEvent/v/v : .*(N.ObjectEvent).*(V).* : Object->Event4
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj  : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
匹配成功: m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【第三届亚洲政党国际会议是由哪个政党主持的】匹配到多个模式：
序号：1
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：10
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：11
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：12
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：13
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：14
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：15
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：16
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：17
	问题 : 会议/N.ObjectEvent 是/v 主持/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：18
	问题 : N.ObjectEvent/v/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：19
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：20
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：21
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：22
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：23
	问题 : 第三届亚洲政党国际会议是由哪个政党主持的
	模式 : 第三届亚洲政党国际会议是由哪个政党主持的
	分类 : Organization
序号：24
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：25
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：26
	问题 : 会议/N.ObjectEvent 是/v 主持/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：27
	问题 : N.ObjectEvent/v/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第三届亚洲政党国际会议是由哪个政党主持的
	模式 : 第三届亚洲政党国际会议是由哪个政党主持的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：2
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：3
	问题 : 会议/N.ObjectEvent 是/v 主持/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
序号：4
	问题 : N.ObjectEvent/v/v
	模式 : .*(N.ObjectEvent).*
	分类 : ObjectSOB->Event2
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：10
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：11
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：12
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：13
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：14
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：15
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：16
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：17
	问题 : 会议/N.ObjectEvent 是/v 主持/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：18
	问题 : N.ObjectEvent/v/v
	模式 : .*(N.ObjectEvent).*(V).*
	分类 : Object->Event4
序号：19
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：20
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：21
	问题 : 第三届/m 亚洲/ns 政党/n.nt 国际/n 会议/N.ObjectEvent 是/v 由/p 哪个/RW.RWOrdinarySingle 政党/n.nt 主持/v 的/uj 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：22
	问题 : m/ns/n.nt/n/N.ObjectEvent/v/p/RW.RWOrdinarySingle/n.nt/v/uj
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 241：第三届亚洲政党国际会议是由哪个政党主持的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 第三届亚洲政党国际会议是由哪个政党主持的
Question 候选答案：
中国共产党  1.0
中共中央对外联络部  0.9579599690790299
中共中央政治局  0.8542562127894843
中共中央宣传部  0.5415481121007879
中央政治局  0.42703638112826303
ExpectAnswerRank: 1

mrr: 188.2816239316239
perfectCount: 172
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 241

MRR：78.12515515835017%
回答完美率：71.36929460580913%
回答不完美率：18.25726141078838%
回答错误率：10.37344398340249%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:夺得世界杯次数最多的足球队:巴西队
Question:夺得世界杯次数最多的足球队
ExpectAnswer:巴西队
没有从数据库中查询到问题：夺得世界杯次数最多的足球队
Question：夺得世界杯次数最多的足球队 搜索到Evidence 10 条
将Question：夺得世界杯次数最多的足球队 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 夺得世界杯次数最多的足球队
问题：夺得世界杯次数最多的足球队
词和词性序列：夺得/v 世界杯/N.CONCEPT 次数/n 最多/d 的/uj 足球队/n.nt 
词性序列：v/N.CONCEPT/n/d/uj/n.nt
对问题进行分词：夺得世界杯次数最多的足球队
分词结果为：夺得 世界杯 次数 最多 的 足球队
句法树: 
句子依存关系：
	root(ROOT-0, 夺得-1)
	nn(次数-3, 世界杯-2)
	nn(足球队-6, 次数-3)
	rcmod(足球队-6, 最多-4)
	cpm(最多-4, 的-5)
	dobj(夺得-1, 足球队-6)
	rcmod(次数-3, 最多-4)
主谓宾：夺得 足球队 最多
主谓宾词和词性序列：夺得/v 足球队/n.nt 最多/d
主谓宾词性序列：v/n.nt/d

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 夺得世界杯次数最多的足球队 : 夺得世界杯次数最多的足球队 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 夺得世界杯次数最多的足球队
	模式 : 夺得世界杯次数最多的足球队
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 242：夺得世界杯次数最多的足球队 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 夺得世界杯次数最多的足球队
Question 候选答案：
巴西队  1.0
中国队  0.33889304653298286
国家队  0.32618017815787737
中国国家队  0.309042671189699
ExpectAnswerRank: 1

mrr: 189.2816239316239
perfectCount: 173
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 242

MRR：78.21554707918344%
回答完美率：71.48760330578511%
回答不完美率：18.181818181818183%
回答错误率：10.330578512396695%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:个人如果向银行出售金银物品必须卖给哪个银行:中国人民银行
Question:个人如果向银行出售金银物品必须卖给哪个银行
ExpectAnswer:中国人民银行
没有从数据库中查询到问题：个人如果向银行出售金银物品必须卖给哪个银行
Question：个人如果向银行出售金银物品必须卖给哪个银行 搜索到Evidence 10 条
将Question：个人如果向银行出售金银物品必须卖给哪个银行 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 个人如果向银行出售金银物品必须卖给哪个银行
问题：个人如果向银行出售金银物品必须卖给哪个银行
词和词性序列：个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
词性序列：n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
对问题进行分词：个人如果向银行出售金银物品必须卖给哪个银行
分词结果为：个人 如果 向 银行 出售 金银 物品 必须 卖 给 哪个 银行
句法树: 
句子依存关系：
	nsubj(出售-5, 个人-1)
	advmod(出售-5, 如果-2)
	prep(出售-5, 向-3)
	pobj(向-3, 银行-4)
	root(ROOT-0, 出售-5)
	nn(物品-7, 金银-6)
	dobj(出售-5, 物品-7)
	mmod(卖-9, 必须-8)
	conj(出售-5, 卖-9)
	prep(卖-9, 给-10)
	det(银行-12, 哪个-11)
	pobj(给-10, 银行-12)
主谓宾：个人 出售 卖
主谓宾词和词性序列：个人/n 出售/v 卖/v
主谓宾词性序列：n/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 个人如果向银行出售金银物品必须卖给哪个银行 : 个人如果向银行出售金银物品必须卖给哪个银行 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(nt).*(P.).*(RW.RWOrdinarySingle).* : Organization->Single3
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt  : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
匹配成功: n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt : .*(N.Object).*(P).*(RW.RWOrdinarySingle).* : Object->OtherSingle3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【个人如果向银行出售金银物品必须卖给哪个银行】匹配到多个模式：
序号：1
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：10
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：11
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：12
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：13
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：14
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：15
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：16
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：17
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：18
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：19
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：20
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：21
	问题 : 个人如果向银行出售金银物品必须卖给哪个银行
	模式 : 个人如果向银行出售金银物品必须卖给哪个银行
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 个人如果向银行出售金银物品必须卖给哪个银行
	模式 : 个人如果向银行出售金银物品必须卖给哪个银行
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：8
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：9
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：10
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(nt).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single3
序号：11
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：12
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：13
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：14
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：15
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：16
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：17
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：18
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：19
	问题 : 个人/n 如果/c 向/p 银行/n.nt 出售/v 金银/N.NumberNouns 物品/N.ObjectInstrument 必须/d 卖/v 给/p 哪个/RW.RWOrdinarySingle 银行/n.nt 
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
序号：20
	问题 : n/c/p/n.nt/v/N.NumberNouns/N.ObjectInstrument/d/v/p/RW.RWOrdinarySingle/n.nt
	模式 : .*(N.Object).*(P).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 243：个人如果向银行出售金银物品必须卖给哪个银行 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 个人如果向银行出售金银物品必须卖给哪个银行
Question 候选答案：
中国人民银行  1.0
国有银行  0.25976165570050197
中国银行  0.16143421562178473
ExpectAnswerRank: 1

mrr: 190.2816239316239
perfectCount: 174
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 243

MRR：78.30519503359008%
回答完美率：71.60493827160494%
回答不完美率：18.106995884773664%
回答错误率：10.2880658436214%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:利奥内尔·若斯潘是哪个政党的成员:法国社会党
Question:利奥内尔·若斯潘是哪个政党的成员
ExpectAnswer:法国社会党
没有从数据库中查询到问题：利奥内尔·若斯潘是哪个政党的成员
Question：利奥内尔·若斯潘是哪个政党的成员 搜索到Evidence 10 条
将Question：利奥内尔·若斯潘是哪个政党的成员 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 利奥内尔·若斯潘是哪个政党的成员
问题：利奥内尔·若斯潘是哪个政党的成员
词和词性序列：利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
词性序列：n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
对问题进行分词：利奥内尔·若斯潘是哪个政党的成员
分词结果为：利 奥内尔 若斯潘 是 哪个 政党 的 成员
句法树: 
句子依存关系：
	nsubj(奥内尔-2, 利-1)
	root(ROOT-0, 奥内尔-2)
	dobj(奥内尔-2, 若斯潘-3)
	conj(奥内尔-2, 是-4)
	det(政党-6, 哪个-5)
	assmod(成员-8, 政党-6)
	assm(政党-6, 的-7)
	attr(是-4, 成员-8)
主谓宾：利 奥内尔 是
主谓宾词和词性序列：利/n 奥内尔/nr 是/v
主谓宾词性序列：n/nr/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 利奥内尔·若斯潘是哪个政党的成员 : 利奥内尔·若斯潘是哪个政党的成员 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【利奥内尔·若斯潘是哪个政党的成员】匹配到多个模式：
序号：1
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 利奥内尔·若斯潘是哪个政党的成员
	模式 : 利奥内尔·若斯潘是哪个政党的成员
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 利奥内尔·若斯潘是哪个政党的成员
	模式 : 利奥内尔·若斯潘是哪个政党的成员
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 利/n 奥内尔/nr 若斯潘/nr 是/v 哪个/RW.RWOrdinarySingle 政党/n.nt 的/uj 成员/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : n/nr/nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 244：利奥内尔·若斯潘是哪个政党的成员 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 利奥内尔·若斯潘是哪个政党的成员
Question 候选答案：
法国社会党  1.0
ExpectAnswerRank: 1

mrr: 191.2816239316239
perfectCount: 175
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 244

MRR：78.39410816869832%
回答完美率：71.72131147540983%
回答不完美率：18.0327868852459%
回答错误率：10.245901639344263%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:罗豪才是哪个机构的主席:全国政协
Question:罗豪才是哪个机构的主席
ExpectAnswer:全国政协
没有从数据库中查询到问题：罗豪才是哪个机构的主席
Question：罗豪才是哪个机构的主席 搜索到Evidence 9 条
将Question：罗豪才是哪个机构的主席 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 罗豪才是哪个机构的主席
问题：罗豪才是哪个机构的主席
词和词性序列：罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
词性序列：nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
对问题进行分词：罗豪才是哪个机构的主席
分词结果为：罗豪才 是 哪个 机构 的 主席
句法树: 
句子依存关系：
	top(是-2, 罗豪才-1)
	root(ROOT-0, 是-2)
	det(机构-4, 哪个-3)
	assmod(主席-6, 机构-4)
	assm(机构-4, 的-5)
	attr(是-2, 主席-6)
主谓宾：罗豪才 是 主席
主谓宾词和词性序列：罗豪才/nr 是/v 主席/nr
主谓宾词性序列：nr/v/nr

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 罗豪才是哪个机构的主席 : 罗豪才是哪个机构的主席 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr  : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).* : Person->Single2
匹配成功: 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).* : Person->Single8
匹配成功: 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: nr/v/RW.RWOrdinarySingle/n.nt/uj/nr : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【罗豪才是哪个机构的主席】匹配到多个模式：
序号：1
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：7
	问题 : 罗豪才是哪个机构的主席
	模式 : 罗豪才是哪个机构的主席
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 罗豪才是哪个机构的主席
	模式 : 罗豪才是哪个机构的主席
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：2
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(nr|nr1|nr2|nrj|nrf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Person->Single2
序号：3
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：4
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Single8
序号：5
	问题 : 罗豪才/nr 是/v 哪个/RW.RWOrdinarySingle 机构/n.nt 的/uj 主席/nr 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：6
	问题 : nr/v/RW.RWOrdinarySingle/n.nt/uj/nr
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 245：罗豪才是哪个机构的主席 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 罗豪才是哪个机构的主席
Question 候选答案：
全国政协  1.0
致公党中央  0.5117606769486579
中新社  0.17517947344833765
新华社  0.15750927686750688
致公党  0.11563943515453844
全国政协港澳台侨委员会  0.11357734433341594
中华文化  0.08739737166144038
人民大会堂  0.07917138563359086
中国致公党  0.07914304380469081
ExpectAnswerRank: 1

mrr: 192.2816239316239
perfectCount: 176
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 245

MRR：78.48229548229547%
回答完美率：71.83673469387755%
回答不完美率：17.959183673469386%
回答错误率：10.204081632653061%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪个机构负责全国公安工作:公安部
Question:哪个机构负责全国公安工作
ExpectAnswer:公安部
没有从数据库中查询到问题：哪个机构负责全国公安工作
Question：哪个机构负责全国公安工作 搜索到Evidence 9 条
将Question：哪个机构负责全国公安工作 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪个机构负责全国公安工作
问题：哪个机构负责全国公安工作
词和词性序列：哪个/RW.RWOrdinarySingle 机构/n.nt 负责/v 全国/n 公安工作/n 
词性序列：RW.RWOrdinarySingle/n.nt/v/n/n
对问题进行分词：哪个机构负责全国公安工作
分词结果为：哪个 机构 负责 全国 公安工作
句法树: 
句子依存关系：
	det(机构-2, 哪个-1)
	nsubj(负责-3, 机构-2)
	root(ROOT-0, 负责-3)
	amod(公安工作-5, 全国-4)
	dobj(负责-3, 公安工作-5)
主谓宾：机构 负责 公安工作
主谓宾词和词性序列：机构/n.nt 负责/v 公安工作/n
主谓宾词性序列：n.nt/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪个机构负责全国公安工作 : 哪个机构负责全国公安工作 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪个/RW.RWOrdinarySingle 机构/n.nt 负责/v 全国/n 公安工作/n  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
匹配成功: RW.RWOrdinarySingle/n.nt/v/n/n : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪个机构负责全国公安工作】匹配到多个模式：
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 负责/v 全国/n 公安工作/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/n/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：3
	问题 : 哪个机构负责全国公安工作
	模式 : 哪个机构负责全国公安工作
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个机构负责全国公安工作
	模式 : 哪个机构负责全国公安工作
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪个/RW.RWOrdinarySingle 机构/n.nt 负责/v 全国/n 公安工作/n 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：2
	问题 : RW.RWOrdinarySingle/n.nt/v/n/n
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 246：哪个机构负责全国公安工作 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪个机构负责全国公安工作
Question 候选答案：
公安部  1.0
国家机关  0.7328648686261776
国务院  0.7047558160144374
深圳市公安局  0.5621600567415979
临汾市公安局  0.5354245734812977
信息中心  0.5302741991448869
ExpectAnswerRank: 1

mrr: 193.2816239316239
perfectCount: 177
notPerfectCount: 44
wrongCount: 25
unknownTypeCount: 0
questionCount: 246

MRR：78.56976582586337%
回答完美率：71.95121951219512%
回答不完美率：17.88617886178862%
回答错误率：10.16260162601626%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国俗称南船的机构是哪一个:中国船舶重工集团公司
Question:中国俗称南船的机构是哪一个
ExpectAnswer:中国船舶重工集团公司
没有从数据库中查询到问题：中国俗称南船的机构是哪一个
Question：中国俗称南船的机构是哪一个 搜索到Evidence 9 条
将Question：中国俗称南船的机构是哪一个 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国俗称南船的机构是哪一个
问题：中国俗称南船的机构是哪一个
词和词性序列：中国/ns 俗称/v 南船/n 的/uj 机构/n.nt 是哪/RW.RWLocationSingle 一个/m 
词性序列：ns/v/n/uj/n.nt/RW.RWLocationSingle/m
对问题进行分词：中国俗称南船的机构是哪一个
分词结果为：中国 俗称 南船 的 机构 是哪 一个
句法树: 
句子依存关系：
	nsubj(俗称-2, 中国-1)
	rcmod(机构-5, 俗称-2)
	dobj(俗称-2, 南船-3)
	cpm(俗称-2, 的-4)
	nsubj(是哪-6, 机构-5)
	root(ROOT-0, 是哪-6)
	range(是哪-6, 一个-7)
主谓宾：机构 是哪 一个
主谓宾词和词性序列：机构/n.nt 是哪/RW.RWLocationSingle 一个/m
主谓宾词性序列：n.nt/RW.RWLocationSingle/m

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国俗称南船的机构是哪一个 : 中国俗称南船的机构是哪一个 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 俗称/v 南船/n 的/uj 机构/n.nt 是哪/RW.RWLocationSingle 一个/m  : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: ns/v/n/uj/n.nt/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: 机构/n.nt 是哪/RW.RWLocationSingle 一个/m : .*(RW.RWLocationSingle).* : Location->Single1
匹配成功: n.nt/RW.RWLocationSingle/m : .*(RW.RWLocationSingle).* : Location->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国俗称南船的机构是哪一个】匹配到多个模式：
序号：1
	问题 : 中国/ns 俗称/v 南船/n 的/uj 机构/n.nt 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/n/uj/n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 机构/n.nt 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：5
	问题 : 中国俗称南船的机构是哪一个
	模式 : 中国俗称南船的机构是哪一个
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国俗称南船的机构是哪一个
	模式 : 中国俗称南船的机构是哪一个
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 俗称/v 南船/n 的/uj 机构/n.nt 是哪/RW.RWLocationSingle 一个/m 
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：2
	问题 : ns/v/n/uj/n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：3
	问题 : 机构/n.nt 是哪/RW.RWLocationSingle 一个/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
序号：4
	问题 : n.nt/RW.RWLocationSingle/m
	模式 : .*(RW.RWLocationSingle).*
	分类 : Location->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 247：中国俗称南船的机构是哪一个 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国俗称南船的机构是哪一个
Question 候选答案：
中国船舶重工集团  1.0
中国船舶工业集团公司  0.6775824499537986
中国船舶工业集团  0.3390705811139985
ExpectAnswerRank: -1

mrr: 193.2816239316239
perfectCount: 177
notPerfectCount: 44
wrongCount: 26
unknownTypeCount: 0
questionCount: 247

MRR：78.25166960794489%
回答完美率：71.65991902834008%
回答不完美率：17.813765182186234%
回答错误率：10.526315789473683%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:全球最大的无线运营商是哪个公司:中国移动通信集团公司
Question:全球最大的无线运营商是哪个公司
ExpectAnswer:中国移动通信集团公司
没有从数据库中查询到问题：全球最大的无线运营商是哪个公司
Question：全球最大的无线运营商是哪个公司 搜索到Evidence 10 条
将Question：全球最大的无线运营商是哪个公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 全球最大的无线运营商是哪个公司
问题：全球最大的无线运营商是哪个公司
词和词性序列：全球/n 最大/a 的/uj 无线/b 运营商/n 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
词性序列：n/a/uj/b/n/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：全球最大的无线运营商是哪个公司
分词结果为：全球 最大 的 无线 运营商 是 哪个 公司
句法树: 
句子依存关系：
	dep(最大-2, 全球-1)
	assmod(运营商-5, 最大-2)
	assm(最大-2, 的-3)
	amod(运营商-5, 无线-4)
	top(是-6, 运营商-5)
	root(ROOT-0, 是-6)
	det(公司-8, 哪个-7)
	attr(是-6, 公司-8)
主谓宾：运营商 是 公司
主谓宾词和词性序列：运营商/n 是/v 公司/n.nt
主谓宾词性序列：n/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 全球最大的无线运营商是哪个公司 : 全球最大的无线运营商是哪个公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 全球/n 最大/a 的/uj 无线/b 运营商/n 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: n/a/uj/b/n/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【全球最大的无线运营商是哪个公司】匹配到多个模式：
序号：1
	问题 : 全球/n 最大/a 的/uj 无线/b 运营商/n 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : n/a/uj/b/n/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：3
	问题 : 全球最大的无线运营商是哪个公司
	模式 : 全球最大的无线运营商是哪个公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 全球最大的无线运营商是哪个公司
	模式 : 全球最大的无线运营商是哪个公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 全球/n 最大/a 的/uj 无线/b 运营商/n 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：2
	问题 : n/a/uj/b/n/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 248：全球最大的无线运营商是哪个公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 全球最大的无线运营商是哪个公司
Question 候选答案：
中国移动  1.0
中国电信集团公司  0.5935854813410281
ExpectAnswerRank: -1

mrr: 193.2816239316239
perfectCount: 177
notPerfectCount: 44
wrongCount: 27
unknownTypeCount: 0
questionCount: 248

MRR：77.93613868210642%
回答完美率：71.37096774193549%
回答不完美率：17.741935483870968%
回答错误率：10.887096774193548%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国的基础电信运营商之一是哪个公司:中国电信
Question:中国的基础电信运营商之一是哪个公司
ExpectAnswer:中国电信
没有从数据库中查询到问题：中国的基础电信运营商之一是哪个公司
Question：中国的基础电信运营商之一是哪个公司 搜索到Evidence 9 条
将Question：中国的基础电信运营商之一是哪个公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国的基础电信运营商之一是哪个公司
问题：中国的基础电信运营商之一是哪个公司
词和词性序列：中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
词性序列：ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt
对问题进行分词：中国的基础电信运营商之一是哪个公司
分词结果为：中国 的 基础 电信 运营商 之一 是 哪个 公司
句法树: 
句子依存关系：
	assmod(之一-6, 中国-1)
	assm(中国-1, 的-2)
	nn(之一-6, 基础-3)
	nn(之一-6, 电信-4)
	nn(之一-6, 运营商-5)
	top(是-7, 之一-6)
	root(ROOT-0, 是-7)
	det(公司-9, 哪个-8)
	attr(是-7, 公司-9)
主谓宾：之一 是 公司
主谓宾词和词性序列：之一/r 是/v 公司/n.nt
主谓宾词性序列：r/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国的基础电信运营商之一是哪个公司 : 中国的基础电信运营商之一是哪个公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt  : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
匹配成功: ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt : .*(V.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国的基础电信运营商之一是哪个公司】匹配到多个模式：
序号：1
	问题 : 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：5
	问题 : 中国的基础电信运营商之一是哪个公司
	模式 : 中国的基础电信运营商之一是哪个公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国的基础电信运营商之一是哪个公司
	模式 : 中国的基础电信运营商之一是哪个公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中国/ns 的/uj 基础/n 电信/n 运营商/n 之一/r 是/v 哪个/RW.RWOrdinarySingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
序号：4
	问题 : ns/uj/n/n/n/r/v/RW.RWOrdinarySingle/n.nt
	模式 : .*(V.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single1
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 249：中国的基础电信运营商之一是哪个公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国的基础电信运营商之一是哪个公司
Question 候选答案：
中国电信集团公司  1.0
中国电信  0.9573022169491996
中国移动  0.3875196927513325
中国联通  0.3437445931782264
网络通信  0.24686140637746698
中国移动通信集团公司  0.24677106426735873
中国联合通信有限公司  0.2467184908046417
ExpectAnswerRank: 2

mrr: 193.7816239316239
perfectCount: 177
notPerfectCount: 45
wrongCount: 27
unknownTypeCount: 0
questionCount: 249

MRR：77.82394535406583%
回答完美率：71.08433734939759%
回答不完美率：18.072289156626507%
回答错误率：10.843373493975903%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家与航天有关的国企成立成1999年:中国航天
Question:哪家与航天有关的国企成立成1999年
ExpectAnswer:中国航天
没有从数据库中查询到问题：哪家与航天有关的国企成立成1999年
Question：哪家与航天有关的国企成立成1999年 搜索到Evidence 10 条
将Question：哪家与航天有关的国企成立成1999年 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 哪家与航天有关的国企成立成1999年
问题：哪家与航天有关的国企成立成1999年
词和词性序列：哪家/RW.RWORGANIZATIONSingle 与/p 航天/n 有关/vn 的/uj 国企/j 成立/v 成/v 1999年/m 
词性序列：RW.RWORGANIZATIONSingle/p/n/vn/uj/j/v/v/m
对问题进行分词：哪家与航天有关的国企成立成1999年
分词结果为：哪家 与 航天 有关 的 国企 成立 成 1999年
句法树: 
句子依存关系：
	conj(航天-3, 哪家-1)
	cc(航天-3, 与-2)
	nn(国企-6, 航天-3)
	assmod(国企-6, 有关-4)
	assm(有关-4, 的-5)
	dep(1999年-9, 国企-6)
	dep(1999年-9, 成立-7)
	rcomp(成立-7, 成-8)
	root(ROOT-0, 1999年-9)
主谓宾：国企 1999年 成立
主谓宾词和词性序列：国企/j 1999年/m 成立/v
主谓宾词性序列：j/m/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家与航天有关的国企成立成1999年 : 哪家与航天有关的国企成立成1999年 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家与航天有关的国企成立成1999年
	模式 : 哪家与航天有关的国企成立成1999年
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 250：哪家与航天有关的国企成立成1999年 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家与航天有关的国企成立成1999年
Question 候选答案：
北京航空航天大学  1.0
ExpectAnswerRank: -1

mrr: 193.7816239316239
perfectCount: 177
notPerfectCount: 45
wrongCount: 28
unknownTypeCount: 0
questionCount: 250

MRR：77.51264957264956%
回答完美率：70.8%
回答不完美率：18.0%
回答错误率：11.200000000000001%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:简称兵装集团的国企是哪家公司:兵器装备集团公司
Question:简称兵装集团的国企是哪家公司
ExpectAnswer:兵器装备集团公司
没有从数据库中查询到问题：简称兵装集团的国企是哪家公司
Question：简称兵装集团的国企是哪家公司 搜索到Evidence 9 条
将Question：简称兵装集团的国企是哪家公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 简称兵装集团的国企是哪家公司
问题：简称兵装集团的国企是哪家公司
词和词性序列：简称/N.CONCEPT 兵/n 装/v 集团/n 的/uj 国企/j 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
词性序列：N.CONCEPT/n/v/n/uj/j/v/RW.RWORGANIZATIONSingle/n.nt
对问题进行分词：简称兵装集团的国企是哪家公司
分词结果为：简称 兵 装 集团 的 国企 是 哪家 公司
句法树: 
句子依存关系：
	rcmod(国企-6, 简称-1)
	dobj(简称-1, 兵-2)
	conj(简称-1, 装-3)
	dobj(装-3, 集团-4)
	cpm(简称-1, 的-5)
	top(是-7, 国企-6)
	root(ROOT-0, 是-7)
	nn(公司-9, 哪家-8)
	attr(是-7, 公司-9)
主谓宾：国企 是 公司
主谓宾词和词性序列：国企/j 是/v 公司/n.nt
主谓宾词性序列：j/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 简称兵装集团的国企是哪家公司 : 简称兵装集团的国企是哪家公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 简称/N.CONCEPT 兵/n 装/v 集团/n 的/uj 国企/j 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt  : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: N.CONCEPT/n/v/n/uj/j/v/RW.RWORGANIZATIONSingle/n.nt : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【简称兵装集团的国企是哪家公司】匹配到多个模式：
序号：1
	问题 : 简称/N.CONCEPT 兵/n 装/v 集团/n 的/uj 国企/j 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : N.CONCEPT/n/v/n/uj/j/v/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 简称兵装集团的国企是哪家公司
	模式 : 简称兵装集团的国企是哪家公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 简称兵装集团的国企是哪家公司
	模式 : 简称兵装集团的国企是哪家公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 简称/N.CONCEPT 兵/n 装/v 集团/n 的/uj 国企/j 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : N.CONCEPT/n/v/n/uj/j/v/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 251：简称兵装集团的国企是哪家公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 简称兵装集团的国企是哪家公司
Question 候选答案：
兵器装备集团公司  1.0
国务院  0.24806461482993217
天威集团  0.2245679100324582
重庆长安  0.18616961882707372
党中央  0.11764278989945508
中央军委  0.11763121275934532
ExpectAnswerRank: 1

mrr: 194.7816239316239
perfectCount: 178
notPerfectCount: 45
wrongCount: 28
unknownTypeCount: 0
questionCount: 251

MRR：77.60224061020872%
回答完美率：70.91633466135458%
回答不完美率：17.928286852589643%
回答错误率：11.155378486055776%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国最大的国家石油公司之一是什么:中国海洋石油总公司
Question:中国最大的国家石油公司之一是什么
ExpectAnswer:中国海洋石油总公司
没有从数据库中查询到问题：中国最大的国家石油公司之一是什么
Question：中国最大的国家石油公司之一是什么 搜索到Evidence 9 条
将Question：中国最大的国家石油公司之一是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国最大的国家石油公司之一是什么
问题：中国最大的国家石油公司之一是什么
词和词性序列：中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
对问题进行分词：中国最大的国家石油公司之一是什么
分词结果为：中国 最大 的 国家 石油 公司 之一 是 什么
句法树: 
句子依存关系：
	nn(之一-7, 中国-1)
	assmod(之一-7, 最大-2)
	assm(最大-2, 的-3)
	nn(之一-7, 国家-4)
	nn(之一-7, 石油-5)
	nn(之一-7, 公司-6)
	top(是-8, 之一-7)
	root(ROOT-0, 是-8)
	attr(是-8, 什么-9)
主谓宾：之一 是 什么
主谓宾词和词性序列：之一/r 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：r/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国最大的国家石油公司之一是什么 : 中国最大的国家石油公司之一是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle  : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
匹配成功: ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).* : DefinitionSOB->ConceptDescriptiveSingle
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).* : Location->Single8
匹配成功: 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle  : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
匹配成功: ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).* : Definition->Definition3
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国最大的国家石油公司之一是什么】匹配到多个模式：
序号：1
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：8
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：9
	问题 : 中国最大的国家石油公司之一是什么
	模式 : 中国最大的国家石油公司之一是什么
	分类 : Organization
序号：10
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：11
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国最大的国家石油公司之一是什么
	模式 : 中国最大的国家石油公司之一是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
序号：2
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V).*(RW.RWOrdinarySingle).*
	分类 : DefinitionSOB->ConceptDescriptiveSingle
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：4
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(P.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single8
序号：5
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：6
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：7
	问题 : 中国/ns 最大/a 的/uj 国家/ns 石油/N.CONCEPT 公司/n.nt 之一/r 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
序号：8
	问题 : ns/a/uj/ns/N.CONCEPT/n.nt/r/v/RW.RWOrdinarySingle
	模式 : .*(N.Concept).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Definition->Definition3
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 252：中国最大的国家石油公司之一是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国最大的国家石油公司之一是什么
Question 候选答案：
中海油  1.0
中国海洋石油总公司  0.9531375350973846
中国海油  0.4768452172683629
中国石油集团  0.18126472799624782
中国石油化工集团公司  0.0941982417352255
中国石化集团  0.06713900168937728
中国石化集团公司  0.06712591033650102
ExpectAnswerRank: 2

mrr: 195.2816239316239
perfectCount: 178
notPerfectCount: 46
wrongCount: 28
unknownTypeCount: 0
questionCount: 252

MRR：77.49270790937456%
回答完美率：70.63492063492063%
回答不完美率：18.253968253968253%
回答错误率：11.11111111111111%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:王宜林是哪家国企老总:中海油
Question:王宜林是哪家国企老总
ExpectAnswer:中海油
没有从数据库中查询到问题：王宜林是哪家国企老总
Question：王宜林是哪家国企老总 搜索到Evidence 9 条
将Question：王宜林是哪家国企老总 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 王宜林是哪家国企老总
问题：王宜林是哪家国企老总
词和词性序列：王宜林/nr 是/v 哪家/RW.RWORGANIZATIONSingle 国企/j 老总/n 
词性序列：nr/v/RW.RWORGANIZATIONSingle/j/n
对问题进行分词：王宜林是哪家国企老总
分词结果为：王宜林 是 哪家 国企 老总
句法树: 
句子依存关系：
	top(是-2, 王宜林-1)
	root(ROOT-0, 是-2)
	nn(老总-5, 哪家-3)
	nn(老总-5, 国企-4)
	attr(是-2, 老总-5)
主谓宾：王宜林 是 老总
主谓宾词和词性序列：王宜林/nr 是/v 老总/n
主谓宾词性序列：nr/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 王宜林是哪家国企老总 : 王宜林是哪家国企老总 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 王宜林是哪家国企老总
	模式 : 王宜林是哪家国企老总
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 253：王宜林是哪家国企老总 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 王宜林是哪家国企老总
Question 候选答案：
中海油  1.0
石油集团  0.6956176150295049
中国海洋石油总公司  0.6524198562029092
农家院  0.24137778859703943
中国企业家协会  0.2388947839301604
中国企业联合会  0.23884408873175716
福建省委  0.21266362419882492
中石化集团  0.21246072336339125
中国海油  0.1622041529686727
ExpectAnswerRank: 1

mrr: 196.2816239316239
perfectCount: 179
notPerfectCount: 46
wrongCount: 28
unknownTypeCount: 0
questionCount: 253

MRR：77.58166953819126%
回答完美率：70.7509881422925%
回答不完美率：18.181818181818183%
回答错误率：11.067193675889328%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:原中国第一汽车制造厂是哪家国企:中国第一汽车集团公司
Question:原中国第一汽车制造厂是哪家国企
ExpectAnswer:中国第一汽车集团公司
没有从数据库中查询到问题：原中国第一汽车制造厂是哪家国企
Question：原中国第一汽车制造厂是哪家国企 搜索到Evidence 9 条
将Question：原中国第一汽车制造厂是哪家国企 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 原中国第一汽车制造厂是哪家国企
问题：原中国第一汽车制造厂是哪家国企
词和词性序列：原/b 中国/ns 第一/m 汽车/N.ObjectInstrument 制造厂/n 是/v 哪家/RW.RWORGANIZATIONSingle 国企/j 
词性序列：b/ns/m/N.ObjectInstrument/n/v/RW.RWORGANIZATIONSingle/j
对问题进行分词：原中国第一汽车制造厂是哪家国企
分词结果为：原 中国 第一 汽车 制造厂 是 哪家 国企
句法树: 
句子依存关系：
	amod(中国-2, 原-1)
	nn(制造厂-5, 中国-2)
	nummod(制造厂-5, 第一-3)
	nn(制造厂-5, 汽车-4)
	top(是-6, 制造厂-5)
	root(ROOT-0, 是-6)
	amod(国企-8, 哪家-7)
	attr(是-6, 国企-8)
主谓宾：制造厂 是 国企
主谓宾词和词性序列：制造厂/n 是/v 国企/j
主谓宾词性序列：n/v/j

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 原中国第一汽车制造厂是哪家国企 : 原中国第一汽车制造厂是哪家国企 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 原中国第一汽车制造厂是哪家国企
	模式 : 原中国第一汽车制造厂是哪家国企
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 254：原中国第一汽车制造厂是哪家国企 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 原中国第一汽车制造厂是哪家国企
Question 候选答案：
一汽集团  1.0
一汽贸易总公司  0.8250303313842231
央视网  0.6405304018453438
中国一汽  0.6402301081000693
ExpectAnswerRank: -1

mrr: 196.2816239316239
perfectCount: 179
notPerfectCount: 46
wrongCount: 29
unknownTypeCount: 0
questionCount: 254

MRR：77.27622989434012%
回答完美率：70.47244094488188%
回答不完美率：18.11023622047244%
回答错误率：11.41732283464567%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家国企简称一汽:中国第一汽车集团公司
Question:哪家国企简称一汽
ExpectAnswer:中国第一汽车集团公司
没有从数据库中查询到问题：哪家国企简称一汽
Question：哪家国企简称一汽 搜索到Evidence 9 条
将Question：哪家国企简称一汽 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪家国企简称一汽
问题：哪家国企简称一汽
词和词性序列：哪家/RW.RWORGANIZATIONSingle 国企/j 简称/N.CONCEPT 一汽/j 
词性序列：RW.RWORGANIZATIONSingle/j/N.CONCEPT/j
对问题进行分词：哪家国企简称一汽
分词结果为：哪家 国企 简称 一汽
句法树: 
句子依存关系：
	amod(国企-2, 哪家-1)
	nsubj(简称-3, 国企-2)
	root(ROOT-0, 简称-3)
	dobj(简称-3, 一汽-4)
主谓宾：国企 简称 一汽
主谓宾词和词性序列：国企/j 简称/N.CONCEPT 一汽/j
主谓宾词性序列：j/N.CONCEPT/j

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家国企简称一汽 : 哪家国企简称一汽 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家国企简称一汽
	模式 : 哪家国企简称一汽
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 255：哪家国企简称一汽 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家国企简称一汽
Question 候选答案：
一汽大众  1.0
中国第一汽车集团公司  0.6658604119826492
长安汽车  0.5007694595233897
长春一汽  0.493917356136043
吉林省委  0.34852117730923093
中国建材  0.27985583267807607
一汽集团  0.27780067678492587
普通员工  0.17513403583107304
ExpectAnswerRank: 2

mrr: 196.7816239316239
perfectCount: 179
notPerfectCount: 47
wrongCount: 29
unknownTypeCount: 0
questionCount: 255

MRR：77.16926428691133%
回答完美率：70.19607843137254%
回答不完美率：18.43137254901961%
回答错误率：11.372549019607844%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:徐建一是哪家国企的董事长:一汽集团
Question:徐建一是哪家国企的董事长
ExpectAnswer:一汽集团
没有从数据库中查询到问题：徐建一是哪家国企的董事长
Question：徐建一是哪家国企的董事长 搜索到Evidence 10 条
将Question：徐建一是哪家国企的董事长 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
保存证据 10 成功
使用【模式匹配】的方法判断问题类型： 徐建一是哪家国企的董事长
问题：徐建一是哪家国企的董事长
词和词性序列：徐建/nr 一/m 是/v 哪家/RW.RWORGANIZATIONSingle 国企/j 的/uj 董事长/n 
词性序列：nr/m/v/RW.RWORGANIZATIONSingle/j/uj/n
对问题进行分词：徐建一是哪家国企的董事长
分词结果为：徐建 一 是 哪家 国企 的 董事长
句法树: 
句子依存关系：
	nsubj(是-3, 徐建-1)
	advmod(是-3, 一-2)
	root(ROOT-0, 是-3)
	nn(国企-5, 哪家-4)
	assmod(董事长-7, 国企-5)
	assm(国企-5, 的-6)
	attr(是-3, 董事长-7)
主谓宾：徐建 是 董事长
主谓宾词和词性序列：徐建/nr 是/v 董事长/n
主谓宾词性序列：nr/v/n

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 徐建一是哪家国企的董事长 : 徐建一是哪家国企的董事长 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 徐建一是哪家国企的董事长
	模式 : 徐建一是哪家国企的董事长
	分类 : Organization
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 256：徐建一是哪家国企的董事长 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 徐建一是哪家国企的董事长
Question 候选答案：
一汽集团  1.0
中国第一汽车集团公司  0.45936336113849746
中国一汽  0.19103700934551116
上市公司  0.07650727277257126
ExpectAnswerRank: 1

mrr: 197.7816239316239
perfectCount: 180
notPerfectCount: 47
wrongCount: 29
unknownTypeCount: 0
questionCount: 256

MRR：77.25844684829059%
回答完美率：70.3125%
回答不完美率：18.359375%
回答错误率：11.328125%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:红旗轿车是哪家汽车公司的:中国第一汽车集团公司
Question:红旗轿车是哪家汽车公司的
ExpectAnswer:中国第一汽车集团公司
没有从数据库中查询到问题：红旗轿车是哪家汽车公司的
Question：红旗轿车是哪家汽车公司的 搜索到Evidence 8 条
将Question：红旗轿车是哪家汽车公司的 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 红旗轿车是哪家汽车公司的
问题：红旗轿车是哪家汽车公司的
词和词性序列：红旗轿车/n 是/v 哪家/RW.RWORGANIZATIONSingle 汽车/N.ObjectInstrument 公司/n.nt 的/uj 
词性序列：n/v/RW.RWORGANIZATIONSingle/N.ObjectInstrument/n.nt/uj
对问题进行分词：红旗轿车是哪家汽车公司的
分词结果为：红旗轿车 是 哪家 汽车 公司 的
句法树: 
句子依存关系：
	advmod(是-2, 红旗轿车-1)
	root(ROOT-0, 是-2)
	attr(是-2, 哪家-3)
	nn(公司-5, 汽车-4)
	dobj(哪家-3, 公司-5)
	cpm(哪家-3, 的-6)
主谓宾：红旗轿车 是 哪家
主谓宾词和词性序列：红旗轿车/n 是/v 哪家/RW.RWORGANIZATIONSingle
主谓宾词性序列：n/v/RW.RWORGANIZATIONSingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 红旗轿车是哪家汽车公司的 : 红旗轿车是哪家汽车公司的 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 红旗轿车/n 是/v 哪家/RW.RWORGANIZATIONSingle 汽车/N.ObjectInstrument 公司/n.nt 的/uj  : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: n/v/RW.RWORGANIZATIONSingle/N.ObjectInstrument/n.nt/uj : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【红旗轿车是哪家汽车公司的】匹配到多个模式：
序号：1
	问题 : 红旗轿车/n 是/v 哪家/RW.RWORGANIZATIONSingle 汽车/N.ObjectInstrument 公司/n.nt 的/uj 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : n/v/RW.RWORGANIZATIONSingle/N.ObjectInstrument/n.nt/uj
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 红旗轿车是哪家汽车公司的
	模式 : 红旗轿车是哪家汽车公司的
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 红旗轿车是哪家汽车公司的
	模式 : 红旗轿车是哪家汽车公司的
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 红旗轿车/n 是/v 哪家/RW.RWORGANIZATIONSingle 汽车/N.ObjectInstrument 公司/n.nt 的/uj 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : n/v/RW.RWORGANIZATIONSingle/N.ObjectInstrument/n.nt/uj
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 257：红旗轿车是哪家汽车公司的 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 红旗轿车是哪家汽车公司的
Question 候选答案：
中国第一汽车集团公司  1.0
红旗车  0.9492660139381306
一汽四环  0.5426086622927625
一汽轿车股份有限公司  0.4075240226926801
ExpectAnswerRank: 1

mrr: 198.7816239316239
perfectCount: 181
notPerfectCount: 47
wrongCount: 29
unknownTypeCount: 0
questionCount: 257

MRR：77.34693538195484%
回答完美率：70.42801556420234%
回答不完美率：18.28793774319066%
回答错误率：11.284046692607005%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:总部位于湖北省十堰的汽车公司是什么:东风汽车公司
Question:总部位于湖北省十堰的汽车公司是什么
ExpectAnswer:东风汽车公司
没有从数据库中查询到问题：总部位于湖北省十堰的汽车公司是什么
Question：总部位于湖北省十堰的汽车公司是什么 搜索到Evidence 8 条
将Question：总部位于湖北省十堰的汽车公司是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 总部位于湖北省十堰的汽车公司是什么
问题：总部位于湖北省十堰的汽车公司是什么
词和词性序列：总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
对问题进行分词：总部位于湖北省十堰的汽车公司是什么
分词结果为：总部 位于 湖北省 十堰 的 汽车 公司 是 什么
句法树: 
句子依存关系：
	nsubj(位于-2, 总部-1)
	root(ROOT-0, 位于-2)
	nn(公司-7, 湖北省-3)
	assmod(公司-7, 十堰-4)
	assm(十堰-4, 的-5)
	nn(公司-7, 汽车-6)
	dobj(位于-2, 公司-7)
	conj(位于-2, 是-8)
	attr(是-8, 什么-9)
主谓宾：总部 位于 是
主谓宾词和词性序列：总部/ns 位于/v 是/v
主谓宾词性序列：ns/v/v

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 总部位于湖北省十堰的汽车公司是什么 : 总部位于湖北省十堰的汽车公司是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(nt)/(V)/(RW.RWOrdinarySingle).* : OrganizationOfSOB->Single1
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(nt).*(V.).*(RW.RWOrdinarySingle).* : Organization->Single2
匹配成功: 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).* : Object->Instrument4
匹配成功: 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).* : Object->InstrumentSingle
匹配成功: 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle  : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
匹配成功: ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle : .*(N.Object).*(V).*(RW.RWOrdinarySingle).* : Object->OtherSingle2
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【总部位于湖北省十堰的汽车公司是什么】匹配到多个模式：
序号：1
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：6
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：7
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：8
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：9
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：10
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：11
	问题 : 总部位于湖北省十堰的汽车公司是什么
	模式 : 总部位于湖北省十堰的汽车公司是什么
	分类 : Organization
序号：12
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 总部位于湖北省十堰的汽车公司是什么
	模式 : 总部位于湖北省十堰的汽车公司是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel2_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt)/(V)/(RW.RWOrdinarySingle).*
	分类 : OrganizationOfSOB->Single1
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：4
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(nt).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Organization->Single2
序号：5
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：6
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectInstrument).*(RW.RWOrdinarySingle).*
	分类 : Object->Instrument4
序号：7
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：8
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.ObjectInstrument).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->InstrumentSingle
序号：9
	问题 : 总部/ns 位于/v 湖北省/ns 十堰/ns 的/uj 汽车/N.ObjectInstrument 公司/n.nt 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
序号：10
	问题 : ns/v/ns/ns/uj/N.ObjectInstrument/n.nt/v/RW.RWOrdinarySingle
	模式 : .*(N.Object).*(V).*(RW.RWOrdinarySingle).*
	分类 : Object->OtherSingle2
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 258：总部位于湖北省十堰的汽车公司是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 总部位于湖北省十堰的汽车公司是什么
Question 候选答案：
东风汽车公司  1.0
质量保证部  0.22680725413270308
ExpectAnswerRank: 1

mrr: 199.7816239316239
perfectCount: 182
notPerfectCount: 47
wrongCount: 29
unknownTypeCount: 0
questionCount: 258

MRR：77.43473795799376%
回答完美率：70.54263565891473%
回答不完美率：18.217054263565892%
回答错误率：11.24031007751938%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国最大的钢铁公司是什么:宝钢集团
Question:中国最大的钢铁公司是什么
ExpectAnswer:宝钢集团
没有从数据库中查询到问题：中国最大的钢铁公司是什么
Question：中国最大的钢铁公司是什么 搜索到Evidence 8 条
将Question：中国最大的钢铁公司是什么 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
使用【模式匹配】的方法判断问题类型： 中国最大的钢铁公司是什么
问题：中国最大的钢铁公司是什么
词和词性序列：中国/ns 最大/a 的/uj 钢铁公司/n 是/v 什么/RW.RWOrdinarySingle 
词性序列：ns/a/uj/n/v/RW.RWOrdinarySingle
对问题进行分词：中国最大的钢铁公司是什么
分词结果为：中国 最大 的 钢铁公司 是 什么
句法树: 
句子依存关系：
	nn(钢铁公司-4, 中国-1)
	assmod(钢铁公司-4, 最大-2)
	assm(最大-2, 的-3)
	top(是-5, 钢铁公司-4)
	root(ROOT-0, 是-5)
	attr(是-5, 什么-6)
主谓宾：钢铁公司 是 什么
主谓宾词和词性序列：钢铁公司/n 是/v 什么/RW.RWOrdinarySingle
主谓宾词性序列：n/v/RW.RWOrdinarySingle

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国最大的钢铁公司是什么 : 中国最大的钢铁公司是什么 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 最大/a 的/uj 钢铁公司/n 是/v 什么/RW.RWOrdinarySingle  : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
匹配成功: ns/a/uj/n/v/RW.RWOrdinarySingle : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).* : Location->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国最大的钢铁公司是什么】匹配到多个模式：
序号：1
	问题 : 中国/ns 最大/a 的/uj 钢铁公司/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：3
	问题 : 中国最大的钢铁公司是什么
	模式 : 中国最大的钢铁公司是什么
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国最大的钢铁公司是什么
	模式 : 中国最大的钢铁公司是什么
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 最大/a 的/uj 钢铁公司/n 是/v 什么/RW.RWOrdinarySingle 
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
序号：2
	问题 : ns/a/uj/n/v/RW.RWOrdinarySingle
	模式 : .*(ns|nsf).*(V.).*(RW.RWOrdinarySingle).*
	分类 : Location->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 259：中国最大的钢铁公司是什么 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国最大的钢铁公司是什么
Question 候选答案：
钢铁集团  1.0
宝钢集团  0.7121879333716744
河北省委  0.3995216050845584
ExpectAnswerRank: 2

mrr: 200.2816239316239
perfectCount: 182
notPerfectCount: 48
wrongCount: 29
unknownTypeCount: 0
questionCount: 259

MRR：77.32881232881232%
回答完美率：70.27027027027027%
回答不完美率：18.53281853281853%
回答错误率：11.196911196911197%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国最大的房屋建筑承包商是哪家公司:中建总公司
Question:中国最大的房屋建筑承包商是哪家公司
ExpectAnswer:中建总公司
没有从数据库中查询到问题：中国最大的房屋建筑承包商是哪家公司
Question：中国最大的房屋建筑承包商是哪家公司 搜索到Evidence 9 条
将Question：中国最大的房屋建筑承包商是哪家公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国最大的房屋建筑承包商是哪家公司
问题：中国最大的房屋建筑承包商是哪家公司
词和词性序列：中国/ns 最大/a 的/uj 房屋建筑/n 承包商/n 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
词性序列：ns/a/uj/n/n/v/RW.RWORGANIZATIONSingle/n.nt
对问题进行分词：中国最大的房屋建筑承包商是哪家公司
分词结果为：中国 最大 的 房屋建筑 承包商 是 哪家 公司
句法树: 
句子依存关系：
	nn(承包商-5, 中国-1)
	assmod(承包商-5, 最大-2)
	assm(最大-2, 的-3)
	nn(承包商-5, 房屋建筑-4)
	top(是-6, 承包商-5)
	root(ROOT-0, 是-6)
	nn(公司-8, 哪家-7)
	attr(是-6, 公司-8)
主谓宾：承包商 是 公司
主谓宾词和词性序列：承包商/n 是/v 公司/n.nt
主谓宾词性序列：n/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国最大的房屋建筑承包商是哪家公司 : 中国最大的房屋建筑承包商是哪家公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 最大/a 的/uj 房屋建筑/n 承包商/n 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt  : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: ns/a/uj/n/n/v/RW.RWORGANIZATIONSingle/n.nt : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国最大的房屋建筑承包商是哪家公司】匹配到多个模式：
序号：1
	问题 : 中国/ns 最大/a 的/uj 房屋建筑/n 承包商/n 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : ns/a/uj/n/n/v/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 中国最大的房屋建筑承包商是哪家公司
	模式 : 中国最大的房屋建筑承包商是哪家公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国最大的房屋建筑承包商是哪家公司
	模式 : 中国最大的房屋建筑承包商是哪家公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 最大/a 的/uj 房屋建筑/n 承包商/n 是/v 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : ns/a/uj/n/n/v/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 260：中国最大的房屋建筑承包商是哪家公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国最大的房屋建筑承包商是哪家公司
Question 候选答案：
中国建筑工程总公司  1.0
ExpectAnswerRank: -1

mrr: 200.2816239316239
perfectCount: 182
notPerfectCount: 48
wrongCount: 30
unknownTypeCount: 0
questionCount: 260

MRR：77.03139381985534%
回答完美率：70.0%
回答不完美率：18.461538461538463%
回答错误率：11.538461538461538%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:中国哪家公司承建了泰国拉玛八世皇大桥:中国建筑工程总公司
Question:中国哪家公司承建了泰国拉玛八世皇大桥
ExpectAnswer:中国建筑工程总公司
没有从数据库中查询到问题：中国哪家公司承建了泰国拉玛八世皇大桥
Question：中国哪家公司承建了泰国拉玛八世皇大桥 搜索到Evidence 9 条
将Question：中国哪家公司承建了泰国拉玛八世皇大桥 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 中国哪家公司承建了泰国拉玛八世皇大桥
问题：中国哪家公司承建了泰国拉玛八世皇大桥
词和词性序列：中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns 
词性序列：ns/RW.RWORGANIZATIONSingle/n.nt/v/ul/ns/nrt/m/nr/ns
对问题进行分词：中国哪家公司承建了泰国拉玛八世皇大桥
分词结果为：中国 哪家 公司 承建 了 泰国 拉玛 八 世皇 大桥
句法树: 
句子依存关系：
	nn(公司-3, 中国-1)
	nn(公司-3, 哪家-2)
	nsubj(承建-4, 公司-3)
	root(ROOT-0, 承建-4)
	asp(承建-4, 了-5)
	nn(拉玛-7, 泰国-6)
	nn(世皇-9, 拉玛-7)
	nummod(世皇-9, 八-8)
	nn(大桥-10, 世皇-9)
	dobj(承建-4, 大桥-10)
主谓宾：公司 承建 大桥
主谓宾词和词性序列：公司/n.nt 承建/v 大桥/ns
主谓宾词性序列：n.nt/v/ns

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 中国哪家公司承建了泰国拉玛八世皇大桥 : 中国哪家公司承建了泰国拉玛八世皇大桥 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns  : .*哪.*M.*(nr|nr1|nr2|nrj|nrf).* : Person->Multi5
匹配成功: 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: ns/RW.RWORGANIZATIONSingle/n.nt/v/ul/ns/nrt/m/nr/ns : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【中国哪家公司承建了泰国拉玛八世皇大桥】匹配到多个模式：
序号：1
	问题 : 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns 
	模式 : .*哪.*M.*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Multi5
序号：2
	问题 : 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : ns/RW.RWORGANIZATIONSingle/n.nt/v/ul/ns/nrt/m/nr/ns
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：4
	问题 : 中国哪家公司承建了泰国拉玛八世皇大桥
	模式 : 中国哪家公司承建了泰国拉玛八世皇大桥
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国哪家公司承建了泰国拉玛八世皇大桥
	模式 : 中国哪家公司承建了泰国拉玛八世皇大桥
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns 
	模式 : .*哪.*M.*(nr|nr1|nr2|nrj|nrf).*
	分类 : Person->Multi5
序号：2
	问题 : 中国/ns 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 承建/v 了/ul 泰国/ns 拉玛/nrt 八/m 世皇/nr 大桥/ns 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : ns/RW.RWORGANIZATIONSingle/n.nt/v/ul/ns/nrt/m/nr/ns
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 261：中国哪家公司承建了泰国拉玛八世皇大桥 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 中国哪家公司承建了泰国拉玛八世皇大桥
Question 候选答案：
中国建筑工程总公司  1.0
中建总公司  0.5469987095670651
中央银行  0.3260616118245134
ExpectAnswerRank: 1

mrr: 201.2816239316239
perfectCount: 183
notPerfectCount: 48
wrongCount: 30
unknownTypeCount: 0
questionCount: 261

MRR：77.11939614238463%
回答完美率：70.11494252873564%
回答不完美率：18.39080459770115%
回答错误率：11.494252873563218%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:比尔盖茨从哪个大学辍学:哈佛大学
Question:比尔盖茨从哪个大学辍学
ExpectAnswer:哈佛大学
没有从数据库中查询到问题：比尔盖茨从哪个大学辍学
Question：比尔盖茨从哪个大学辍学 搜索到Evidence 9 条
将Question：比尔盖茨从哪个大学辍学 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 比尔盖茨从哪个大学辍学
问题：比尔盖茨从哪个大学辍学
词和词性序列：比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v 
词性序列：nr/p/RW.RWOrdinarySingle/n.nt/v
对问题进行分词：比尔盖茨从哪个大学辍学
分词结果为：比尔盖茨 从 哪个 大学 辍学
句法树: 
句子依存关系：
	nsubj(辍学-5, 比尔盖茨-1)
	prep(辍学-5, 从-2)
	det(大学-4, 哪个-3)
	pobj(从-2, 大学-4)
	root(ROOT-0, 辍学-5)
主谓宾：比尔盖茨 辍学 从
主谓宾词和词性序列：比尔盖茨/nr 辍学/v 从/p
主谓宾词性序列：nr/v/p

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 比尔盖茨从哪个大学辍学 : 比尔盖茨从哪个大学辍学 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v  : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: nr/p/RW.RWOrdinarySingle/n.nt/v : .*(P.).*(RW.RWOrdinarySingle).*(nt).* : Organization->Single5
匹配成功: 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v  : .*(RW.RWOrdinarySingle).*(nt).*(V.).* : Organization->Single7
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【比尔盖茨从哪个大学辍学】匹配到多个模式：
序号：1
	问题 : 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：2
	问题 : nr/p/RW.RWOrdinarySingle/n.nt/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：3
	问题 : 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
序号：4
	问题 : 比尔盖茨从哪个大学辍学
	模式 : 比尔盖茨从哪个大学辍学
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨从哪个大学辍学
	模式 : 比尔盖茨从哪个大学辍学
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v 
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：2
	问题 : nr/p/RW.RWOrdinarySingle/n.nt/v
	模式 : .*(P.).*(RW.RWOrdinarySingle).*(nt).*
	分类 : Organization->Single5
序号：3
	问题 : 比尔盖茨/nr 从/p 哪个/RW.RWOrdinarySingle 大学/n.nt 辍学/v 
	模式 : .*(RW.RWOrdinarySingle).*(nt).*(V.).*
	分类 : Organization->Single7
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 262：比尔盖茨从哪个大学辍学 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 比尔盖茨从哪个大学辍学
Question 候选答案：
中央电视台  1.0
微软公司  0.9990422507232358
ExpectAnswerRank: -1

mrr: 201.2816239316239
perfectCount: 183
notPerfectCount: 48
wrongCount: 31
unknownTypeCount: 0
questionCount: 262

MRR：76.82504730214652%
回答完美率：69.8473282442748%
回答不完美率：18.3206106870229%
回答错误率：11.83206106870229%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:比尔盖茨创办了哪家公司:微软公司
Question:比尔盖茨创办了哪家公司
ExpectAnswer:微软公司
没有从数据库中查询到问题：比尔盖茨创办了哪家公司
Question：比尔盖茨创办了哪家公司 搜索到Evidence 9 条
将Question：比尔盖茨创办了哪家公司 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 比尔盖茨创办了哪家公司
问题：比尔盖茨创办了哪家公司
词和词性序列：比尔盖茨/nr 创办/v 了/ul 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
词性序列：nr/v/ul/RW.RWORGANIZATIONSingle/n.nt
对问题进行分词：比尔盖茨创办了哪家公司
分词结果为：比尔盖茨 创办 了 哪家 公司
句法树: 
句子依存关系：
	nsubj(创办-2, 比尔盖茨-1)
	root(ROOT-0, 创办-2)
	asp(创办-2, 了-3)
	nn(公司-5, 哪家-4)
	dobj(创办-2, 公司-5)
主谓宾：比尔盖茨 创办 公司
主谓宾词和词性序列：比尔盖茨/nr 创办/v 公司/n.nt
主谓宾词性序列：nr/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 比尔盖茨创办了哪家公司 : 比尔盖茨创办了哪家公司 : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 比尔盖茨/nr 创办/v 了/ul 哪家/RW.RWORGANIZATIONSingle 公司/n.nt  : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
匹配成功: nr/v/ul/RW.RWORGANIZATIONSingle/n.nt : .*(V.).*(RW.RWOrganizationSingle).*(nt).* : Organization->Single4
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【比尔盖茨创办了哪家公司】匹配到多个模式：
序号：1
	问题 : 比尔盖茨/nr 创办/v 了/ul 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : nr/v/ul/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：3
	问题 : 比尔盖茨创办了哪家公司
	模式 : 比尔盖茨创办了哪家公司
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨创办了哪家公司
	模式 : 比尔盖茨创办了哪家公司
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 比尔盖茨/nr 创办/v 了/ul 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
序号：2
	问题 : nr/v/ul/RW.RWORGANIZATIONSingle/n.nt
	模式 : .*(V.).*(RW.RWOrganizationSingle).*(nt).*
	分类 : Organization->Single4
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 263：比尔盖茨创办了哪家公司 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 比尔盖茨创办了哪家公司
Question 候选答案：
微软公司  1.0
ExpectAnswerRank: 1

mrr: 202.2816239316239
perfectCount: 184
notPerfectCount: 48
wrongCount: 31
unknownTypeCount: 0
questionCount: 263

MRR：76.91316499301288%
回答完美率：69.96197718631178%
回答不完美率：18.250950570342205%
回答错误率：11.787072243346007%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家公司称为“中国科学院计算所新技术发展公司”:联想集团
Question:哪家公司称为“中国科学院计算所新技术发展公司”
ExpectAnswer:联想集团
没有从数据库中查询到问题：哪家公司称为“中国科学院计算所新技术发展公司”
Question：哪家公司称为“中国科学院计算所新技术发展公司” 搜索到Evidence 9 条
将Question：哪家公司称为“中国科学院计算所新技术发展公司” 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪家公司称为“中国科学院计算所新技术发展公司”
问题：哪家公司称为“中国科学院计算所新技术发展公司”
词和词性序列：哪家/RW.RWORGANIZATIONSingle 公司/n.nt 称为/v 中国科学院计算所/nt 新/a 技术/n 发展/vn 公司/n.nt 
词性序列：RW.RWORGANIZATIONSingle/n.nt/v/nt/a/n/vn/n.nt
对问题进行分词：哪家公司称为“中国科学院计算所新技术发展公司”
分词结果为：哪家 公司 称为 中国科学院计算所 新 技术 发展 公司
句法树: 
句子依存关系：
	nn(公司-2, 哪家-1)
	nsubj(称为-3, 公司-2)
	root(ROOT-0, 称为-3)
	nn(公司-8, 中国科学院计算所-4)
	amod(技术-6, 新-5)
	nn(发展-7, 技术-6)
	nn(公司-8, 发展-7)
	dobj(称为-3, 公司-8)
主谓宾：公司 称为 公司
主谓宾词和词性序列：公司/n.nt 称为/v 公司/n.nt
主谓宾词性序列：n.nt/v/n.nt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt
匹配成功: 哪家公司称为“中国科学院计算所新技术发展公司” : 哪家公司称为“中国科学院计算所新技术发展公司” : Organization
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel1_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt
在问题类型模式文件中[未找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel2_true.txt

处理问题类型模式文件： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
匹配成功: 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 称为/v 中国科学院计算所/nt 新/a 技术/n 发展/vn 公司/n.nt  : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
匹配成功: RW.RWORGANIZATIONSingle/n.nt/v/nt/a/n/vn/n.nt : .*(RW.RWOrganizationSingle).*(nt).*(V.).* : Organization->Single6
在问题类型模式文件中[找到]匹配项： /questionTypePatterns/QuestionTypePatternsLevel3_true.txt
问题【哪家公司称为“中国科学院计算所新技术发展公司”】匹配到多个模式：
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 称为/v 中国科学院计算所/nt 新/a 技术/n 发展/vn 公司/n.nt 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/v/nt/a/n/vn/n.nt
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：3
	问题 : 哪家公司称为“中国科学院计算所新技术发展公司”
	模式 : 哪家公司称为“中国科学院计算所新技术发展公司”
	分类 : Organization
从紧凑到宽松进行处理
问题类型模式【QuestionTypePatternsLevel1_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家公司称为“中国科学院计算所新技术发展公司”
	模式 : 哪家公司称为“中国科学院计算所新技术发展公司”
	分类 : Organization
问题类型模式【QuestionTypePatternsLevel3_true.txt】匹配情况，是否允许匹配多个类型：true
序号：1
	问题 : 哪家/RW.RWORGANIZATIONSingle 公司/n.nt 称为/v 中国科学院计算所/nt 新/a 技术/n 发展/vn 公司/n.nt 
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
序号：2
	问题 : RW.RWORGANIZATIONSingle/n.nt/v/nt/a/n/vn/n.nt
	模式 : .*(RW.RWOrganizationSingle).*(nt).*(V.).*
	分类 : Organization->Single6
从紧凑到宽松进行处理
处理问题类型模式：QuestionTypePatternsLevel1_true.txt ，是否允许多个匹配：true
只有一个匹配结果，匹配成功
	类型	选中数目
	ORGANIZATION_NAME	1
问题类型模式QuestionTypePatternsLevel1_true.txt有一个匹配，【找到类型】
找到类型，返回：ORGANIZATION_NAME
开始处理Question 264：哪家公司称为“中国科学院计算所新技术发展公司” 【问题类型：ORGANIZATION_NAME】
************************************
************************************
Question 哪家公司称为“中国科学院计算所新技术发展公司”
Question 候选答案：
联想集团  1.0
中国家电  0.2107915107343605
联想公司  0.14289378434754282
中科院计算所  0.14284645714697755
ExpectAnswerRank: 1

mrr: 203.2816239316239
perfectCount: 185
notPerfectCount: 48
wrongCount: 31
unknownTypeCount: 0
questionCount: 264

MRR：77.00061512561511%
回答完美率：70.07575757575758%
回答不完美率：18.181818181818183%
回答错误率：11.742424242424242%
未知类型率：0.0%

从类路径的 /org/apdplat/qa/files/organization_name_questions.txt 中加载Question:哪家电脑制造商由中科院投资并成立于1984年:联想集团
Question:哪家电脑制造商由中科院投资并成立于1984年
ExpectAnswer:联想集团
没有从数据库中查询到问题：哪家电脑制造商由中科院投资并成立于1984年
Question：哪家电脑制造商由中科院投资并成立于1984年 搜索到Evidence 9 条
将Question：哪家电脑制造商由中科院投资并成立于1984年 加入MySQL数据库
保存问题成功
保存证据 1 成功
保存证据 2 成功
保存证据 3 成功
保存证据 4 成功
保存证据 5 成功
保存证据 6 成功
保存证据 7 成功
保存证据 8 成功
保存证据 9 成功
使用【模式匹配】的方法判断问题类型： 哪家电脑制造商由中科院投资并成立于1984年
问题：哪家电脑制造商由中科院投资并成立于1984年
词和词性序列：哪家/RW.RWORGANIZATIONSingle 电脑/N.ObjectInstrument 制造商/n.nt 由/p 中科院/j 投资/vn 并/c 成立/v 于/p 1984年/m 
词性序列：RW.RWORGANIZATIONSingle/N.ObjectInstrument/n.nt/p/j/vn/c/v/p/m
对问题进行分词：哪家电脑制造商由中科院投资并成立于1984年
分词结果为：哪家 电脑 制造商 由 中科院 投资 并 成立 于 1984年
没有从数据库中查询到问题：APDPlat的发起人是谁？
执行搜索失败：
java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method) ~[na:1.7.0_45]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200) ~[na:1.7.0_45]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182) ~[na:1.7.0_45]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.7.0_45]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.7.0_45]
	at java.net.Socket.connect(Socket.java:579) ~[na:1.7.0_45]
	at java.net.Socket.connect(Socket.java:528) ~[na:1.7.0_45]
	at java.net.Socket.<init>(Socket.java:425) ~[na:1.7.0_45]
	at java.net.Socket.<init>(Socket.java:280) ~[na:1.7.0_45]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) ~[commons-httpclient-3.1.jar:na]
	at org.apdplat.qa.datasource.GoogleDataSource.search(GoogleDataSource.java:234) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.getAndAnswerQuestion(GoogleDataSource.java:197) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.getQuestion(GoogleDataSource.java:83) [classes/:na]
	at org.apdplat.qa.datasource.GoogleDataSource.main(GoogleDataSource.java:284) [classes/:na]
结果页 1 没有搜索到结果
Question：APDPlat的发起人是谁？ 搜索到Evidence 0 条
开始设置默认词典路径
default.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/default.dic
ambiguity.dic：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/default/ambiguity.dic
开始初始化自定义细分词性配置
自定义词典目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/dic/custom/
忽略空行：
忽略空行：//	_stop	50
忽略空行：#	_stop	50
初始化自定义词数：2882
完成初始化自定义细分词性配置
模型：models/chineseFactored.ser.gz
模式文件目录：/C:/Users/Jimmy/Downloads/QuestionAnsweringSystem-master/deep-qa/target/classes/questionTypePatterns/
模式匹配策略启用文件：QuestionTypePatternsLevel1_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel2_true.txt
模式匹配策略启用文件：QuestionTypePatternsLevel3_true.txt
	模式文件：QuestionTypePatternsLevel1_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel2_true.txt
	是否允许多匹配：true
	模式文件：QuestionTypePatternsLevel3_true.txt
	是否允许多匹配：true
读文件错误
java.lang.NullPointerException: null
	at java.io.Reader.<init>(Reader.java:78) ~[na:1.7.0_45]
	at java.io.InputStreamReader.<init>(InputStreamReader.java:97) ~[na:1.7.0_45]
	at org.apdplat.qa.util.Tools.getQuestions(Tools.java:484) ~[classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:69) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:88) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.main(ValidateClassifier.java:128) [classes/:na]
从文件中加载0个问题：/org/apdplat.qa/questiontypeanalysis/person_name_questions.txt
读文件错误
java.lang.NullPointerException: null
	at java.io.Reader.<init>(Reader.java:78) ~[na:1.7.0_45]
	at java.io.InputStreamReader.<init>(InputStreamReader.java:97) ~[na:1.7.0_45]
	at org.apdplat.qa.util.Tools.getQuestions(Tools.java:484) ~[classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:69) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:89) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.main(ValidateClassifier.java:128) [classes/:na]
从文件中加载0个问题：/org/apdplat.qa/questiontypeanalysis/location_name_questions.txt
读文件错误
java.lang.NullPointerException: null
	at java.io.Reader.<init>(Reader.java:78) ~[na:1.7.0_45]
	at java.io.InputStreamReader.<init>(InputStreamReader.java:97) ~[na:1.7.0_45]
	at org.apdplat.qa.util.Tools.getQuestions(Tools.java:484) ~[classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:69) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:90) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.main(ValidateClassifier.java:128) [classes/:na]
从文件中加载0个问题：/org/apdplat.qa/questiontypeanalysis/organization_name_questions.txt
读文件错误
java.lang.NullPointerException: null
	at java.io.Reader.<init>(Reader.java:78) ~[na:1.7.0_45]
	at java.io.InputStreamReader.<init>(InputStreamReader.java:97) ~[na:1.7.0_45]
	at org.apdplat.qa.util.Tools.getQuestions(Tools.java:484) ~[classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:69) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:91) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.main(ValidateClassifier.java:128) [classes/:na]
从文件中加载0个问题：/org/apdplat.qa/questiontypeanalysis/number_name_questions.txt
读文件错误
java.lang.NullPointerException: null
	at java.io.Reader.<init>(Reader.java:78) ~[na:1.7.0_45]
	at java.io.InputStreamReader.<init>(InputStreamReader.java:97) ~[na:1.7.0_45]
	at org.apdplat.qa.util.Tools.getQuestions(Tools.java:484) ~[classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:69) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.validate(ValidateClassifier.java:92) [classes/:na]
	at org.apdplat.qa.questiontypeanalysis.ValidateClassifier.main(ValidateClassifier.java:128) [classes/:na]
从文件中加载0个问题：/org/apdplat.qa/questiontypeanalysis/time_name_questions.txt
识别总数: 0
识别正确数: 0
识别错误数: 0
不能识别数: 0
问题分类识别统计
识别总数: 0
识别正确数: 0
识别错误数: 0
不能识别数: 0
识别正确率: NaN%
识别错误率: NaN%
不能识别率: NaN%
文件操作失败
java.io.FileNotFoundException: \Users\apple\.m2\repository\org\apdplat\deep-qa\1.1\deep-qa-1.1.jar (The system cannot find the path specified)
	at java.util.zip.ZipFile.open(Native Method) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:215) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:145) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:159) ~[na:1.7.0_45]
	at org.apdplat.qa.util.ZipUtils.unZip(ZipUtils.java:63) [classes/:na]
	at org.apdplat.qa.util.ZipUtils.main(ZipUtils.java:173) [classes/:na]
文件操作失败
java.io.FileNotFoundException: \Users\apple\.m2\repository\org\apdplat\deep-qa\1.1\deep-qa-1.1.jar (The system cannot find the path specified)
	at java.util.zip.ZipFile.open(Native Method) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:215) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:145) ~[na:1.7.0_45]
	at java.util.zip.ZipFile.<init>(ZipFile.java:159) ~[na:1.7.0_45]
	at org.apdplat.qa.util.ZipUtils.unZip(ZipUtils.java:63) [classes/:na]
	at org.apdplat.qa.util.ZipUtils.main(ZipUtils.java:174) [classes/:na]
没有从数据库中查询到问题：APDPlat的发起人是谁？
文件操作失败
java.io.FileNotFoundException: \Users\apple\.m2\repository\org\apdplat\deep-qa\1.1\deep-qa-1.1.jar (The system cannot find the path specified)
	at java.util.zip.ZipFile.open(Native Method) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:220) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:150) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:164) ~[na:1.8.0_20]
	at org.linuxkernel.proof.digger.util.ZipUtils.unZip(ZipUtils.java:55) [classes/:na]
	at org.linuxkernel.proof.digger.util.ZipUtils.main(ZipUtils.java:165) [classes/:na]
文件操作失败
java.io.FileNotFoundException: \Users\apple\.m2\repository\org\apdplat\deep-qa\1.1\deep-qa-1.1.jar (The system cannot find the path specified)
	at java.util.zip.ZipFile.open(Native Method) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:220) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:150) ~[na:1.8.0_20]
	at java.util.zip.ZipFile.<init>(ZipFile.java:164) ~[na:1.8.0_20]
	at org.linuxkernel.proof.digger.util.ZipUtils.unZip(ZipUtils.java:55) [classes/:na]
	at org.linuxkernel.proof.digger.util.ZipUtils.main(ZipUtils.java:166) [classes/:na]
MySQL获取数据库连接失败：
java.sql.SQLException: Access denied for user 'linuxpku'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3609) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3541) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:943) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.MysqlIO.secureAuth411(MysqlIO.java:4113) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1308) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2336) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2369) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2153) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:792) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47) ~[mysql-connector-java-5.1.18.jar:na]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_20]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_20]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_20]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:408) ~[na:1.8.0_20]
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:381) ~[mysql-connector-java-5.1.18.jar:na]
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:305) ~[mysql-connector-java-5.1.18.jar:na]
	at java.sql.DriverManager.getConnection(DriverManager.java:664) ~[na:1.8.0_20]
	at java.sql.DriverManager.getConnection(DriverManager.java:247) ~[na:1.8.0_20]
	at org.linuxkernel.proof.digger.util.MySQLUtils.getConnection(MySQLUtils.java:305) [classes/:na]
	at org.linuxkernel.proof.digger.util.MySQLUtils.getQuestionFromDatabase(MySQLUtils.java:198) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getAndAnswerQuestion(GoogleDataSource.java:172) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getQuestion(GoogleDataSource.java:81) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.main(GoogleDataSource.java:282) [classes/:na]
没有从数据库中查询到问题：APDPlat的发起人是谁？
执行搜索失败：
java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method) ~[na:1.8.0_20]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_20]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_20]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_20]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_20]
	at java.net.Socket.connect(Socket.java:538) ~[na:1.8.0_20]
	at java.net.Socket.<init>(Socket.java:434) ~[na:1.8.0_20]
	at java.net.Socket.<init>(Socket.java:286) ~[na:1.8.0_20]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) ~[commons-httpclient-3.1.jar:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.search(GoogleDataSource.java:232) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getAndAnswerQuestion(GoogleDataSource.java:195) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getQuestion(GoogleDataSource.java:81) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.main(GoogleDataSource.java:282) [classes/:na]
结果页 1 没有搜索到结果
Question：APDPlat的发起人是谁？ 搜索到Evidence 0 条
执行搜索失败：
java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method) ~[na:1.8.0_20]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_20]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_20]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_20]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_20]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_20]
	at java.net.Socket.connect(Socket.java:538) ~[na:1.8.0_20]
	at java.net.Socket.<init>(Socket.java:434) ~[na:1.8.0_20]
	at java.net.Socket.<init>(Socket.java:286) ~[na:1.8.0_20]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:80) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:122) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:707) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:387) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) ~[commons-httpclient-3.1.jar:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.search(GoogleDataSource.java:232) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getAndAnswerQuestion(GoogleDataSource.java:195) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.getQuestion(GoogleDataSource.java:81) [classes/:na]
	at org.linuxkernel.proof.digger.datasource.GoogleDataSource.main(GoogleDataSource.java:282) [classes/:na]
结果页 1 没有搜索到结果
Question：APDPlat的发起人是谁？ 搜索到Evidence 0 条
